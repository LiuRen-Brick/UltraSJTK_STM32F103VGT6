
UltraTherapy_SJTK_F103VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008830  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08008a18  08008a18  00009a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fbc  08008fbc  0000a154  2**0
                  CONTENTS
  4 .ARM          00000000  08008fbc  08008fbc  0000a154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fbc  08008fbc  0000a154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fbc  08008fbc  00009fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008fc0  08008fc0  00009fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08008fc4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000680  20000158  08009118  0000a158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08009118  0000a7d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012143  00000000  00000000  0000a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003844  00000000  00000000  0001c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0001fb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d92  00000000  00000000  00020c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c290  00000000  00000000  00021a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a09  00000000  00000000  0003dcba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1f02  00000000  00000000  000566c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f85c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f0  00000000  00000000  000f8608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fcef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000158 	.word	0x20000158
 8000204:	00000000 	.word	0x00000000
 8000208:	08008a00 	.word	0x08008a00

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000015c 	.word	0x2000015c
 8000224:	08008a00 	.word	0x08008a00

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	bf28      	it	cs
 8000b70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b74:	d2ed      	bcs.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fmul>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d06f      	beq.n	8000dc8 <__aeabi_fmul+0xf8>
 8000ce8:	441a      	add	r2, r3
 8000cea:	ea80 0c01 	eor.w	ip, r0, r1
 8000cee:	0240      	lsls	r0, r0, #9
 8000cf0:	bf18      	it	ne
 8000cf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf6:	d01e      	beq.n	8000d36 <__aeabi_fmul+0x66>
 8000cf8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d04:	fba0 3101 	umull	r3, r1, r0, r1
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d10:	bf3e      	ittt	cc
 8000d12:	0049      	lslcc	r1, r1, #1
 8000d14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d18:	005b      	lslcc	r3, r3, #1
 8000d1a:	ea40 0001 	orr.w	r0, r0, r1
 8000d1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d22:	2afd      	cmp	r2, #253	@ 0xfd
 8000d24:	d81d      	bhi.n	8000d62 <__aeabi_fmul+0x92>
 8000d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d3e:	bf08      	it	eq
 8000d40:	0249      	lsleq	r1, r1, #9
 8000d42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000d4c:	bfc2      	ittt	gt
 8000d4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d56:	4770      	bxgt	lr
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	dc5d      	bgt.n	8000e20 <__aeabi_fmul+0x150>
 8000d64:	f112 0f19 	cmn.w	r2, #25
 8000d68:	bfdc      	itt	le
 8000d6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d6e:	4770      	bxle	lr
 8000d70:	f1c2 0200 	rsb	r2, r2, #0
 8000d74:	0041      	lsls	r1, r0, #1
 8000d76:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7a:	f1c2 0220 	rsb	r2, r2, #32
 8000d7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d86:	f140 0000 	adc.w	r0, r0, #0
 8000d8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8e:	bf08      	it	eq
 8000d90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d94:	4770      	bx	lr
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0040      	lsleq	r0, r0, #1
 8000da2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000da6:	3a01      	subeq	r2, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xce>
 8000daa:	ea40 000c 	orr.w	r0, r0, ip
 8000dae:	f093 0f00 	teq	r3, #0
 8000db2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0049      	lsleq	r1, r1, #1
 8000dba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dbe:	3b01      	subeq	r3, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xe6>
 8000dc2:	ea41 010c 	orr.w	r1, r1, ip
 8000dc6:	e78f      	b.n	8000ce8 <__aeabi_fmul+0x18>
 8000dc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dcc:	ea92 0f0c 	teq	r2, ip
 8000dd0:	bf18      	it	ne
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d00a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1d8      	bne.n	8000d96 <__aeabi_fmul+0xc6>
 8000de4:	ea80 0001 	eor.w	r0, r0, r1
 8000de8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	bf17      	itett	ne
 8000df4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	f091 0f00 	teqne	r1, #0
 8000dfe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e02:	d014      	beq.n	8000e2e <__aeabi_fmul+0x15e>
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	d101      	bne.n	8000e0e <__aeabi_fmul+0x13e>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d10f      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e0e:	ea93 0f0c 	teq	r3, ip
 8000e12:	d103      	bne.n	8000e1c <__aeabi_fmul+0x14c>
 8000e14:	024b      	lsls	r3, r1, #9
 8000e16:	bf18      	it	ne
 8000e18:	4608      	movne	r0, r1
 8000e1a:	d108      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e2c:	4770      	bx	lr
 8000e2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fdiv>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d069      	beq.n	8000f24 <__aeabi_fdiv+0xec>
 8000e50:	eba2 0203 	sub.w	r2, r2, r3
 8000e54:	ea80 0c01 	eor.w	ip, r0, r1
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5e:	d037      	beq.n	8000ed0 <__aeabi_fdiv+0x98>
 8000e60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf38      	it	cc
 8000e74:	005b      	lslcc	r3, r3, #1
 8000e76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	bf24      	itt	cs
 8000e82:	1a5b      	subcs	r3, r3, r1
 8000e84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9a:	bf24      	itt	cs
 8000e9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	bf18      	it	ne
 8000eb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eba:	d1e0      	bne.n	8000e7e <__aeabi_fdiv+0x46>
 8000ebc:	2afd      	cmp	r2, #253	@ 0xfd
 8000ebe:	f63f af50 	bhi.w	8000d62 <__aeabi_fmul+0x92>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed8:	327f      	adds	r2, #127	@ 0x7f
 8000eda:	bfc2      	ittt	gt
 8000edc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee4:	4770      	bxgt	lr
 8000ee6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	e737      	b.n	8000d62 <__aeabi_fmul+0x92>
 8000ef2:	f092 0f00 	teq	r2, #0
 8000ef6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0040      	lsleq	r0, r0, #1
 8000efe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f02:	3a01      	subeq	r2, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xc2>
 8000f06:	ea40 000c 	orr.w	r0, r0, ip
 8000f0a:	f093 0f00 	teq	r3, #0
 8000f0e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0049      	lsleq	r1, r1, #1
 8000f16:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1a:	3b01      	subeq	r3, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xda>
 8000f1e:	ea41 010c 	orr.w	r1, r1, ip
 8000f22:	e795      	b.n	8000e50 <__aeabi_fdiv+0x18>
 8000f24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d108      	bne.n	8000f40 <__aeabi_fdiv+0x108>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	f47f af7d 	bne.w	8000e2e <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	f47f af70 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e776      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	d104      	bne.n	8000f50 <__aeabi_fdiv+0x118>
 8000f46:	024b      	lsls	r3, r1, #9
 8000f48:	f43f af4c 	beq.w	8000de4 <__aeabi_fmul+0x114>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e76e      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f54:	bf18      	it	ne
 8000f56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5a:	d1ca      	bne.n	8000ef2 <__aeabi_fdiv+0xba>
 8000f5c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f60:	f47f af5c 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f64:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f68:	f47f af3c 	bne.w	8000de4 <__aeabi_fmul+0x114>
 8000f6c:	e75f      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f6e:	bf00      	nop

08000f70 <__gesf2>:
 8000f70:	f04f 3cff 	mov.w	ip, #4294967295
 8000f74:	e006      	b.n	8000f84 <__cmpsf2+0x4>
 8000f76:	bf00      	nop

08000f78 <__lesf2>:
 8000f78:	f04f 0c01 	mov.w	ip, #1
 8000f7c:	e002      	b.n	8000f84 <__cmpsf2+0x4>
 8000f7e:	bf00      	nop

08000f80 <__cmpsf2>:
 8000f80:	f04f 0c01 	mov.w	ip, #1
 8000f84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f94:	bf18      	it	ne
 8000f96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9a:	d011      	beq.n	8000fc0 <__cmpsf2+0x40>
 8000f9c:	b001      	add	sp, #4
 8000f9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa2:	bf18      	it	ne
 8000fa4:	ea90 0f01 	teqne	r0, r1
 8000fa8:	bf58      	it	pl
 8000faa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fae:	bf88      	it	hi
 8000fb0:	17c8      	asrhi	r0, r1, #31
 8000fb2:	bf38      	it	cc
 8000fb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fb8:	bf18      	it	ne
 8000fba:	f040 0001 	orrne.w	r0, r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc4:	d102      	bne.n	8000fcc <__cmpsf2+0x4c>
 8000fc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fca:	d105      	bne.n	8000fd8 <__cmpsf2+0x58>
 8000fcc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd0:	d1e4      	bne.n	8000f9c <__cmpsf2+0x1c>
 8000fd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fd6:	d0e1      	beq.n	8000f9c <__cmpsf2+0x1c>
 8000fd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__aeabi_cfrcmple>:
 8000fe0:	4684      	mov	ip, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4661      	mov	r1, ip
 8000fe6:	e7ff      	b.n	8000fe8 <__aeabi_cfcmpeq>

08000fe8 <__aeabi_cfcmpeq>:
 8000fe8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fea:	f7ff ffc9 	bl	8000f80 <__cmpsf2>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	bf48      	it	mi
 8000ff2:	f110 0f00 	cmnmi.w	r0, #0
 8000ff6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ff8 <__aeabi_fcmpeq>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff fff4 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001000:	bf0c      	ite	eq
 8001002:	2001      	moveq	r0, #1
 8001004:	2000      	movne	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmplt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffea 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmple>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffe0 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001028:	bf94      	ite	ls
 800102a:	2001      	movls	r0, #1
 800102c:	2000      	movhi	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmpge>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffd2 	bl	8000fe0 <__aeabi_cfrcmple>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpgt>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffc8 	bl	8000fe0 <__aeabi_cfrcmple>
 8001050:	bf34      	ite	cc
 8001052:	2001      	movcc	r0, #1
 8001054:	2000      	movcs	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_f2uiz>:
 800105c:	0042      	lsls	r2, r0, #1
 800105e:	d20e      	bcs.n	800107e <__aeabi_f2uiz+0x22>
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30b      	bcc.n	800107e <__aeabi_f2uiz+0x22>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d409      	bmi.n	8001084 <__aeabi_f2uiz+0x28>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	fa23 f002 	lsr.w	r0, r3, r2
 800107c:	4770      	bx	lr
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	4770      	bx	lr
 8001084:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001088:	d101      	bne.n	800108e <__aeabi_f2uiz+0x32>
 800108a:	0242      	lsls	r2, r0, #9
 800108c:	d102      	bne.n	8001094 <__aeabi_f2uiz+0x38>
 800108e:	f04f 30ff 	mov.w	r0, #4294967295
 8001092:	4770      	bx	lr
 8001094:	f04f 0000 	mov.w	r0, #0
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010ae:	4a37      	ldr	r2, [pc, #220]	@ (800118c <MX_ADC1_Init+0xf0>)
 80010b0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b2:	4b35      	ldr	r3, [pc, #212]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010ba:	4b33      	ldr	r3, [pc, #204]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c0:	4b31      	ldr	r3, [pc, #196]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c6:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010c8:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80010cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010d6:	2205      	movs	r2, #5
 80010d8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010da:	482b      	ldr	r0, [pc, #172]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010dc:	f003 f822 	bl	8004124 <HAL_ADC_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010e6:	f000 fa72 	bl	80015ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010ea:	230b      	movs	r3, #11
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80010f2:	2302      	movs	r3, #2
 80010f4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4823      	ldr	r0, [pc, #140]	@ (8001188 <MX_ADC1_Init+0xec>)
 80010fc:	f003 f9f6 	bl	80044ec <HAL_ADC_ConfigChannel>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001106:	f000 fa62 	bl	80015ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800110a:	230c      	movs	r3, #12
 800110c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800110e:	2302      	movs	r3, #2
 8001110:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	4619      	mov	r1, r3
 8001116:	481c      	ldr	r0, [pc, #112]	@ (8001188 <MX_ADC1_Init+0xec>)
 8001118:	f003 f9e8 	bl	80044ec <HAL_ADC_ConfigChannel>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001122:	f000 fa54 	bl	80015ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001126:	230d      	movs	r3, #13
 8001128:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800112a:	2303      	movs	r3, #3
 800112c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4815      	ldr	r0, [pc, #84]	@ (8001188 <MX_ADC1_Init+0xec>)
 8001134:	f003 f9da 	bl	80044ec <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800113e:	f000 fa46 	bl	80015ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001142:	2310      	movs	r3, #16
 8001144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001146:	2304      	movs	r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	4619      	mov	r1, r3
 800114e:	480e      	ldr	r0, [pc, #56]	@ (8001188 <MX_ADC1_Init+0xec>)
 8001150:	f003 f9cc 	bl	80044ec <HAL_ADC_ConfigChannel>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 800115a:	f000 fa38 	bl	80015ce <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800115e:	2311      	movs	r3, #17
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001162:	2305      	movs	r3, #5
 8001164:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001166:	2306      	movs	r3, #6
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <MX_ADC1_Init+0xec>)
 8001170:	f003 f9bc 	bl	80044ec <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800117a:	f000 fa28 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000174 	.word	0x20000174
 800118c:	40012400 	.word	0x40012400

08001190 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a28      	ldr	r2, [pc, #160]	@ (800124c <HAL_ADC_MspInit+0xbc>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d149      	bne.n	8001244 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a26      	ldr	r2, [pc, #152]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c8:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a20      	ldr	r2, [pc, #128]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_ADC_MspInit+0xc0>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Temp_Sample_Pin|Current_Front_Pin|Current_After_Pin;
 80011e0:	230e      	movs	r3, #14
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <HAL_ADC_MspInit+0xc4>)
 80011f0:	f004 fd20 	bl	8005c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 80011f6:	4a19      	ldr	r2, [pc, #100]	@ (800125c <HAL_ADC_MspInit+0xcc>)
 80011f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011fa:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b14      	ldr	r3, [pc, #80]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 8001208:	2280      	movs	r2, #128	@ 0x80
 800120a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 800120e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001212:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001214:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 8001216:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800121a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 800121e:	2200      	movs	r2, #0
 8001220:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 8001224:	2200      	movs	r2, #0
 8001226:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001228:	480b      	ldr	r0, [pc, #44]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 800122a:	f003 fd15 	bl	8004c58 <HAL_DMA_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001234:	f000 f9cb 	bl	80015ce <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 800123c:	621a      	str	r2, [r3, #32]
 800123e:	4a06      	ldr	r2, [pc, #24]	@ (8001258 <HAL_ADC_MspInit+0xc8>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40012400 	.word	0x40012400
 8001250:	40021000 	.word	0x40021000
 8001254:	40011000 	.word	0x40011000
 8001258:	200001a4 	.word	0x200001a4
 800125c:	40020008 	.word	0x40020008

08001260 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <MX_DMA_Init+0x58>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <MX_DMA_Init+0x58>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6153      	str	r3, [r2, #20]
 8001272:	4b11      	ldr	r3, [pc, #68]	@ (80012b8 <MX_DMA_Init+0x58>)
 8001274:	695b      	ldr	r3, [r3, #20]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	200b      	movs	r0, #11
 8001284:	f003 fcb1 	bl	8004bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001288:	200b      	movs	r0, #11
 800128a:	f003 fcca 	bl	8004c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	200c      	movs	r0, #12
 8001294:	f003 fca9 	bl	8004bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001298:	200c      	movs	r0, #12
 800129a:	f003 fcc2 	bl	8004c22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	200d      	movs	r0, #13
 80012a4:	f003 fca1 	bl	8004bea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012a8:	200d      	movs	r0, #13
 80012aa:	f003 fcba 	bl	8004c22 <HAL_NVIC_EnableIRQ>

}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d0:	4b71      	ldr	r3, [pc, #452]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a70      	ldr	r2, [pc, #448]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a6a      	ldr	r2, [pc, #424]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012ee:	f043 0310 	orr.w	r3, r3, #16
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	613b      	str	r3, [r7, #16]
 80012fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001300:	4b65      	ldr	r3, [pc, #404]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a64      	ldr	r2, [pc, #400]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 8001306:	f043 0304 	orr.w	r3, r3, #4
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0304 	and.w	r3, r3, #4
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a5e      	ldr	r2, [pc, #376]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 800131e:	f043 0308 	orr.w	r3, r3, #8
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b5c      	ldr	r3, [pc, #368]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0308 	and.w	r3, r3, #8
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b59      	ldr	r3, [pc, #356]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a58      	ldr	r2, [pc, #352]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 8001336:	f043 0320 	orr.w	r3, r3, #32
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b56      	ldr	r3, [pc, #344]	@ (8001498 <MX_GPIO_Init+0x1dc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0320 	and.w	r3, r3, #32
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin|V36CH1_4_EN_Pin|UltraEn_CH5_Pin
 8001348:	2200      	movs	r2, #0
 800134a:	f648 715e 	movw	r1, #36702	@ 0x8f5e
 800134e:	4853      	ldr	r0, [pc, #332]	@ (800149c <MX_GPIO_Init+0x1e0>)
 8001350:	f004 fe04 	bl	8005f5c <HAL_GPIO_WritePin>
                          |UltraEn_CH1_Pin|UltraEn_CH2_Pin|UltraEn_CH3_Pin|UltraEn_CH4_Pin
                          |AD5160CH2_CS_Pin|AD5160CH1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 8001354:	2200      	movs	r2, #0
 8001356:	f249 71f0 	movw	r1, #38896	@ 0x97f0
 800135a:	4851      	ldr	r0, [pc, #324]	@ (80014a0 <MX_GPIO_Init+0x1e4>)
 800135c:	f004 fdfe 	bl	8005f5c <HAL_GPIO_WritePin>
                          |AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin|UltraEn_CH6_Pin
                          |V36CH5_8_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorEn_CH5_Pin|MotorEn_CH6_Pin|AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin
 8001360:	2200      	movs	r2, #0
 8001362:	f241 31b0 	movw	r1, #5040	@ 0x13b0
 8001366:	484f      	ldr	r0, [pc, #316]	@ (80014a4 <MX_GPIO_Init+0x1e8>)
 8001368:	f004 fdf8 	bl	8005f5c <HAL_GPIO_WritePin>
                          |AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorEn_CH7_Pin|MotorEn_CH8_Pin|AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin
 800136c:	2200      	movs	r2, #0
 800136e:	f247 415b 	movw	r1, #29787	@ 0x745b
 8001372:	484d      	ldr	r0, [pc, #308]	@ (80014a8 <MX_GPIO_Init+0x1ec>)
 8001374:	f004 fdf2 	bl	8005f5c <HAL_GPIO_WritePin>
                          |UltraEn_CH8_Pin|UltraEn_CH7_Pin|AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin
                          |AD9833CH1_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 8001378:	2200      	movs	r2, #0
 800137a:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 800137e:	484b      	ldr	r0, [pc, #300]	@ (80014ac <MX_GPIO_Init+0x1f0>)
 8001380:	f004 fdec 	bl	8005f5c <HAL_GPIO_WritePin>
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AD5160CH1_DATA_Pin AD5160CH1_CLK_Pin AD5160CH2_CS_Pin AD5160CH1_CS_Pin */
  GPIO_InitStruct.Pin = AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin|AD5160CH2_CS_Pin|AD5160CH1_CS_Pin;
 8001384:	f248 030e 	movw	r3, #32782	@ 0x800e
 8001388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138a:	2301      	movs	r3, #1
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 0318 	add.w	r3, r7, #24
 800139a:	4619      	mov	r1, r3
 800139c:	483f      	ldr	r0, [pc, #252]	@ (800149c <MX_GPIO_Init+0x1e0>)
 800139e:	f004 fc49 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : V36CH1_4_EN_Pin UltraEn_CH5_Pin UltraEn_CH1_Pin UltraEn_CH2_Pin
                           UltraEn_CH3_Pin UltraEn_CH4_Pin */
  GPIO_InitStruct.Pin = V36CH1_4_EN_Pin|UltraEn_CH5_Pin|UltraEn_CH1_Pin|UltraEn_CH2_Pin
 80013a2:	f44f 6375 	mov.w	r3, #3920	@ 0xf50
 80013a6:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH3_Pin|UltraEn_CH4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2302      	movs	r3, #2
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b4:	f107 0318 	add.w	r3, r7, #24
 80013b8:	4619      	mov	r1, r3
 80013ba:	4838      	ldr	r0, [pc, #224]	@ (800149c <MX_GPIO_Init+0x1e0>)
 80013bc:	f004 fc3a 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH1_Pin MotorEn_CH2_Pin MotorEn_CH3_Pin MotorEn_CH4_Pin
                           UltraEn_CH6_Pin V36CH5_8_EN_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 80013c0:	f249 03f0 	movw	r3, #37104	@ 0x90f0
 80013c4:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH6_Pin|V36CH5_8_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2302      	movs	r3, #2
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4619      	mov	r1, r3
 80013d8:	4831      	ldr	r0, [pc, #196]	@ (80014a0 <MX_GPIO_Init+0x1e4>)
 80013da:	f004 fc2b 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH5_Pin MotorEn_CH6_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH5_Pin|MotorEn_CH6_Pin;
 80013de:	2330      	movs	r3, #48	@ 0x30
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2302      	movs	r3, #2
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0318 	add.w	r3, r7, #24
 80013f2:	4619      	mov	r1, r3
 80013f4:	482b      	ldr	r0, [pc, #172]	@ (80014a4 <MX_GPIO_Init+0x1e8>)
 80013f6:	f004 fc1d 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH7_Pin MotorEn_CH8_Pin UltraEn_CH8_Pin UltraEn_CH7_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH7_Pin|MotorEn_CH8_Pin|UltraEn_CH8_Pin|UltraEn_CH7_Pin;
 80013fa:	f246 0303 	movw	r3, #24579	@ 0x6003
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2302      	movs	r3, #2
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140c:	f107 0318 	add.w	r3, r7, #24
 8001410:	4619      	mov	r1, r3
 8001412:	4825      	ldr	r0, [pc, #148]	@ (80014a8 <MX_GPIO_Init+0x1ec>)
 8001414:	f004 fc0e 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5160CH2_DATA_Pin AD5160CH2_CLK_Pin AD9833CH1_SCLK_Pin AD9833CH1_SDATA_Pin
                           AD9833CH1_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin|AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin
 8001418:	f241 4358 	movw	r3, #5208	@ 0x1458
 800141c:	61bb      	str	r3, [r7, #24]
                          |AD9833CH1_FSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141e:	2301      	movs	r3, #1
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 0318 	add.w	r3, r7, #24
 800142e:	4619      	mov	r1, r3
 8001430:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <MX_GPIO_Init+0x1ec>)
 8001432:	f004 fbff 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH8_SCLK_Pin AD9833CH8_SDATA_Pin AD9833CH8_FSYNC_Pin AD9833CH7_SCLK_Pin
                           AD9833CH7_SDATA_Pin AD9833CH7_FSYNC_Pin AD9833CH4_SDATA_Pin AD9833CH4_FSYNC_Pin
                           AD9833CH3_SCLK_Pin AD9833CH3_SDATA_Pin AD9833CH3_FSYNC_Pin AD9833CH2_SCLK_Pin
                           AD9833CH2_SDATA_Pin AD9833CH2_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 8001436:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800143a:	61bb      	str	r3, [r7, #24]
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2303      	movs	r3, #3
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4619      	mov	r1, r3
 800144e:	4817      	ldr	r0, [pc, #92]	@ (80014ac <MX_GPIO_Init+0x1f0>)
 8001450:	f004 fbf0 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH6_SCLK_Pin AD9833CH6_SDATA_Pin AD9833CH6_FSYNC_Pin AD9833CH4_SCLK_Pin */
  GPIO_InitStruct.Pin = AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin|AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin;
 8001454:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	4619      	mov	r1, r3
 800146c:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_GPIO_Init+0x1e8>)
 800146e:	f004 fbe1 	bl	8005c34 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH5_SCLK_Pin AD9833CH5_SDATA_Pin AD9833CH5_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin;
 8001472:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 0318 	add.w	r3, r7, #24
 8001488:	4619      	mov	r1, r3
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_GPIO_Init+0x1e4>)
 800148c:	f004 fbd2 	bl	8005c34 <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	40011800 	.word	0x40011800
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40011000 	.word	0x40011000
 80014a8:	40010c00 	.word	0x40010c00
 80014ac:	40011400 	.word	0x40011400

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f002 fdd4 	bl	8004060 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f82c 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f7ff fefe 	bl	80012bc <MX_GPIO_Init>
  MX_DMA_Init();
 80014c0:	f7ff fece 	bl	8001260 <MX_DMA_Init>
  MX_ADC1_Init();
 80014c4:	f7ff fdea 	bl	800109c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80014c8:	f001 f83c 	bl	8002544 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80014cc:	f000 f914 	bl	80016f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014d0:	f000 f9b0 	bl	8001834 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014d4:	f000 fa24 	bl	8001920 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014d8:	f000 fa98 	bl	8001a0c <MX_TIM4_Init>
  MX_TIM8_Init();
 80014dc:	f000 fbb6 	bl	8001c4c <MX_TIM8_Init>
  MX_TIM9_Init();
 80014e0:	f000 fc54 	bl	8001d8c <MX_TIM9_Init>
  MX_TIM10_Init();
 80014e4:	f000 fcb4 	bl	8001e50 <MX_TIM10_Init>
  MX_TIM11_Init();
 80014e8:	f000 fd00 	bl	8001eec <MX_TIM11_Init>
  MX_TIM12_Init();
 80014ec:	f000 fd4c 	bl	8001f88 <MX_TIM12_Init>
  MX_TIM5_Init();
 80014f0:	f000 fb02 	bl	8001af8 <MX_TIM5_Init>
  MX_TIM6_Init();
 80014f4:	f000 fb76 	bl	8001be4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DevSystem_Init();
 80014f8:	f001 f932 	bl	8002760 <DevSystem_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  AppMainFunc();
 80014fc:	f001 f94e 	bl	800279c <AppMainFunc>
	  DevAd9833Set_Main();
 8001500:	f001 fd32 	bl	8002f68 <DevAd9833Set_Main>
	  DevADC1Func_Main();
 8001504:	f001 fe54 	bl	80031b0 <DevADC1Func_Main>
	  DevFlashWrite_Main();
 8001508:	f002 f8fc 	bl	8003704 <DevFlashWrite_Main>
	  DevPwmFunc_Main();
 800150c:	f002 f9c8 	bl	80038a0 <DevPwmFunc_Main>
	  AppMainFunc();
 8001510:	bf00      	nop
 8001512:	e7f3      	b.n	80014fc <main+0x4c>

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b096      	sub	sp, #88	@ 0x58
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800151e:	2228      	movs	r2, #40	@ 0x28
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f007 fa40 	bl	80089a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001548:	2301      	movs	r3, #1
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001562:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001564:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fd0c 	bl	8005f8c <HAL_RCC_OscConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800157a:	f000 f828 	bl	80015ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001582:	2302      	movs	r3, #2
 8001584:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800158e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f004 ff78 	bl	8006490 <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015a6:	f000 f812 	bl	80015ce <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015aa:	2302      	movs	r3, #2
 80015ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80015ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80015b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	4618      	mov	r0, r3
 80015b8:	f005 f8f8 	bl	80067ac <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80015c2:	f000 f804 	bl	80015ce <Error_Handler>
  }
}
 80015c6:	bf00      	nop
 80015c8:	3758      	adds	r7, #88	@ 0x58
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d2:	b672      	cpsid	i
}
 80015d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d6:	bf00      	nop
 80015d8:	e7fd      	b.n	80015d6 <Error_Handler+0x8>
	...

080015dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_MspInit+0x5c>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <HAL_MspInit+0x5c>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6193      	str	r3, [r2, #24]
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_MspInit+0x5c>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <HAL_MspInit+0x5c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001612:	4b0a      	ldr	r3, [pc, #40]	@ (800163c <HAL_MspInit+0x60>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_MspInit+0x60>)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000
 800163c:	40010000 	.word	0x40010000

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001690:	f002 fd2c 	bl	80040ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA1_Channel1_IRQHandler+0x10>)
 800169e:	f003 fcf5 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001a4 	.word	0x200001a4

080016ac <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <DMA1_Channel2_IRQHandler+0x10>)
 80016b2:	f003 fceb 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	2000058c 	.word	0x2000058c

080016c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016c4:	4802      	ldr	r0, [pc, #8]	@ (80016d0 <DMA1_Channel3_IRQHandler+0x10>)
 80016c6:	f003 fce1 	bl	800508c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000548 	.word	0x20000548

080016d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016d8:	4803      	ldr	r0, [pc, #12]	@ (80016e8 <USART3_IRQHandler+0x14>)
 80016da:	f006 fabb 	bl	8007c54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_IdleCallback(&huart3);
 80016de:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <USART3_IRQHandler+0x14>)
 80016e0:	f002 fbfe 	bl	8003ee0 <HAL_UART_IdleCallback>
  /* USER CODE END USART3_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000500 	.word	0x20000500

080016ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr

080016f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b096      	sub	sp, #88	@ 0x58
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fe:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001716:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	605a      	str	r2, [r3, #4]
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	60da      	str	r2, [r3, #12]
 8001724:	611a      	str	r2, [r3, #16]
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2220      	movs	r2, #32
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f007 f939 	bl	80089a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001736:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <MX_TIM1_Init+0x134>)
 8001738:	4a3d      	ldr	r2, [pc, #244]	@ (8001830 <MX_TIM1_Init+0x138>)
 800173a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800173c:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <MX_TIM1_Init+0x134>)
 800173e:	2247      	movs	r2, #71	@ 0x47
 8001740:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001742:	4b3a      	ldr	r3, [pc, #232]	@ (800182c <MX_TIM1_Init+0x134>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001748:	4b38      	ldr	r3, [pc, #224]	@ (800182c <MX_TIM1_Init+0x134>)
 800174a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800174e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001750:	4b36      	ldr	r3, [pc, #216]	@ (800182c <MX_TIM1_Init+0x134>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001756:	4b35      	ldr	r3, [pc, #212]	@ (800182c <MX_TIM1_Init+0x134>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b33      	ldr	r3, [pc, #204]	@ (800182c <MX_TIM1_Init+0x134>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001762:	4832      	ldr	r0, [pc, #200]	@ (800182c <MX_TIM1_Init+0x134>)
 8001764:	f005 f9b0 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800176e:	f7ff ff2e 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001778:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800177c:	4619      	mov	r1, r3
 800177e:	482b      	ldr	r0, [pc, #172]	@ (800182c <MX_TIM1_Init+0x134>)
 8001780:	f005 fcd0 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800178a:	f7ff ff20 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800178e:	4827      	ldr	r0, [pc, #156]	@ (800182c <MX_TIM1_Init+0x134>)
 8001790:	f005 fa76 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800179a:	f7ff ff18 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017aa:	4619      	mov	r1, r3
 80017ac:	481f      	ldr	r0, [pc, #124]	@ (800182c <MX_TIM1_Init+0x134>)
 80017ae:	f006 f891 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017b8:	f7ff ff09 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	@ 0x60
 80017be:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d8:	220c      	movs	r2, #12
 80017da:	4619      	mov	r1, r3
 80017dc:	4813      	ldr	r0, [pc, #76]	@ (800182c <MX_TIM1_Init+0x134>)
 80017de:	f005 fbdf 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80017e8:	f7ff fef1 	bl	80015ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001804:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4807      	ldr	r0, [pc, #28]	@ (800182c <MX_TIM1_Init+0x134>)
 8001810:	f006 f8da 	bl	80079c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800181a:	f7ff fed8 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800181e:	4803      	ldr	r0, [pc, #12]	@ (800182c <MX_TIM1_Init+0x134>)
 8001820:	f000 fcf8 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001824:	bf00      	nop
 8001826:	3758      	adds	r7, #88	@ 0x58
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	200001e8 	.word	0x200001e8
 8001830:	40012c00 	.word	0x40012c00

08001834 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08e      	sub	sp, #56	@ 0x38
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800183a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
 8001860:	615a      	str	r2, [r3, #20]
 8001862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001864:	4b2d      	ldr	r3, [pc, #180]	@ (800191c <MX_TIM2_Init+0xe8>)
 8001866:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800186a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800186c:	4b2b      	ldr	r3, [pc, #172]	@ (800191c <MX_TIM2_Init+0xe8>)
 800186e:	2247      	movs	r2, #71	@ 0x47
 8001870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001872:	4b2a      	ldr	r3, [pc, #168]	@ (800191c <MX_TIM2_Init+0xe8>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001878:	4b28      	ldr	r3, [pc, #160]	@ (800191c <MX_TIM2_Init+0xe8>)
 800187a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800187e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b26      	ldr	r3, [pc, #152]	@ (800191c <MX_TIM2_Init+0xe8>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b25      	ldr	r3, [pc, #148]	@ (800191c <MX_TIM2_Init+0xe8>)
 8001888:	2200      	movs	r2, #0
 800188a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800188c:	4823      	ldr	r0, [pc, #140]	@ (800191c <MX_TIM2_Init+0xe8>)
 800188e:	f005 f91b 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001898:	f7ff fe99 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a6:	4619      	mov	r1, r3
 80018a8:	481c      	ldr	r0, [pc, #112]	@ (800191c <MX_TIM2_Init+0xe8>)
 80018aa:	f005 fc3b 	bl	8007124 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018b4:	f7ff fe8b 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018b8:	4818      	ldr	r0, [pc, #96]	@ (800191c <MX_TIM2_Init+0xe8>)
 80018ba:	f005 f9e1 	bl	8006c80 <HAL_TIM_PWM_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018c4:	f7ff fe83 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4619      	mov	r1, r3
 80018d6:	4811      	ldr	r0, [pc, #68]	@ (800191c <MX_TIM2_Init+0xe8>)
 80018d8:	f005 fffc 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80018e2:	f7ff fe74 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e6:	2360      	movs	r3, #96	@ 0x60
 80018e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	220c      	movs	r2, #12
 80018fa:	4619      	mov	r1, r3
 80018fc:	4807      	ldr	r0, [pc, #28]	@ (800191c <MX_TIM2_Init+0xe8>)
 80018fe:	f005 fb4f 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001908:	f7ff fe61 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800190c:	4803      	ldr	r0, [pc, #12]	@ (800191c <MX_TIM2_Init+0xe8>)
 800190e:	f000 fc81 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001912:	bf00      	nop
 8001914:	3738      	adds	r7, #56	@ 0x38
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000230 	.word	0x20000230

08001920 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08e      	sub	sp, #56	@ 0x38
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
 800194c:	615a      	str	r2, [r3, #20]
 800194e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001950:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001952:	4a2d      	ldr	r2, [pc, #180]	@ (8001a08 <MX_TIM3_Init+0xe8>)
 8001954:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001958:	2247      	movs	r2, #71	@ 0x47
 800195a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001962:	4b28      	ldr	r3, [pc, #160]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001964:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001968:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196a:	4b26      	ldr	r3, [pc, #152]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001976:	4823      	ldr	r0, [pc, #140]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001978:	f005 f8a6 	bl	8006ac8 <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001982:	f7ff fe24 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800198c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001990:	4619      	mov	r1, r3
 8001992:	481c      	ldr	r0, [pc, #112]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 8001994:	f005 fbc6 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800199e:	f7ff fe16 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019a2:	4818      	ldr	r0, [pc, #96]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 80019a4:	f005 f96c 	bl	8006c80 <HAL_TIM_PWM_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019ae:	f7ff fe0e 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	4619      	mov	r1, r3
 80019c0:	4810      	ldr	r0, [pc, #64]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 80019c2:	f005 ff87 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019cc:	f7ff fdff 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d0:	2360      	movs	r3, #96	@ 0x60
 80019d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2204      	movs	r2, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4807      	ldr	r0, [pc, #28]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 80019e8:	f005 fada 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019f2:	f7ff fdec 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019f6:	4803      	ldr	r0, [pc, #12]	@ (8001a04 <MX_TIM3_Init+0xe4>)
 80019f8:	f000 fc0c 	bl	8002214 <HAL_TIM_MspPostInit>

}
 80019fc:	bf00      	nop
 80019fe:	3738      	adds	r7, #56	@ 0x38
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000278 	.word	0x20000278
 8001a08:	40000400 	.word	0x40000400

08001a0c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08e      	sub	sp, #56	@ 0x38
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0320 	add.w	r3, r7, #32
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001af4 <MX_TIM4_Init+0xe8>)
 8001a40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001a42:	4b2b      	ldr	r3, [pc, #172]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a44:	2247      	movs	r2, #71	@ 0x47
 8001a46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a48:	4b29      	ldr	r3, [pc, #164]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a56:	4b26      	ldr	r3, [pc, #152]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a62:	4823      	ldr	r0, [pc, #140]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a64:	f005 f830 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a6e:	f7ff fdae 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481c      	ldr	r0, [pc, #112]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a80:	f005 fb50 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a8a:	f7ff fda0 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a8e:	4818      	ldr	r0, [pc, #96]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001a90:	f005 f8f6 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a9a:	f7ff fd98 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa6:	f107 0320 	add.w	r3, r7, #32
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001aae:	f005 ff11 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ab8:	f7ff fd89 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	2360      	movs	r3, #96	@ 0x60
 8001abe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2204      	movs	r2, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4807      	ldr	r0, [pc, #28]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001ad4:	f005 fa64 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ade:	f7ff fd76 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ae2:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <MX_TIM4_Init+0xe4>)
 8001ae4:	f000 fb96 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001ae8:	bf00      	nop
 8001aea:	3738      	adds	r7, #56	@ 0x38
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002c0 	.word	0x200002c0
 8001af4:	40000800 	.word	0x40000800

08001af8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08e      	sub	sp, #56	@ 0x38
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	f107 0320 	add.w	r3, r7, #32
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	1d3b      	adds	r3, r7, #4
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b28:	4b2c      	ldr	r3, [pc, #176]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <MX_TIM5_Init+0xe8>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8001b2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b30:	2247      	movs	r2, #71	@ 0x47
 8001b32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001b3a:	4b28      	ldr	r3, [pc, #160]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b3c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b26      	ldr	r3, [pc, #152]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b24      	ldr	r3, [pc, #144]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b4e:	4823      	ldr	r0, [pc, #140]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b50:	f004 ffba 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b5a:	f7ff fd38 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b64:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	481c      	ldr	r0, [pc, #112]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b6c:	f005 fada 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001b76:	f7ff fd2a 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b7a:	4818      	ldr	r0, [pc, #96]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b7c:	f005 f880 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001b86:	f7ff fd22 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	4619      	mov	r1, r3
 8001b98:	4810      	ldr	r0, [pc, #64]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001b9a:	f005 fe9b 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001ba4:	f7ff fd13 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba8:	2360      	movs	r3, #96	@ 0x60
 8001baa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2208      	movs	r2, #8
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001bc0:	f005 f9ee 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001bca:	f7ff fd00 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bce:	4803      	ldr	r0, [pc, #12]	@ (8001bdc <MX_TIM5_Init+0xe4>)
 8001bd0:	f000 fb20 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001bd4:	bf00      	nop
 8001bd6:	3738      	adds	r7, #56	@ 0x38
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000308 	.word	0x20000308
 8001be0:	40000c00 	.word	0x40000c00

08001be4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bea:	463b      	mov	r3, r7
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001bf4:	4a14      	ldr	r2, [pc, #80]	@ (8001c48 <MX_TIM6_Init+0x64>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001bfa:	2247      	movs	r2, #71	@ 0x47
 8001bfc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001c06:	2263      	movs	r2, #99	@ 0x63
 8001c08:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001c12:	f004 ff59 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001c1c:	f7ff fcd7 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c28:	463b      	mov	r3, r7
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	@ (8001c44 <MX_TIM6_Init+0x60>)
 8001c2e:	f005 fe51 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001c38:	f7ff fcc9 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000350 	.word	0x20000350
 8001c48:	40001000 	.word	0x40001000

08001c4c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b096      	sub	sp, #88	@ 0x58
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c52:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7e:	1d3b      	adds	r3, r7, #4
 8001c80:	2220      	movs	r2, #32
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f006 fe8f 	bl	80089a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001c8c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d88 <MX_TIM8_Init+0x13c>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8001c90:	4b3c      	ldr	r3, [pc, #240]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001c92:	2247      	movs	r2, #71	@ 0x47
 8001c94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001c9c:	4b39      	ldr	r3, [pc, #228]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001c9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ca2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b37      	ldr	r3, [pc, #220]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001caa:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b34      	ldr	r3, [pc, #208]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cb6:	4833      	ldr	r0, [pc, #204]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001cb8:	f004 ff06 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001cc2:	f7ff fc84 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ccc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482c      	ldr	r0, [pc, #176]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001cd4:	f005 fa26 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cde:	f7ff fc76 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ce2:	4828      	ldr	r0, [pc, #160]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001ce4:	f004 ffcc 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cee:	f7ff fc6e 	bl	80015ce <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4820      	ldr	r0, [pc, #128]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001d02:	f005 fde7 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d0c:	f7ff fc5f 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d10:	2360      	movs	r3, #96	@ 0x60
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d30:	2200      	movs	r2, #0
 8001d32:	4619      	mov	r1, r3
 8001d34:	4813      	ldr	r0, [pc, #76]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001d36:	f005 f933 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d40:	f7ff fc45 	bl	80015ce <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4807      	ldr	r0, [pc, #28]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001d68:	f005 fe2e 	bl	80079c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001d72:	f7ff fc2c 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d76:	4803      	ldr	r0, [pc, #12]	@ (8001d84 <MX_TIM8_Init+0x138>)
 8001d78:	f000 fa4c 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001d7c:	bf00      	nop
 8001d7e:	3758      	adds	r7, #88	@ 0x58
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000398 	.word	0x20000398
 8001d88:	40013400 	.word	0x40013400

08001d8c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08c      	sub	sp, #48	@ 0x30
 8001d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d92:	f107 0320 	add.w	r3, r7, #32
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	611a      	str	r2, [r3, #16]
 8001dae:	615a      	str	r2, [r3, #20]
 8001db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001db2:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001db4:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <MX_TIM9_Init+0xc0>)
 8001db6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72-1;
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dba:	2247      	movs	r2, #71	@ 0x47
 8001dbc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4255;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dc6:	f241 029f 	movw	r2, #4255	@ 0x109f
 8001dca:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001dd8:	481b      	ldr	r0, [pc, #108]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001dda:	f004 fe75 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001de4:	f7ff fbf3 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dec:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dee:	f107 0320 	add.w	r3, r7, #32
 8001df2:	4619      	mov	r1, r3
 8001df4:	4814      	ldr	r0, [pc, #80]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001df6:	f005 f995 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e00:	f7ff fbe5 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e04:	4810      	ldr	r0, [pc, #64]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001e06:	f004 ff3b 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e10:	f7ff fbdd 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e14:	2360      	movs	r3, #96	@ 0x60
 8001e16:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	2204      	movs	r2, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4807      	ldr	r0, [pc, #28]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001e2c:	f005 f8b8 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e36:	f7ff fbca 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e3a:	4803      	ldr	r0, [pc, #12]	@ (8001e48 <MX_TIM9_Init+0xbc>)
 8001e3c:	f000 f9ea 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	@ 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200003e0 	.word	0x200003e0
 8001e4c:	40014c00 	.word	0x40014c00

08001e50 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]
 8001e64:	615a      	str	r2, [r3, #20]
 8001e66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e68:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee8 <MX_TIM10_Init+0x98>)
 8001e6c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e70:	2247      	movs	r2, #71	@ 0x47
 8001e72:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e74:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e7c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001e80:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e82:	4b18      	ldr	r3, [pc, #96]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e88:	4b16      	ldr	r3, [pc, #88]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e8e:	4815      	ldr	r0, [pc, #84]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001e90:	f004 fe1a 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001e9a:	f7ff fb98 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001e9e:	4811      	ldr	r0, [pc, #68]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001ea0:	f004 feee 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001eaa:	f7ff fb90 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eae:	2360      	movs	r3, #96	@ 0x60
 8001eb0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebe:	1d3b      	adds	r3, r7, #4
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4807      	ldr	r0, [pc, #28]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001ec6:	f005 f86b 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001ed0:	f7ff fb7d 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001ed4:	4803      	ldr	r0, [pc, #12]	@ (8001ee4 <MX_TIM10_Init+0x94>)
 8001ed6:	f000 f99d 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001eda:	bf00      	nop
 8001edc:	3720      	adds	r7, #32
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20000428 	.word	0x20000428
 8001ee8:	40015000 	.word	0x40015000

08001eec <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
 8001f00:	615a      	str	r2, [r3, #20]
 8001f02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f04:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f06:	4a1f      	ldr	r2, [pc, #124]	@ (8001f84 <MX_TIM11_Init+0x98>)
 8001f08:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 72-1;
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f0c:	2247      	movs	r2, #71	@ 0x47
 8001f0e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f10:	4b1b      	ldr	r3, [pc, #108]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f18:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f1c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f1e:	4b18      	ldr	r3, [pc, #96]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f2a:	4815      	ldr	r0, [pc, #84]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f2c:	f004 fdcc 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001f36:	f7ff fb4a 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001f3a:	4811      	ldr	r0, [pc, #68]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f3c:	f004 fea0 	bl	8006c80 <HAL_TIM_PWM_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001f46:	f7ff fb42 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f4a:	2360      	movs	r3, #96	@ 0x60
 8001f4c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4807      	ldr	r0, [pc, #28]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f62:	f005 f81d 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001f6c:	f7ff fb2f 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001f70:	4803      	ldr	r0, [pc, #12]	@ (8001f80 <MX_TIM11_Init+0x94>)
 8001f72:	f000 f94f 	bl	8002214 <HAL_TIM_MspPostInit>

}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000470 	.word	0x20000470
 8001f84:	40015400 	.word	0x40015400

08001f88 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9c:	1d3b      	adds	r3, r7, #4
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]
 8001faa:	615a      	str	r2, [r3, #20]
 8001fac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fae:	4b25      	ldr	r3, [pc, #148]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fb0:	4a25      	ldr	r2, [pc, #148]	@ (8002048 <MX_TIM12_Init+0xc0>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 8001fb4:	4b23      	ldr	r3, [pc, #140]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fb6:	2247      	movs	r2, #71	@ 0x47
 8001fb8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b22      	ldr	r3, [pc, #136]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000;
 8001fc0:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fc6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001fd4:	481b      	ldr	r0, [pc, #108]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001fd6:	f004 fd77 	bl	8006ac8 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001fe0:	f7ff faf5 	bl	80015ce <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4814      	ldr	r0, [pc, #80]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8001ff2:	f005 f897 	bl	8007124 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ffc:	f7ff fae7 	bl	80015ce <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002000:	4810      	ldr	r0, [pc, #64]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8002002:	f004 fe3d 	bl	8006c80 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800200c:	f7ff fadf 	bl	80015ce <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002010:	2360      	movs	r3, #96	@ 0x60
 8002012:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2204      	movs	r2, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4807      	ldr	r0, [pc, #28]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8002028:	f004 ffba 	bl	8006fa0 <HAL_TIM_PWM_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002032:	f7ff facc 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002036:	4803      	ldr	r0, [pc, #12]	@ (8002044 <MX_TIM12_Init+0xbc>)
 8002038:	f000 f8ec 	bl	8002214 <HAL_TIM_MspPostInit>

}
 800203c:	bf00      	nop
 800203e:	3730      	adds	r7, #48	@ 0x30
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	200004b8 	.word	0x200004b8
 8002048:	40001800 	.word	0x40001800

0800204c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800204c:	b480      	push	{r7}
 800204e:	b08f      	sub	sp, #60	@ 0x3c
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a63      	ldr	r2, [pc, #396]	@ (80021e8 <HAL_TIM_Base_MspInit+0x19c>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10c      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a62      	ldr	r2, [pc, #392]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002064:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b60      	ldr	r3, [pc, #384]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002072:	637b      	str	r3, [r7, #52]	@ 0x34
 8002074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002076:	e0b2      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d10c      	bne.n	800209c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	4b5a      	ldr	r3, [pc, #360]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a59      	ldr	r2, [pc, #356]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b57      	ldr	r3, [pc, #348]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800209a:	e0a0      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM3)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a53      	ldr	r2, [pc, #332]	@ (80021f0 <HAL_TIM_Base_MspInit+0x1a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d10c      	bne.n	80020c0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020a6:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	4a50      	ldr	r2, [pc, #320]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020ac:	f043 0302 	orr.w	r3, r3, #2
 80020b0:	61d3      	str	r3, [r2, #28]
 80020b2:	4b4e      	ldr	r3, [pc, #312]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020be:	e08e      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM4)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	@ (80021f4 <HAL_TIM_Base_MspInit+0x1a8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10c      	bne.n	80020e4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ca:	4b48      	ldr	r3, [pc, #288]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4a47      	ldr	r2, [pc, #284]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	61d3      	str	r3, [r2, #28]
 80020d6:	4b45      	ldr	r3, [pc, #276]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80020e2:	e07c      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM5)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a43      	ldr	r2, [pc, #268]	@ (80021f8 <HAL_TIM_Base_MspInit+0x1ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d10c      	bne.n	8002108 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ee:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a3e      	ldr	r2, [pc, #248]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020f4:	f043 0308 	orr.w	r3, r3, #8
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b3c      	ldr	r3, [pc, #240]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002106:	e06a      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM6)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a3b      	ldr	r2, [pc, #236]	@ (80021fc <HAL_TIM_Base_MspInit+0x1b0>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d10c      	bne.n	800212c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002112:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a35      	ldr	r2, [pc, #212]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002118:	f043 0310 	orr.w	r3, r3, #16
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b33      	ldr	r3, [pc, #204]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0310 	and.w	r3, r3, #16
 8002126:	623b      	str	r3, [r7, #32]
 8002128:	6a3b      	ldr	r3, [r7, #32]
}
 800212a:	e058      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM8)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a33      	ldr	r2, [pc, #204]	@ (8002200 <HAL_TIM_Base_MspInit+0x1b4>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10c      	bne.n	8002150 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002136:	4b2d      	ldr	r3, [pc, #180]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	4a2c      	ldr	r2, [pc, #176]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 800213c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002140:	6193      	str	r3, [r2, #24]
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
}
 800214e:	e046      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM9)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a2b      	ldr	r2, [pc, #172]	@ (8002204 <HAL_TIM_Base_MspInit+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d10c      	bne.n	8002174 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800215a:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	4a23      	ldr	r2, [pc, #140]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002160:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002164:	6193      	str	r3, [r2, #24]
 8002166:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800216e:	61bb      	str	r3, [r7, #24]
 8002170:	69bb      	ldr	r3, [r7, #24]
}
 8002172:	e034      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM10)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a23      	ldr	r2, [pc, #140]	@ (8002208 <HAL_TIM_Base_MspInit+0x1bc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10c      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a1a      	ldr	r2, [pc, #104]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 8002184:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697b      	ldr	r3, [r7, #20]
}
 8002196:	e022      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM11)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a1b      	ldr	r2, [pc, #108]	@ (800220c <HAL_TIM_Base_MspInit+0x1c0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10c      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a11      	ldr	r2, [pc, #68]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
}
 80021ba:	e010      	b.n	80021de <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM12)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a13      	ldr	r2, [pc, #76]	@ (8002210 <HAL_TIM_Base_MspInit+0x1c4>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10b      	bne.n	80021de <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021c6:	4b09      	ldr	r3, [pc, #36]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	4a08      	ldr	r2, [pc, #32]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021d0:	61d3      	str	r3, [r2, #28]
 80021d2:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_TIM_Base_MspInit+0x1a0>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	bf00      	nop
 80021e0:	373c      	adds	r7, #60	@ 0x3c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40001000 	.word	0x40001000
 8002200:	40013400 	.word	0x40013400
 8002204:	40014c00 	.word	0x40014c00
 8002208:	40015000 	.word	0x40015000
 800220c:	40015400 	.word	0x40015400
 8002210:	40001800 	.word	0x40001800

08002214 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b094      	sub	sp, #80	@ 0x50
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a93      	ldr	r2, [pc, #588]	@ (800247c <HAL_TIM_MspPostInit+0x268>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d12b      	bne.n	800228c <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002234:	4b92      	ldr	r3, [pc, #584]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	4a91      	ldr	r2, [pc, #580]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800223a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800223e:	6193      	str	r3, [r2, #24]
 8002240:	4b8f      	ldr	r3, [pc, #572]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002242:	699b      	ldr	r3, [r3, #24]
 8002244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
 800224a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800224c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2302      	movs	r3, #2
 8002258:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800225a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800225e:	4619      	mov	r1, r3
 8002260:	4888      	ldr	r0, [pc, #544]	@ (8002484 <HAL_TIM_MspPostInit+0x270>)
 8002262:	f003 fce7 	bl	8005c34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002266:	4b88      	ldr	r3, [pc, #544]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	647b      	str	r3, [r7, #68]	@ 0x44
 800226c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800226e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002272:	647b      	str	r3, [r7, #68]	@ 0x44
 8002274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002276:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800227a:	647b      	str	r3, [r7, #68]	@ 0x44
 800227c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800227e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002282:	647b      	str	r3, [r7, #68]	@ 0x44
 8002284:	4a80      	ldr	r2, [pc, #512]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 8002286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002288:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800228a:	e14e      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002294:	d12b      	bne.n	80022ee <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002296:	4b7a      	ldr	r3, [pc, #488]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	4a79      	ldr	r2, [pc, #484]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	6193      	str	r3, [r2, #24]
 80022a2:	4b77      	ldr	r3, [pc, #476]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2302      	movs	r3, #2
 80022ba:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022c0:	4619      	mov	r1, r3
 80022c2:	4872      	ldr	r0, [pc, #456]	@ (800248c <HAL_TIM_MspPostInit+0x278>)
 80022c4:	f003 fcb6 	bl	8005c34 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80022c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022d8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80022dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022e0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022e6:	4a68      	ldr	r2, [pc, #416]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 80022e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80022ea:	6053      	str	r3, [r2, #4]
}
 80022ec:	e11d      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM3)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a67      	ldr	r2, [pc, #412]	@ (8002490 <HAL_TIM_MspPostInit+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d12a      	bne.n	800234e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	4b61      	ldr	r3, [pc, #388]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4a60      	ldr	r2, [pc, #384]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	6193      	str	r3, [r2, #24]
 8002304:	4b5e      	ldr	r3, [pc, #376]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800230e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002310:	2320      	movs	r3, #32
 8002312:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002314:	2302      	movs	r3, #2
 8002316:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2302      	movs	r3, #2
 800231a:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800231c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002320:	4619      	mov	r1, r3
 8002322:	485a      	ldr	r0, [pc, #360]	@ (800248c <HAL_TIM_MspPostInit+0x278>)
 8002324:	f003 fc86 	bl	8005c34 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002328:	4b57      	ldr	r3, [pc, #348]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800232e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002330:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002334:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002338:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800233c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800233e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002340:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002346:	4a50      	ldr	r2, [pc, #320]	@ (8002488 <HAL_TIM_MspPostInit+0x274>)
 8002348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234a:	6053      	str	r3, [r2, #4]
}
 800234c:	e0ed      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM4)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a50      	ldr	r2, [pc, #320]	@ (8002494 <HAL_TIM_MspPostInit+0x280>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d118      	bne.n	800238a <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002358:	4b49      	ldr	r3, [pc, #292]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a48      	ldr	r2, [pc, #288]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800235e:	f043 0308 	orr.w	r3, r3, #8
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b46      	ldr	r3, [pc, #280]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	627b      	str	r3, [r7, #36]	@ 0x24
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002370:	2380      	movs	r3, #128	@ 0x80
 8002372:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	2302      	movs	r3, #2
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002378:	2302      	movs	r3, #2
 800237a:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002380:	4619      	mov	r1, r3
 8002382:	4842      	ldr	r0, [pc, #264]	@ (800248c <HAL_TIM_MspPostInit+0x278>)
 8002384:	f003 fc56 	bl	8005c34 <HAL_GPIO_Init>
}
 8002388:	e0cf      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM5)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a42      	ldr	r2, [pc, #264]	@ (8002498 <HAL_TIM_MspPostInit+0x284>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d118      	bne.n	80023c6 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002394:	4b3a      	ldr	r3, [pc, #232]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a39      	ldr	r2, [pc, #228]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800239a:	f043 0304 	orr.w	r3, r3, #4
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b37      	ldr	r3, [pc, #220]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	623b      	str	r3, [r7, #32]
 80023aa:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023ac:	2304      	movs	r3, #4
 80023ae:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2302      	movs	r3, #2
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023bc:	4619      	mov	r1, r3
 80023be:	4837      	ldr	r0, [pc, #220]	@ (800249c <HAL_TIM_MspPostInit+0x288>)
 80023c0:	f003 fc38 	bl	8005c34 <HAL_GPIO_Init>
}
 80023c4:	e0b1      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM8)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a35      	ldr	r2, [pc, #212]	@ (80024a0 <HAL_TIM_MspPostInit+0x28c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d118      	bne.n	8002402 <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a2a      	ldr	r2, [pc, #168]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80023d6:	f043 0310 	orr.w	r3, r3, #16
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f003 0310 	and.w	r3, r3, #16
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023e8:	2340      	movs	r3, #64	@ 0x40
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f0:	2302      	movs	r3, #2
 80023f2:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023f8:	4619      	mov	r1, r3
 80023fa:	482a      	ldr	r0, [pc, #168]	@ (80024a4 <HAL_TIM_MspPostInit+0x290>)
 80023fc:	f003 fc1a 	bl	8005c34 <HAL_GPIO_Init>
}
 8002400:	e093      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM9)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a28      	ldr	r2, [pc, #160]	@ (80024a8 <HAL_TIM_MspPostInit+0x294>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d118      	bne.n	800243e <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240c:	4b1c      	ldr	r3, [pc, #112]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6193      	str	r3, [r2, #24]
 8002418:	4b19      	ldr	r3, [pc, #100]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002424:	2308      	movs	r3, #8
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2302      	movs	r3, #2
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002430:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002434:	4619      	mov	r1, r3
 8002436:	4819      	ldr	r0, [pc, #100]	@ (800249c <HAL_TIM_MspPostInit+0x288>)
 8002438:	f003 fbfc 	bl	8005c34 <HAL_GPIO_Init>
}
 800243c:	e075      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM10)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1a      	ldr	r2, [pc, #104]	@ (80024ac <HAL_TIM_MspPostInit+0x298>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d133      	bne.n	80024b0 <HAL_TIM_MspPostInit+0x29c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a0c      	ldr	r2, [pc, #48]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <HAL_TIM_MspPostInit+0x26c>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002460:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002464:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2302      	movs	r3, #2
 800246c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002472:	4619      	mov	r1, r3
 8002474:	4805      	ldr	r0, [pc, #20]	@ (800248c <HAL_TIM_MspPostInit+0x278>)
 8002476:	f003 fbdd 	bl	8005c34 <HAL_GPIO_Init>
}
 800247a:	e056      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
 800247c:	40012c00 	.word	0x40012c00
 8002480:	40021000 	.word	0x40021000
 8002484:	40011800 	.word	0x40011800
 8002488:	40010000 	.word	0x40010000
 800248c:	40010c00 	.word	0x40010c00
 8002490:	40000400 	.word	0x40000400
 8002494:	40000800 	.word	0x40000800
 8002498:	40000c00 	.word	0x40000c00
 800249c:	40010800 	.word	0x40010800
 80024a0:	40013400 	.word	0x40013400
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40014c00 	.word	0x40014c00
 80024ac:	40015000 	.word	0x40015000
  else if(timHandle->Instance==TIM11)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002534 <HAL_TIM_MspPostInit+0x320>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d119      	bne.n	80024ee <HAL_TIM_MspPostInit+0x2da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	4a1e      	ldr	r2, [pc, #120]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 80024c0:	f043 0308 	orr.w	r3, r3, #8
 80024c4:	6193      	str	r3, [r2, #24]
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2302      	movs	r3, #2
 80024de:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024e4:	4619      	mov	r1, r3
 80024e6:	4815      	ldr	r0, [pc, #84]	@ (800253c <HAL_TIM_MspPostInit+0x328>)
 80024e8:	f003 fba4 	bl	8005c34 <HAL_GPIO_Init>
}
 80024ec:	e01d      	b.n	800252a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM12)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	@ (8002540 <HAL_TIM_MspPostInit+0x32c>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d118      	bne.n	800252a <HAL_TIM_MspPostInit+0x316>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 80024fe:	f043 0308 	orr.w	r3, r3, #8
 8002502:	6193      	str	r3, [r2, #24]
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <HAL_TIM_MspPostInit+0x324>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002510:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002516:	2302      	movs	r3, #2
 8002518:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2302      	movs	r3, #2
 800251c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800251e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002522:	4619      	mov	r1, r3
 8002524:	4805      	ldr	r0, [pc, #20]	@ (800253c <HAL_TIM_MspPostInit+0x328>)
 8002526:	f003 fb85 	bl	8005c34 <HAL_GPIO_Init>
}
 800252a:	bf00      	nop
 800252c:	3750      	adds	r7, #80	@ 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40015400 	.word	0x40015400
 8002538:	40021000 	.word	0x40021000
 800253c:	40010c00 	.word	0x40010c00
 8002540:	40001800 	.word	0x40001800

08002544 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002548:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <MX_USART3_UART_Init+0x50>)
 800254c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 8002550:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002554:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002556:	4b0e      	ldr	r3, [pc, #56]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800255c:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 800255e:	2200      	movs	r2, #0
 8002560:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002562:	4b0b      	ldr	r3, [pc, #44]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002568:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 800256a:	220c      	movs	r2, #12
 800256c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800256e:	4b08      	ldr	r3, [pc, #32]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800257a:	4805      	ldr	r0, [pc, #20]	@ (8002590 <MX_USART3_UART_Init+0x4c>)
 800257c:	f005 fa75 	bl	8007a6a <HAL_UART_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002586:	f7ff f822 	bl	80015ce <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000500 	.word	0x20000500
 8002594:	40004800 	.word	0x40004800

08002598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08a      	sub	sp, #40	@ 0x28
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 0314 	add.w	r3, r7, #20
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a50      	ldr	r2, [pc, #320]	@ (80026f4 <HAL_UART_MspInit+0x15c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f040 8098 	bne.w	80026ea <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ba:	4b4f      	ldr	r3, [pc, #316]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a4e      	ldr	r2, [pc, #312]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c4:	61d3      	str	r3, [r2, #28]
 80025c6:	4b4c      	ldr	r3, [pc, #304]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025d2:	4b49      	ldr	r3, [pc, #292]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	4a48      	ldr	r2, [pc, #288]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	6193      	str	r3, [r2, #24]
 80025de:	4b46      	ldr	r3, [pc, #280]	@ (80026f8 <HAL_UART_MspInit+0x160>)
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025f4:	2303      	movs	r3, #3
 80025f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	4619      	mov	r1, r3
 80025fe:	483f      	ldr	r0, [pc, #252]	@ (80026fc <HAL_UART_MspInit+0x164>)
 8002600:	f003 fb18 	bl	8005c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002604:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260a:	2300      	movs	r3, #0
 800260c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	4838      	ldr	r0, [pc, #224]	@ (80026fc <HAL_UART_MspInit+0x164>)
 800261a:	f003 fb0b 	bl	8005c34 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800261e:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_UART_MspInit+0x168>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	f043 0310 	orr.w	r3, r3, #16
 800263a:	627b      	str	r3, [r7, #36]	@ 0x24
 800263c:	4a30      	ldr	r2, [pc, #192]	@ (8002700 <HAL_UART_MspInit+0x168>)
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002642:	4b30      	ldr	r3, [pc, #192]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002644:	4a30      	ldr	r2, [pc, #192]	@ (8002708 <HAL_UART_MspInit+0x170>)
 8002646:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002648:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800264e:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002654:	4b2b      	ldr	r3, [pc, #172]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002656:	2280      	movs	r2, #128	@ 0x80
 8002658:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800265a:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 800265c:	2200      	movs	r2, #0
 800265e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002660:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002662:	2200      	movs	r2, #0
 8002664:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002666:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002668:	2200      	movs	r2, #0
 800266a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800266c:	4b25      	ldr	r3, [pc, #148]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 800266e:	2200      	movs	r2, #0
 8002670:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002672:	4824      	ldr	r0, [pc, #144]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002674:	f002 faf0 	bl	8004c58 <HAL_DMA_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800267e:	f7fe ffa6 	bl	80015ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a1f      	ldr	r2, [pc, #124]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 8002686:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002688:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_UART_MspInit+0x16c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 800268e:	4b1f      	ldr	r3, [pc, #124]	@ (800270c <HAL_UART_MspInit+0x174>)
 8002690:	4a1f      	ldr	r2, [pc, #124]	@ (8002710 <HAL_UART_MspInit+0x178>)
 8002692:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <HAL_UART_MspInit+0x174>)
 8002696:	2210      	movs	r2, #16
 8002698:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269a:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <HAL_UART_MspInit+0x174>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026a2:	2280      	movs	r2, #128	@ 0x80
 80026a4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a6:	4b19      	ldr	r3, [pc, #100]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ac:	4b17      	ldr	r3, [pc, #92]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026b2:	4b16      	ldr	r3, [pc, #88]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026be:	4813      	ldr	r0, [pc, #76]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026c0:	f002 faca 	bl	8004c58 <HAL_DMA_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80026ca:	f7fe ff80 	bl	80015ce <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a0e      	ldr	r2, [pc, #56]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80026d4:	4a0d      	ldr	r2, [pc, #52]	@ (800270c <HAL_UART_MspInit+0x174>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2027      	movs	r0, #39	@ 0x27
 80026e0:	f002 fa83 	bl	8004bea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80026e4:	2027      	movs	r0, #39	@ 0x27
 80026e6:	f002 fa9c 	bl	8004c22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	3728      	adds	r7, #40	@ 0x28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004800 	.word	0x40004800
 80026f8:	40021000 	.word	0x40021000
 80026fc:	40011000 	.word	0x40011000
 8002700:	40010000 	.word	0x40010000
 8002704:	20000548 	.word	0x20000548
 8002708:	40020030 	.word	0x40020030
 800270c:	2000058c 	.word	0x2000058c
 8002710:	4002001c 	.word	0x4002001c

08002714 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002714:	f7fe ffea 	bl	80016ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480b      	ldr	r0, [pc, #44]	@ (8002748 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800271a:	490c      	ldr	r1, [pc, #48]	@ (800274c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800271c:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <LoopFillZerobss+0x16>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a09      	ldr	r2, [pc, #36]	@ (8002754 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002730:	4c09      	ldr	r4, [pc, #36]	@ (8002758 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f006 f93b 	bl	80089b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002742:	f7fe feb5 	bl	80014b0 <main>
  bx lr
 8002746:	4770      	bx	lr
  ldr r0, =_sdata
 8002748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800274c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002750:	08008fc4 	.word	0x08008fc4
  ldr r2, =_sbss
 8002754:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8002758:	200007d8 	.word	0x200007d8

0800275c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800275c:	e7fe      	b.n	800275c <ADC1_2_IRQHandler>
	...

08002760 <DevSystem_Init>:
	MotorEn_CH5_Pin, MotorEn_CH6_Pin, MotorEn_CH7_Pin, MotorEn_CH8_Pin
};


void DevSystem_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	DevParam_Init();
 8002764:	f000 ff86 	bl	8003674 <DevParam_Init>
	DevAD9833Set_Init();
 8002768:	f000 fb7e 	bl	8002e68 <DevAD9833Set_Init>
	DevADC1Func_Init();
 800276c:	f000 fd10 	bl	8003190 <DevADC1Func_Init>
	DevAD9833Set_Init();
 8002770:	f000 fb7a 	bl	8002e68 <DevAD9833Set_Init>
	DevPwmFunc_Init();
 8002774:	f001 f816 	bl	80037a4 <DevPwmFunc_Init>

	HAL_GPIO_WritePin(V36CH1_4_EN_GPIO_Port, V36CH1_4_EN_Pin, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2110      	movs	r1, #16
 800277c:	4805      	ldr	r0, [pc, #20]	@ (8002794 <DevSystem_Init+0x34>)
 800277e:	f003 fbed 	bl	8005f5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V36CH5_8_EN_GPIO_Port, V36CH5_8_EN_Pin, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002788:	4803      	ldr	r0, [pc, #12]	@ (8002798 <DevSystem_Init+0x38>)
 800278a:	f003 fbe7 	bl	8005f5c <HAL_GPIO_WritePin>
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40011800 	.word	0x40011800
 8002798:	40010800 	.word	0x40010800

0800279c <AppMainFunc>:

void AppMainFunc(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	71fb      	strb	r3, [r7, #7]

	if(WorkSta == DEVWORKSTART)
 80027a6:	4ba8      	ldr	r3, [pc, #672]	@ (8002a48 <AppMainFunc+0x2ac>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f040 8149 	bne.w	8002a42 <AppMainFunc+0x2a6>
	{
		if(UltraWorkTime < (StimuTime * 10))
 80027b0:	4ba6      	ldr	r3, [pc, #664]	@ (8002a4c <AppMainFunc+0x2b0>)
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4613      	mov	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4413      	add	r3, r2
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	461a      	mov	r2, r3
 80027c0:	4ba3      	ldr	r3, [pc, #652]	@ (8002a50 <AppMainFunc+0x2b4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d946      	bls.n	8002856 <AppMainFunc+0xba>
		{
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80027c8:	2300      	movs	r3, #0
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	e03f      	b.n	800284e <AppMainFunc+0xb2>
			{
				if((tag_i % 2) == 0)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11e      	bne.n	8002818 <AppMainFunc+0x7c>
				{
					HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	4a9d      	ldr	r2, [pc, #628]	@ (8002a54 <AppMainFunc+0x2b8>)
 80027de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	4a9c      	ldr	r2, [pc, #624]	@ (8002a58 <AppMainFunc+0x2bc>)
 80027e6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a9b      	ldr	r2, [pc, #620]	@ (8002a5c <AppMainFunc+0x2c0>)
 80027ee:	5cd3      	ldrb	r3, [r2, r3]
 80027f0:	461a      	mov	r2, r3
 80027f2:	f003 fbb3 	bl	8005f5c <HAL_GPIO_WritePin>
					if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 80027f6:	4b9a      	ldr	r3, [pc, #616]	@ (8002a60 <AppMainFunc+0x2c4>)
 80027f8:	8b5b      	ldrh	r3, [r3, #26]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d124      	bne.n	8002848 <AppMainFunc+0xac>
					{
						HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 80027fe:	79fb      	ldrb	r3, [r7, #7]
 8002800:	4a98      	ldr	r2, [pc, #608]	@ (8002a64 <AppMainFunc+0x2c8>)
 8002802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4a97      	ldr	r2, [pc, #604]	@ (8002a68 <AppMainFunc+0x2cc>)
 800280a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800280e:	2201      	movs	r2, #1
 8002810:	4619      	mov	r1, r3
 8002812:	f003 fba3 	bl	8005f5c <HAL_GPIO_WritePin>
 8002816:	e017      	b.n	8002848 <AppMainFunc+0xac>
					}
				}else
				{
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002818:	79fb      	ldrb	r3, [r7, #7]
 800281a:	4a92      	ldr	r2, [pc, #584]	@ (8002a64 <AppMainFunc+0x2c8>)
 800281c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	4a91      	ldr	r2, [pc, #580]	@ (8002a68 <AppMainFunc+0x2cc>)
 8002824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002828:	2200      	movs	r2, #0
 800282a:	4619      	mov	r1, r3
 800282c:	f003 fb96 	bl	8005f5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	4a88      	ldr	r2, [pc, #544]	@ (8002a54 <AppMainFunc+0x2b8>)
 8002834:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	4a87      	ldr	r2, [pc, #540]	@ (8002a58 <AppMainFunc+0x2bc>)
 800283c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	f003 fb8a 	bl	8005f5c <HAL_GPIO_WritePin>
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	3301      	adds	r3, #1
 800284c:	71fb      	strb	r3, [r7, #7]
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	2b07      	cmp	r3, #7
 8002852:	d9bc      	bls.n	80027ce <AppMainFunc+0x32>
 8002854:	e12a      	b.n	8002aac <AppMainFunc+0x310>
				}
			}
		}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 8002856:	4b7d      	ldr	r3, [pc, #500]	@ (8002a4c <AppMainFunc+0x2b0>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	461a      	mov	r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	461a      	mov	r2, r3
 8002866:	4b7a      	ldr	r3, [pc, #488]	@ (8002a50 <AppMainFunc+0x2b4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d833      	bhi.n	80028d6 <AppMainFunc+0x13a>
 800286e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a6c <AppMainFunc+0x2d0>)
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4b75      	ldr	r3, [pc, #468]	@ (8002a4c <AppMainFunc+0x2b0>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	441a      	add	r2, r3
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	461a      	mov	r2, r3
 8002882:	4b73      	ldr	r3, [pc, #460]	@ (8002a50 <AppMainFunc+0x2b4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d925      	bls.n	80028d6 <AppMainFunc+0x13a>
		{
			for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 800288a:	2300      	movs	r3, #0
 800288c:	71fb      	strb	r3, [r7, #7]
 800288e:	e01e      	b.n	80028ce <AppMainFunc+0x132>
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2], Motor_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 8002890:	79fb      	ldrb	r3, [r7, #7]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4a73      	ldr	r2, [pc, #460]	@ (8002a64 <AppMainFunc+0x2c8>)
 8002896:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800289a:	79fb      	ldrb	r3, [r7, #7]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4a72      	ldr	r2, [pc, #456]	@ (8002a68 <AppMainFunc+0x2cc>)
 80028a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a4:	2200      	movs	r2, #0
 80028a6:	4619      	mov	r1, r3
 80028a8:	f003 fb58 	bl	8005f5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2], Ultra_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 80028ac:	79fb      	ldrb	r3, [r7, #7]
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4a68      	ldr	r2, [pc, #416]	@ (8002a54 <AppMainFunc+0x2b8>)
 80028b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4a67      	ldr	r2, [pc, #412]	@ (8002a58 <AppMainFunc+0x2bc>)
 80028bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028c0:	2200      	movs	r2, #0
 80028c2:	4619      	mov	r1, r3
 80028c4:	f003 fb4a 	bl	8005f5c <HAL_GPIO_WritePin>
			for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 80028c8:	79fb      	ldrb	r3, [r7, #7]
 80028ca:	3301      	adds	r3, #1
 80028cc:	71fb      	strb	r3, [r7, #7]
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d9dd      	bls.n	8002890 <AppMainFunc+0xf4>
		}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 80028d4:	e0ea      	b.n	8002aac <AppMainFunc+0x310>
			}
		}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 80028d6:	4b65      	ldr	r3, [pc, #404]	@ (8002a6c <AppMainFunc+0x2d0>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	461a      	mov	r2, r3
 80028dc:	4b5b      	ldr	r3, [pc, #364]	@ (8002a4c <AppMainFunc+0x2b0>)
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	441a      	add	r2, r3
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b59      	ldr	r3, [pc, #356]	@ (8002a50 <AppMainFunc+0x2b4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d858      	bhi.n	80029a4 <AppMainFunc+0x208>
 80028f2:	4b56      	ldr	r3, [pc, #344]	@ (8002a4c <AppMainFunc+0x2b0>)
 80028f4:	881b      	ldrh	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	4613      	mov	r3, r2
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	1a9a      	subs	r2, r3, r2
 80028fe:	4b5b      	ldr	r3, [pc, #364]	@ (8002a6c <AppMainFunc+0x2d0>)
 8002900:	881b      	ldrh	r3, [r3, #0]
 8002902:	4619      	mov	r1, r3
 8002904:	460b      	mov	r3, r1
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	4413      	add	r3, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4b50      	ldr	r3, [pc, #320]	@ (8002a50 <AppMainFunc+0x2b4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d946      	bls.n	80029a4 <AppMainFunc+0x208>
		{
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002916:	2300      	movs	r3, #0
 8002918:	71fb      	strb	r3, [r7, #7]
 800291a:	e03f      	b.n	800299c <AppMainFunc+0x200>
			{
				if((tag_i % 2) == 1)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01e      	beq.n	8002966 <AppMainFunc+0x1ca>
				{
					HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a54 <AppMainFunc+0x2b8>)
 800292c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4a49      	ldr	r2, [pc, #292]	@ (8002a58 <AppMainFunc+0x2bc>)
 8002934:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	4a48      	ldr	r2, [pc, #288]	@ (8002a5c <AppMainFunc+0x2c0>)
 800293c:	5cd3      	ldrb	r3, [r2, r3]
 800293e:	461a      	mov	r2, r3
 8002940:	f003 fb0c 	bl	8005f5c <HAL_GPIO_WritePin>
					if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 8002944:	4b46      	ldr	r3, [pc, #280]	@ (8002a60 <AppMainFunc+0x2c4>)
 8002946:	8b5b      	ldrh	r3, [r3, #26]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d124      	bne.n	8002996 <AppMainFunc+0x1fa>
					{
						HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	4a45      	ldr	r2, [pc, #276]	@ (8002a64 <AppMainFunc+0x2c8>)
 8002950:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002954:	79fb      	ldrb	r3, [r7, #7]
 8002956:	4a44      	ldr	r2, [pc, #272]	@ (8002a68 <AppMainFunc+0x2cc>)
 8002958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800295c:	2201      	movs	r2, #1
 800295e:	4619      	mov	r1, r3
 8002960:	f003 fafc 	bl	8005f5c <HAL_GPIO_WritePin>
 8002964:	e017      	b.n	8002996 <AppMainFunc+0x1fa>
					}
				}else
				{
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	4a3e      	ldr	r2, [pc, #248]	@ (8002a64 <AppMainFunc+0x2c8>)
 800296a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4a3d      	ldr	r2, [pc, #244]	@ (8002a68 <AppMainFunc+0x2cc>)
 8002972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002976:	2200      	movs	r2, #0
 8002978:	4619      	mov	r1, r3
 800297a:	f003 faef 	bl	8005f5c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a34      	ldr	r2, [pc, #208]	@ (8002a54 <AppMainFunc+0x2b8>)
 8002982:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4a33      	ldr	r2, [pc, #204]	@ (8002a58 <AppMainFunc+0x2bc>)
 800298a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	f003 fae3 	bl	8005f5c <HAL_GPIO_WritePin>
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	3301      	adds	r3, #1
 800299a:	71fb      	strb	r3, [r7, #7]
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	2b07      	cmp	r3, #7
 80029a0:	d9bc      	bls.n	800291c <AppMainFunc+0x180>
		}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 80029a2:	e083      	b.n	8002aac <AppMainFunc+0x310>
				}
			}
		}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 80029a4:	4b29      	ldr	r3, [pc, #164]	@ (8002a4c <AppMainFunc+0x2b0>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9a      	subs	r2, r3, r2
 80029b0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a6c <AppMainFunc+0x2d0>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	460b      	mov	r3, r1
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	4413      	add	r3, r2
 80029be:	461a      	mov	r2, r3
 80029c0:	4b23      	ldr	r3, [pc, #140]	@ (8002a50 <AppMainFunc+0x2b4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d838      	bhi.n	8002a3a <AppMainFunc+0x29e>
 80029c8:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <AppMainFunc+0x2b0>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <AppMainFunc+0x2d0>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	441a      	add	r2, r3
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	461a      	mov	r2, r3
 80029de:	4b1c      	ldr	r3, [pc, #112]	@ (8002a50 <AppMainFunc+0x2b4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d929      	bls.n	8002a3a <AppMainFunc+0x29e>
		{
			for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	71fb      	strb	r3, [r7, #7]
 80029ea:	e022      	b.n	8002a32 <AppMainFunc+0x296>
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2 + 1], Motor_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	3301      	adds	r3, #1
 80029f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a64 <AppMainFunc+0x2c8>)
 80029f4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80029f8:	79fb      	ldrb	r3, [r7, #7]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	3301      	adds	r3, #1
 80029fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <AppMainFunc+0x2cc>)
 8002a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a04:	2200      	movs	r2, #0
 8002a06:	4619      	mov	r1, r3
 8002a08:	f003 faa8 	bl	8005f5c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2 + 1], Ultra_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 8002a0c:	79fb      	ldrb	r3, [r7, #7]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	3301      	adds	r3, #1
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <AppMainFunc+0x2b8>)
 8002a14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a58 <AppMainFunc+0x2bc>)
 8002a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a24:	2200      	movs	r2, #0
 8002a26:	4619      	mov	r1, r3
 8002a28:	f003 fa98 	bl	8005f5c <HAL_GPIO_WritePin>
			for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d9d9      	bls.n	80029ec <AppMainFunc+0x250>
		}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 8002a38:	e038      	b.n	8002aac <AppMainFunc+0x310>
			}
		}else
		{
			UltraWorkTime = 0;
 8002a3a:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <AppMainFunc+0x2b4>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e034      	b.n	8002aac <AppMainFunc+0x310>
		}

	}else
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	71fb      	strb	r3, [r7, #7]
 8002a46:	e02e      	b.n	8002aa6 <AppMainFunc+0x30a>
 8002a48:	200005d0 	.word	0x200005d0
 8002a4c:	2000000e 	.word	0x2000000e
 8002a50:	200005d4 	.word	0x200005d4
 8002a54:	20000014 	.word	0x20000014
 8002a58:	20000054 	.word	0x20000054
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	200005d8 	.word	0x200005d8
 8002a64:	20000034 	.word	0x20000034
 8002a68:	20000064 	.word	0x20000064
 8002a6c:	20000010 	.word	0x20000010
		{
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4a11      	ldr	r2, [pc, #68]	@ (8002ab8 <AppMainFunc+0x31c>)
 8002a74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a78:	79fb      	ldrb	r3, [r7, #7]
 8002a7a:	4a10      	ldr	r2, [pc, #64]	@ (8002abc <AppMainFunc+0x320>)
 8002a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a80:	2200      	movs	r2, #0
 8002a82:	4619      	mov	r1, r3
 8002a84:	f003 fa6a 	bl	8005f5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <AppMainFunc+0x324>)
 8002a8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac4 <AppMainFunc+0x328>)
 8002a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f003 fa5e 	bl	8005f5c <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	71fb      	strb	r3, [r7, #7]
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	2b07      	cmp	r3, #7
 8002aaa:	d9e1      	bls.n	8002a70 <AppMainFunc+0x2d4>
		}
	}

	UltraParamReload();
 8002aac:	f000 f80c 	bl	8002ac8 <UltraParamReload>
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	20000034 	.word	0x20000034
 8002abc:	20000064 	.word	0x20000064
 8002ac0:	20000014 	.word	0x20000014
 8002ac4:	20000054 	.word	0x20000054

08002ac8 <UltraParamReload>:

void UltraParamReload(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	if(ParamRefresh == 1)
 8002acc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <UltraParamReload+0x3c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d114      	bne.n	8002afe <UltraParamReload+0x36>
	{
		MotorEnableFlg = DevMotor_StaGet();
 8002ad4:	f001 fa76 	bl	8003fc4 <DevMotor_StaGet>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	461a      	mov	r2, r3
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <UltraParamReload+0x40>)
 8002ade:	701a      	strb	r2, [r3, #0]
		StimuTime = DevWork_StimuTimeGet();
 8002ae0:	f001 fa8a 	bl	8003ff8 <DevWork_StimuTimeGet>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b08      	ldr	r3, [pc, #32]	@ (8002b0c <UltraParamReload+0x44>)
 8002aea:	801a      	strh	r2, [r3, #0]
		IdleTime = DevWork_IdleTimeGet();
 8002aec:	f001 fa9e 	bl	800402c <DevWork_IdleTimeGet>
 8002af0:	4603      	mov	r3, r0
 8002af2:	461a      	mov	r2, r3
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <UltraParamReload+0x48>)
 8002af6:	801a      	strh	r2, [r3, #0]

		ParamRefresh = 0;
 8002af8:	4b02      	ldr	r3, [pc, #8]	@ (8002b04 <UltraParamReload+0x3c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
	}
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	200005d1 	.word	0x200005d1
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	2000000e 	.word	0x2000000e
 8002b10:	20000010 	.word	0x20000010

08002b14 <AD9833_Delay>:


static uint16_t UltraParam_Old[ULTRACHNUM] = {0};

static void AD9833_Delay(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	uint8_t i = 2;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	71fb      	strb	r3, [r7, #7]
	while(i--);
 8002b1e:	bf00      	nop
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	71fa      	strb	r2, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1fa      	bne.n	8002b20 <AD9833_Delay+0xc>
}
 8002b2a:	bf00      	nop
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <AD9833_FSYNCSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833FSYNC脚的电平信号
 */
static void AD9833_FSYNCSet(uint8_t ch,GPIO_PinState PinState)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	460a      	mov	r2, r1
 8002b42:	71fb      	strb	r3, [r7, #7]
 8002b44:	4613      	mov	r3, r2
 8002b46:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_FSYNC_PORT[ch], AD9833_FSYNC_GPIO[ch], PinState);
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <AD9833_FSYNCSet+0x30>)
 8002b4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b50:	79fb      	ldrb	r3, [r7, #7]
 8002b52:	4a06      	ldr	r2, [pc, #24]	@ (8002b6c <AD9833_FSYNCSet+0x34>)
 8002b54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b58:	79ba      	ldrb	r2, [r7, #6]
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f003 f9fe 	bl	8005f5c <HAL_GPIO_WritePin>
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200000a4 	.word	0x200000a4
 8002b6c:	20000074 	.word	0x20000074

08002b70 <AD9833_SCLKSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SCLK脚的电平信号
 */
static void AD9833_SCLKSet(uint8_t ch,GPIO_PinState PinState)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	460a      	mov	r2, r1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SCLK_PORT[ch], AD9833_SCLK_GPIO[ch], PinState);
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	4a07      	ldr	r2, [pc, #28]	@ (8002ba0 <AD9833_SCLKSet+0x30>)
 8002b84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	4a06      	ldr	r2, [pc, #24]	@ (8002ba4 <AD9833_SCLKSet+0x34>)
 8002b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b90:	79ba      	ldrb	r2, [r7, #6]
 8002b92:	4619      	mov	r1, r3
 8002b94:	f003 f9e2 	bl	8005f5c <HAL_GPIO_WritePin>
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	200000e4 	.word	0x200000e4
 8002ba4:	20000094 	.word	0x20000094

08002ba8 <AD9833_SDATASet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SDATA脚的电平信号
 */
static void AD9833_SDATASet(uint8_t ch,GPIO_PinState PinState)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	4603      	mov	r3, r0
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	71fb      	strb	r3, [r7, #7]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SDATA_PORT[ch], AD9833_SDATA_GPIO[ch], PinState);
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <AD9833_SDATASet+0x30>)
 8002bbc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a06      	ldr	r2, [pc, #24]	@ (8002bdc <AD9833_SDATASet+0x34>)
 8002bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bc8:	79ba      	ldrb	r2, [r7, #6]
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f003 f9c6 	bl	8005f5c <HAL_GPIO_WritePin>
}
 8002bd0:	bf00      	nop
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	200000c4 	.word	0x200000c4
 8002bdc:	20000084 	.word	0x20000084

08002be0 <AD9833_SendData>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendData(uint8_t ch,uint32_t txdata)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	6039      	str	r1, [r7, #0]
 8002bea:	71fb      	strb	r3, [r7, #7]
	uint8_t tag_i = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]

	/*发送指令之前AD9833的SCLK引脚使能，FSYNC引脚复位*/
	AD9833_SCLKSet(ch,SET);
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ffbb 	bl	8002b70 <AD9833_SCLKSet>
	AD9833_FSYNCSet(ch,SET);
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff ff9a 	bl	8002b38 <AD9833_FSYNCSet>
	AD9833_FSYNCSet(ch,RESET);
 8002c04:	79fb      	ldrb	r3, [r7, #7]
 8002c06:	2100      	movs	r1, #0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff95 	bl	8002b38 <AD9833_FSYNCSet>

	for(tag_i=0;tag_i<16;tag_i++){
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	e023      	b.n	8002c5c <AD9833_SendData+0x7c>
		if (txdata & 0x8000){
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d005      	beq.n	8002c2a <AD9833_SendData+0x4a>
			AD9833_SDATASet(ch,SET);
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ffc0 	bl	8002ba8 <AD9833_SDATASet>
 8002c28:	e004      	b.n	8002c34 <AD9833_SendData+0x54>
		}
		else{
			AD9833_SDATASet(ch,RESET);
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff ffba 	bl	8002ba8 <AD9833_SDATASet>
		}
		AD9833_Delay();
 8002c34:	f7ff ff6e 	bl	8002b14 <AD9833_Delay>
		AD9833_SCLKSet(ch,RESET);
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff97 	bl	8002b70 <AD9833_SCLKSet>
		AD9833_Delay();
 8002c42:	f7ff ff67 	bl	8002b14 <AD9833_Delay>
		AD9833_SCLKSet(ch,SET);
 8002c46:	79fb      	ldrb	r3, [r7, #7]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff ff90 	bl	8002b70 <AD9833_SCLKSet>
		txdata<<=1;
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	603b      	str	r3, [r7, #0]
	for(tag_i=0;tag_i<16;tag_i++){
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d9d8      	bls.n	8002c14 <AD9833_SendData+0x34>
	}
	AD9833_FSYNCSet(ch,SET);
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	2101      	movs	r1, #1
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ff66 	bl	8002b38 <AD9833_FSYNCSet>
}
 8002c6c:	bf00      	nop
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <AD9833_SendPhase>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendPhase(uint8_t ch,uint16_t reg, uint16_t val)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	71fb      	strb	r3, [r7, #7]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	80bb      	strh	r3, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	807b      	strh	r3, [r7, #2]
    uint16_t phase = reg;
 8002c86:	88bb      	ldrh	r3, [r7, #4]
 8002c88:	81fb      	strh	r3, [r7, #14]
    phase |= val;
 8002c8a:	89fa      	ldrh	r2, [r7, #14]
 8002c8c:	887b      	ldrh	r3, [r7, #2]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	81fb      	strh	r3, [r7, #14]
    AD9833_SendData(ch,phase);
 8002c92:	89fa      	ldrh	r2, [r7, #14]
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	4611      	mov	r1, r2
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ffa1 	bl	8002be0 <AD9833_SendData>
}
 8002c9e:	bf00      	nop
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <AD9833_SendWave>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送波形输出指令
 */
static void AD9833_SendWave(uint8_t ch,uint32_t WaveMode,uint32_t Freq_SFR,uint32_t Phase_SFR)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b086      	sub	sp, #24
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
    uint32_t val = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
    val = (val | WaveMode | Freq_SFR | Phase_SFR);
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	617b      	str	r3, [r7, #20]
    AD9833_SendData(ch,val);
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff86 	bl	8002be0 <AD9833_SendData>
}
 8002cd4:	bf00      	nop
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	0000      	movs	r0, r0
	...

08002ce0 <AD9833_SendFrequency>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendFrequency(uint8_t ch,unsigned short reg, double fout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	e9c7 2300 	strd	r2, r3, [r7]
 8002cea:	4603      	mov	r3, r0
 8002cec:	73fb      	strb	r3, [r7, #15]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	81bb      	strh	r3, [r7, #12]
	int frequence_LSB,frequence_MSB;
	double   frequence_mid,frequence_DATA;
	long int frequence_hex;
	//Fout = Fmclk / 2^28 * FREQREG
	frequence_mid=268435456/11.059;
 8002cf2:	a327      	add	r3, pc, #156	@ (adr r3, 8002d90 <AD9833_SendFrequency+0xb0>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	frequence_DATA=fout;
 8002cfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d00:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA/1000000;
 8002d04:	a324      	add	r3, pc, #144	@ (adr r3, 8002d98 <AD9833_SendFrequency+0xb8>)
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d0e:	f7fd fd71 	bl	80007f4 <__aeabi_ddiv>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA*frequence_mid;
 8002d1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002d1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d22:	f7fd fc3d 	bl	80005a0 <__aeabi_dmul>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_hex=frequence_DATA;
 8002d2e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d32:	f7fd fe47 	bl	80009c4 <__aeabi_d2iz>
 8002d36:	4603      	mov	r3, r0
 8002d38:	61fb      	str	r3, [r7, #28]
	frequence_LSB=frequence_hex;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	61bb      	str	r3, [r7, #24]
	frequence_LSB=frequence_LSB&0x3fff;
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d44:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_hex>>14;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	139b      	asrs	r3, r3, #14
 8002d4a:	617b      	str	r3, [r7, #20]
	frequence_MSB=frequence_MSB&0x3fff;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002d52:	617b      	str	r3, [r7, #20]
	frequence_LSB=frequence_LSB|reg;
 8002d54:	89bb      	ldrh	r3, [r7, #12]
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_MSB|reg;
 8002d5c:	89bb      	ldrh	r3, [r7, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
	AD9833_SendData(ch,0x2100);
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff ff38 	bl	8002be0 <AD9833_SendData>
	//设置频率是需要连续写入两次寄存器的值
    //第一次写入包含14个LSB
	//第二次写入包含14个MSB
	AD9833_SendData(ch,frequence_LSB);
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff32 	bl	8002be0 <AD9833_SendData>
	AD9833_SendData(ch,frequence_MSB);
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	7bfb      	ldrb	r3, [r7, #15]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff ff2c 	bl	8002be0 <AD9833_SendData>
}
 8002d88:	bf00      	nop
 8002d8a:	3730      	adds	r7, #48	@ 0x30
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	78ed98ce 	.word	0x78ed98ce
 8002d94:	41772608 	.word	0x41772608
 8002d98:	00000000 	.word	0x00000000
 8002d9c:	412e8480 	.word	0x412e8480

08002da0 <DevAD9833_Reset>:
 * @param   ch:超声驱动的通道号
 * @retval  none
 * @func	初始化AD9833
 */
static void DevAD9833_Reset(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	71fb      	strb	r3, [r7, #7]

	for(ch = 0; ch < AD9833_MaxCh;ch++)
 8002daa:	2300      	movs	r3, #0
 8002dac:	71fb      	strb	r3, [r7, #7]
 8002dae:	e011      	b.n	8002dd4 <DevAD9833_Reset+0x34>
	{
		AD9833_FSYNCSet(ch,GPIO_PIN_SET);
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	2101      	movs	r1, #1
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff febf 	bl	8002b38 <AD9833_FSYNCSet>
		AD9833_SCLKSet(ch,GPIO_PIN_SET);
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	2101      	movs	r1, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fed6 	bl	8002b70 <AD9833_SCLKSet>
		AD9833_SDATASet(ch,GPIO_PIN_SET);
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff feed 	bl	8002ba8 <AD9833_SDATASet>
	for(ch = 0; ch < AD9833_MaxCh;ch++)
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	71fb      	strb	r3, [r7, #7]
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	2b07      	cmp	r3, #7
 8002dd8:	d9ea      	bls.n	8002db0 <DevAD9833_Reset+0x10>
	}
}
 8002dda:	bf00      	nop
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <DevAD9833_SetPara>:
 * @param	WaveMode:波形类型
 * @retval  none
 * @func	向AD9833发送参数指令
 */
static void DevAD9833_SetPara(uint8_t ch,uint32_t Freq_SFR,double Freq,uint32_t Phase_SFR,uint32_t Phase,uint32_t WaveMode)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	e9c7 2300 	strd	r2, r3, [r7]
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
	unsigned int Fsel,Psel;
	//第一次设置数据时要先复位
	AD9833_SendData(ch,0x0100);
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fef0 	bl	8002be0 <AD9833_SendData>
	AD9833_SendData(ch,0x2100);
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff feea 	bl	8002be0 <AD9833_SendData>
	AD9833_SendFrequency(ch,Freq_SFR,Freq);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	b299      	uxth	r1, r3
 8002e10:	7bf8      	ldrb	r0, [r7, #15]
 8002e12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e16:	f7ff ff63 	bl	8002ce0 <AD9833_SendFrequency>
	AD9833_SendPhase(ch,Phase_SFR,Phase);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	b299      	uxth	r1, r3
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff25 	bl	8002c74 <AD9833_SendPhase>
	if(Freq_SFR == AD9833_REG_FREQ0)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e30:	d102      	bne.n	8002e38 <DevAD9833_SetPara+0x54>
	{
		Fsel = AD9833_FSEL0;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
 8002e36:	e002      	b.n	8002e3e <DevAD9833_SetPara+0x5a>
	}
	else
	{
		Fsel = AD9833_FSEL1;
 8002e38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e3c:	617b      	str	r3, [r7, #20]
	}
	if(Phase_SFR == AD9833_REG_PHASE0)
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002e44:	d102      	bne.n	8002e4c <DevAD9833_SetPara+0x68>
	{
		Psel = AD9833_PSEL0;
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e002      	b.n	8002e52 <DevAD9833_SetPara+0x6e>
	}
	else
	{
		Psel = AD9833_PSEL1;
 8002e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e50:	613b      	str	r3, [r7, #16]
	}
	AD9833_SendWave(ch,WaveMode,Fsel,Psel);
 8002e52:	7bf8      	ldrb	r0, [r7, #15]
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e5a:	f7ff ff24 	bl	8002ca6 <AD9833_SendWave>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <DevAD9833Set_Init>:

void DevAD9833Set_Init(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af04      	add	r7, sp, #16
	uint8_t tag_i = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	71fb      	strb	r3, [r7, #7]
	uint16_t ultra_param = 625;
 8002e72:	f240 2371 	movw	r3, #625	@ 0x271
 8002e76:	80bb      	strh	r3, [r7, #4]
	uint32_t freq = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	603b      	str	r3, [r7, #0]

	DevAD9833_Reset();
 8002e7c:	f7ff ff90 	bl	8002da0 <DevAD9833_Reset>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 8002e80:	4b37      	ldr	r3, [pc, #220]	@ (8002f60 <DevAD9833Set_Init+0xf8>)
 8002e82:	889b      	ldrh	r3, [r3, #4]
 8002e84:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d13d      	bne.n	8002f08 <DevAD9833Set_Init+0xa0>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 8002e8c:	4b34      	ldr	r3, [pc, #208]	@ (8002f60 <DevAD9833Set_Init+0xf8>)
 8002e8e:	88db      	ldrh	r3, [r3, #6]
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 8002e90:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d137      	bne.n	8002f08 <DevAD9833Set_Init+0xa0>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[2] == 0xffff))
 8002e98:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <DevAD9833Set_Init+0xf8>)
 8002e9a:	891b      	ldrh	r3, [r3, #8]
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 8002e9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d131      	bne.n	8002f08 <DevAD9833Set_Init+0xa0>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	e02a      	b.n	8002f00 <DevAD9833Set_Init+0x98>
		{
			freq = AD9833STEP * DevParamRead.UltraParam.Freq_Param[tag_i];
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4a2c      	ldr	r2, [pc, #176]	@ (8002f60 <DevAD9833Set_Init+0xf8>)
 8002eae:	3304      	adds	r3, #4
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	885b      	ldrh	r3, [r3, #2]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	79fa      	ldrb	r2, [r7, #7]
 8002ec6:	4926      	ldr	r1, [pc, #152]	@ (8002f60 <DevAD9833Set_Init+0xf8>)
 8002ec8:	3304      	adds	r3, #4
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	440b      	add	r3, r1
 8002ece:	8859      	ldrh	r1, [r3, #2]
 8002ed0:	4b24      	ldr	r3, [pc, #144]	@ (8002f64 <DevAD9833Set_Init+0xfc>)
 8002ed2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8002ed6:	6838      	ldr	r0, [r7, #0]
 8002ed8:	f7fd fae8 	bl	80004ac <__aeabi_ui2d>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	79f8      	ldrb	r0, [r7, #7]
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	9102      	str	r1, [sp, #8]
 8002ee6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002eea:	9101      	str	r1, [sp, #4]
 8002eec:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002ef0:	9100      	str	r1, [sp, #0]
 8002ef2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002ef6:	f7ff ff75 	bl	8002de4 <DevAD9833_SetPara>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	3301      	adds	r3, #1
 8002efe:	71fb      	strb	r3, [r7, #7]
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	2b07      	cmp	r3, #7
 8002f04:	d9d1      	bls.n	8002eaa <DevAD9833Set_Init+0x42>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 8002f06:	e026      	b.n	8002f56 <DevAD9833Set_Init+0xee>
		}
	}else
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002f08:	2300      	movs	r3, #0
 8002f0a:	71fb      	strb	r3, [r7, #7]
 8002f0c:	e01f      	b.n	8002f4e <DevAD9833Set_Init+0xe6>
		{
			freq = AD9833STEP * ultra_param;
 8002f0e:	88bb      	ldrh	r3, [r7, #4]
 8002f10:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002f14:	fb02 f303 	mul.w	r3, r2, r3
 8002f18:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = ultra_param;
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <DevAD9833Set_Init+0xfc>)
 8002f1e:	88ba      	ldrh	r2, [r7, #4]
 8002f20:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8002f24:	6838      	ldr	r0, [r7, #0]
 8002f26:	f7fd fac1 	bl	80004ac <__aeabi_ui2d>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	79f8      	ldrb	r0, [r7, #7]
 8002f30:	2102      	movs	r1, #2
 8002f32:	9102      	str	r1, [sp, #8]
 8002f34:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002f38:	9101      	str	r1, [sp, #4]
 8002f3a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002f3e:	9100      	str	r1, [sp, #0]
 8002f40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f44:	f7ff ff4e 	bl	8002de4 <DevAD9833_SetPara>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	71fb      	strb	r3, [r7, #7]
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	2b07      	cmp	r3, #7
 8002f52:	d9dc      	bls.n	8002f0e <DevAD9833Set_Init+0xa6>
		}
	}
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200005d8 	.word	0x200005d8
 8002f64:	20000618 	.word	0x20000618

08002f68 <DevAd9833Set_Main>:

void DevAd9833Set_Main(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af04      	add	r7, sp, #16
	uint8_t tag_i = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	71fb      	strb	r3, [r7, #7]
	uint32_t freq = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	603b      	str	r3, [r7, #0]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002f76:	2300      	movs	r3, #0
 8002f78:	71fb      	strb	r3, [r7, #7]
 8002f7a:	e036      	b.n	8002fea <DevAd9833Set_Main+0x82>
	{
		if(UltraParam_Old[tag_i] != DevParamRead.UltraParam.Freq_Param[tag_i])
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <DevAd9833Set_Main+0x94>)
 8002f80:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	491e      	ldr	r1, [pc, #120]	@ (8003000 <DevAd9833Set_Main+0x98>)
 8002f88:	3304      	adds	r3, #4
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	440b      	add	r3, r1
 8002f8e:	885b      	ldrh	r3, [r3, #2]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d027      	beq.n	8002fe4 <DevAd9833Set_Main+0x7c>
		{
			freq = DevParamRead.UltraParam.Freq_Param[tag_i] * AD9833STEP;
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	4a1a      	ldr	r2, [pc, #104]	@ (8003000 <DevAd9833Set_Main+0x98>)
 8002f98:	3304      	adds	r3, #4
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	4413      	add	r3, r2
 8002f9e:	885b      	ldrh	r3, [r3, #2]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002fa6:	fb02 f303 	mul.w	r3, r2, r3
 8002faa:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	79fa      	ldrb	r2, [r7, #7]
 8002fb0:	4913      	ldr	r1, [pc, #76]	@ (8003000 <DevAd9833Set_Main+0x98>)
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	440b      	add	r3, r1
 8002fb8:	8859      	ldrh	r1, [r3, #2]
 8002fba:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <DevAd9833Set_Main+0x94>)
 8002fbc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8002fc0:	6838      	ldr	r0, [r7, #0]
 8002fc2:	f7fd fa73 	bl	80004ac <__aeabi_ui2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	79f8      	ldrb	r0, [r7, #7]
 8002fcc:	2102      	movs	r1, #2
 8002fce:	9102      	str	r1, [sp, #8]
 8002fd0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002fd4:	9101      	str	r1, [sp, #4]
 8002fd6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002fda:	9100      	str	r1, [sp, #0]
 8002fdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002fe0:	f7ff ff00 	bl	8002de4 <DevAD9833_SetPara>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002fe4:	79fb      	ldrb	r3, [r7, #7]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	71fb      	strb	r3, [r7, #7]
 8002fea:	79fb      	ldrb	r3, [r7, #7]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d9c5      	bls.n	8002f7c <DevAd9833Set_Main+0x14>
		}else
		{
		}
	}
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3708      	adds	r7, #8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000618 	.word	0x20000618
 8003000:	200005d8 	.word	0x200005d8

08003004 <look1_iflf_binlxpw>:
float CoreTempture;

static float SampleVolFilter(float* buf,uint8_t len);

float look1_iflf_binlxpw(float u0, const float bp0[], const float table[], uint32_t maxIndex)
{
 8003004:	b590      	push	{r4, r7, lr}
 8003006:	b089      	sub	sp, #36	@ 0x24
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  float frac;
  uint32_t iRght;
  uint32_t iLeft;
  uint32_t bpIdx;

  if (u0 <= bp0[0U])
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4619      	mov	r1, r3
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7fe f801 	bl	8001020 <__aeabi_fcmple>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01a      	beq.n	800305a <look1_iflf_binlxpw+0x56>
  {
    iLeft = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4619      	mov	r1, r3
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f7fd fd44 	bl	8000abc <__aeabi_fsub>
 8003034:	4603      	mov	r3, r0
 8003036:	461c      	mov	r4, r3
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	3304      	adds	r3, #4
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4619      	mov	r1, r3
 8003044:	4610      	mov	r0, r2
 8003046:	f7fd fd39 	bl	8000abc <__aeabi_fsub>
 800304a:	4603      	mov	r3, r0
 800304c:	4619      	mov	r1, r3
 800304e:	4620      	mov	r0, r4
 8003050:	f7fd fef2 	bl	8000e38 <__aeabi_fdiv>
 8003054:	4603      	mov	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	e077      	b.n	800314a <look1_iflf_binlxpw+0x146>
  }
  else if (u0 < bp0[maxIndex])
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4413      	add	r3, r2
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4619      	mov	r1, r3
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7fd ffd0 	bl	800100c <__aeabi_fcmplt>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d043      	beq.n	80030fa <look1_iflf_binlxpw+0xf6>
  {
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	085b      	lsrs	r3, r3, #1
 8003076:	613b      	str	r3, [r7, #16]
    iLeft = 0U;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
    iRght = maxIndex;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U)
 8003080:	e015      	b.n	80030ae <look1_iflf_binlxpw+0xaa>
    {
      if (u0 < bp0[bpIdx])
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	4413      	add	r3, r2
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f7fd ffbc 	bl	800100c <__aeabi_fcmplt>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d002      	beq.n	80030a0 <look1_iflf_binlxpw+0x9c>
      {
        iRght = bpIdx;
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	e001      	b.n	80030a4 <look1_iflf_binlxpw+0xa0>
      }
      else
      {
        iLeft = bpIdx;
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	617b      	str	r3, [r7, #20]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	4413      	add	r3, r2
 80030aa:	085b      	lsrs	r3, r3, #1
 80030ac:	613b      	str	r3, [r7, #16]
    while (iRght - iLeft > 1U)
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d8e4      	bhi.n	8003082 <look1_iflf_binlxpw+0x7e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	68ba      	ldr	r2, [r7, #8]
 80030be:	4413      	add	r3, r2
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4619      	mov	r1, r3
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f7fd fcf9 	bl	8000abc <__aeabi_fsub>
 80030ca:	4603      	mov	r3, r0
 80030cc:	461c      	mov	r4, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	3301      	adds	r3, #1
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	4413      	add	r3, r2
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fce9 	bl	8000abc <__aeabi_fsub>
 80030ea:	4603      	mov	r3, r0
 80030ec:	4619      	mov	r1, r3
 80030ee:	4620      	mov	r0, r4
 80030f0:	f7fd fea2 	bl	8000e38 <__aeabi_fdiv>
 80030f4:	4603      	mov	r3, r0
 80030f6:	61fb      	str	r3, [r7, #28]
 80030f8:	e027      	b.n	800314a <look1_iflf_binlxpw+0x146>
  }
  else
  {
    iLeft = maxIndex - 1U;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	3b01      	subs	r3, #1
 80030fe:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003106:	3b01      	subs	r3, #1
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	4413      	add	r3, r2
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4619      	mov	r1, r3
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7fd fcd2 	bl	8000abc <__aeabi_fsub>
 8003118:	4603      	mov	r3, r0
 800311a:	461c      	mov	r4, r3
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4413      	add	r3, r2
 8003124:	6818      	ldr	r0, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800312c:	3b01      	subs	r3, #1
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	f7fd fcc0 	bl	8000abc <__aeabi_fsub>
 800313c:	4603      	mov	r3, r0
 800313e:	4619      	mov	r1, r3
 8003140:	4620      	mov	r0, r4
 8003142:	f7fd fe79 	bl	8000e38 <__aeabi_fdiv>
 8003146:	4603      	mov	r3, r0
 8003148:	61fb      	str	r3, [r7, #28]
  }

  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	3301      	adds	r3, #1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4619      	mov	r1, r3
 8003162:	f7fd fcab 	bl	8000abc <__aeabi_fsub>
 8003166:	4603      	mov	r3, r0
 8003168:	69f9      	ldr	r1, [r7, #28]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fdb0 	bl	8000cd0 <__aeabi_fmul>
 8003170:	4603      	mov	r3, r0
 8003172:	4618      	mov	r0, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fc9e 	bl	8000ac0 <__addsf3>
 8003184:	4603      	mov	r3, r0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	@ 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd90      	pop	{r4, r7, pc}
	...

08003190 <DevADC1Func_Init>:

void DevADC1Func_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(DEV_ADC);
 8003194:	4804      	ldr	r0, [pc, #16]	@ (80031a8 <DevADC1Func_Init+0x18>)
 8003196:	f001 fba3 	bl	80048e0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(DEV_ADC, (uint32_t *)&ADC1SampleVal, DEV_LEN);
 800319a:	2204      	movs	r2, #4
 800319c:	4903      	ldr	r1, [pc, #12]	@ (80031ac <DevADC1Func_Init+0x1c>)
 800319e:	4802      	ldr	r0, [pc, #8]	@ (80031a8 <DevADC1Func_Init+0x18>)
 80031a0:	f001 f8aa 	bl	80042f8 <HAL_ADC_Start_DMA>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	20000174 	.word	0x20000174
 80031ac:	200006a0 	.word	0x200006a0

080031b0 <DevADC1Func_Main>:



void DevADC1Func_Main(void)
{
 80031b0:	b5b0      	push	{r4, r5, r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
	float gain = 1.0f;
 80031b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80031ba:	617b      	str	r3, [r7, #20]
	float TemptureVol,CurrentFrontVol,CurrentAfterVol,CoreVol_Temp,TemptureRes;
	static uint8_t sCount = 0;

	if(__HAL_DMA_GET_FLAG(&hadc1,ADC_DMA_CH) == SET)
 80031bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003440 <DevADC1Func_Main+0x290>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4ba0      	ldr	r3, [pc, #640]	@ (8003444 <DevADC1Func_Main+0x294>)
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d909      	bls.n	80031dc <DevADC1Func_Main+0x2c>
 80031c8:	4b9f      	ldr	r3, [pc, #636]	@ (8003448 <DevADC1Func_Main+0x298>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e008      	b.n	80031ee <DevADC1Func_Main+0x3e>
 80031dc:	4b9b      	ldr	r3, [pc, #620]	@ (800344c <DevADC1Func_Main+0x29c>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d011      	beq.n	8003216 <DevADC1Func_Main+0x66>
	{
	   __HAL_DMA_CLEAR_FLAG(DEV_ADC,ADC_DMA_CH);
 80031f2:	4b93      	ldr	r3, [pc, #588]	@ (8003440 <DevADC1Func_Main+0x290>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b92      	ldr	r3, [pc, #584]	@ (8003444 <DevADC1Func_Main+0x294>)
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d903      	bls.n	8003206 <DevADC1Func_Main+0x56>
 80031fe:	4b92      	ldr	r3, [pc, #584]	@ (8003448 <DevADC1Func_Main+0x298>)
 8003200:	2202      	movs	r2, #2
 8003202:	605a      	str	r2, [r3, #4]
 8003204:	e002      	b.n	800320c <DevADC1Func_Main+0x5c>
 8003206:	4b91      	ldr	r3, [pc, #580]	@ (800344c <DevADC1Func_Main+0x29c>)
 8003208:	2202      	movs	r2, #2
 800320a:	605a      	str	r2, [r3, #4]
	   HAL_ADC_Start_DMA(DEV_ADC, (uint32_t *)&ADC1SampleVal, DEV_LEN);
 800320c:	2204      	movs	r2, #4
 800320e:	4990      	ldr	r1, [pc, #576]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 8003210:	488b      	ldr	r0, [pc, #556]	@ (8003440 <DevADC1Func_Main+0x290>)
 8003212:	f001 f871 	bl	80042f8 <HAL_ADC_Start_DMA>
	}

	gain = ADC1SampleVal[4] * 3.3 / 4096 / 1.2;
 8003216:	4b8e      	ldr	r3, [pc, #568]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 8003218:	891b      	ldrh	r3, [r3, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f7fd f956 	bl	80004cc <__aeabi_i2d>
 8003220:	a385      	add	r3, pc, #532	@ (adr r3, 8003438 <DevADC1Func_Main+0x288>)
 8003222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003226:	f7fd f9bb 	bl	80005a0 <__aeabi_dmul>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4610      	mov	r0, r2
 8003230:	4619      	mov	r1, r3
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	4b87      	ldr	r3, [pc, #540]	@ (8003454 <DevADC1Func_Main+0x2a4>)
 8003238:	f7fd fadc 	bl	80007f4 <__aeabi_ddiv>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 8003248:	4b83      	ldr	r3, [pc, #524]	@ (8003458 <DevADC1Func_Main+0x2a8>)
 800324a:	f7fd fad3 	bl	80007f4 <__aeabi_ddiv>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4610      	mov	r0, r2
 8003254:	4619      	mov	r1, r3
 8003256:	f7fd fbdd 	bl	8000a14 <__aeabi_d2f>
 800325a:	4603      	mov	r3, r0
 800325c:	617b      	str	r3, [r7, #20]
	TemptureVol_Temp[sCount] = (float)ADC1SampleVal[0] * 3.3f / 4096.0f * gain;
 800325e:	4b7c      	ldr	r3, [pc, #496]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd fcdc 	bl	8000c20 <__aeabi_ui2f>
 8003268:	4603      	mov	r3, r0
 800326a:	497c      	ldr	r1, [pc, #496]	@ (800345c <DevADC1Func_Main+0x2ac>)
 800326c:	4618      	mov	r0, r3
 800326e:	f7fd fd2f 	bl	8000cd0 <__aeabi_fmul>
 8003272:	4603      	mov	r3, r0
 8003274:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd fddd 	bl	8000e38 <__aeabi_fdiv>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	4b77      	ldr	r3, [pc, #476]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	461c      	mov	r4, r3
 8003288:	6979      	ldr	r1, [r7, #20]
 800328a:	4610      	mov	r0, r2
 800328c:	f7fd fd20 	bl	8000cd0 <__aeabi_fmul>
 8003290:	4603      	mov	r3, r0
 8003292:	461a      	mov	r2, r3
 8003294:	4b73      	ldr	r3, [pc, #460]	@ (8003464 <DevADC1Func_Main+0x2b4>)
 8003296:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentFrontVol_Temp[sCount] = (float)ADC1SampleVal[1] * 3.3f / 4096.0f * gain;
 800329a:	4b6d      	ldr	r3, [pc, #436]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 800329c:	885b      	ldrh	r3, [r3, #2]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd fcbe 	bl	8000c20 <__aeabi_ui2f>
 80032a4:	4603      	mov	r3, r0
 80032a6:	496d      	ldr	r1, [pc, #436]	@ (800345c <DevADC1Func_Main+0x2ac>)
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fd fd11 	bl	8000cd0 <__aeabi_fmul>
 80032ae:	4603      	mov	r3, r0
 80032b0:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd fdbf 	bl	8000e38 <__aeabi_fdiv>
 80032ba:	4603      	mov	r3, r0
 80032bc:	461a      	mov	r2, r3
 80032be:	4b68      	ldr	r3, [pc, #416]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	461c      	mov	r4, r3
 80032c4:	6979      	ldr	r1, [r7, #20]
 80032c6:	4610      	mov	r0, r2
 80032c8:	f7fd fd02 	bl	8000cd0 <__aeabi_fmul>
 80032cc:	4603      	mov	r3, r0
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b65      	ldr	r3, [pc, #404]	@ (8003468 <DevADC1Func_Main+0x2b8>)
 80032d2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentAfterVol_Temp[sCount] = (float)ADC1SampleVal[2] * 3.3f / 4096.0f * gain;
 80032d6:	4b5e      	ldr	r3, [pc, #376]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 80032d8:	889b      	ldrh	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd fca0 	bl	8000c20 <__aeabi_ui2f>
 80032e0:	4603      	mov	r3, r0
 80032e2:	495e      	ldr	r1, [pc, #376]	@ (800345c <DevADC1Func_Main+0x2ac>)
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd fcf3 	bl	8000cd0 <__aeabi_fmul>
 80032ea:	4603      	mov	r3, r0
 80032ec:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd fda1 	bl	8000e38 <__aeabi_fdiv>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b59      	ldr	r3, [pc, #356]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461c      	mov	r4, r3
 8003300:	6979      	ldr	r1, [r7, #20]
 8003302:	4610      	mov	r0, r2
 8003304:	f7fd fce4 	bl	8000cd0 <__aeabi_fmul>
 8003308:	4603      	mov	r3, r0
 800330a:	461a      	mov	r2, r3
 800330c:	4b57      	ldr	r3, [pc, #348]	@ (800346c <DevADC1Func_Main+0x2bc>)
 800330e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CoreVol_Temp =  (float)ADC1SampleVal[3] * 3300.0f / 4096.0f * gain;
 8003312:	4b4f      	ldr	r3, [pc, #316]	@ (8003450 <DevADC1Func_Main+0x2a0>)
 8003314:	88db      	ldrh	r3, [r3, #6]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd fc82 	bl	8000c20 <__aeabi_ui2f>
 800331c:	4603      	mov	r3, r0
 800331e:	4954      	ldr	r1, [pc, #336]	@ (8003470 <DevADC1Func_Main+0x2c0>)
 8003320:	4618      	mov	r0, r3
 8003322:	f7fd fcd5 	bl	8000cd0 <__aeabi_fmul>
 8003326:	4603      	mov	r3, r0
 8003328:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800332c:	4618      	mov	r0, r3
 800332e:	f7fd fd83 	bl	8000e38 <__aeabi_fdiv>
 8003332:	4603      	mov	r3, r0
 8003334:	4619      	mov	r1, r3
 8003336:	6978      	ldr	r0, [r7, #20]
 8003338:	f7fd fcca 	bl	8000cd0 <__aeabi_fmul>
 800333c:	4603      	mov	r3, r0
 800333e:	613b      	str	r3, [r7, #16]

	sCount++;
 8003340:	4b47      	ldr	r3, [pc, #284]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	b2da      	uxtb	r2, r3
 8003348:	4b45      	ldr	r3, [pc, #276]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 800334a:	701a      	strb	r2, [r3, #0]
	if(sCount >= 15)
 800334c:	4b44      	ldr	r3, [pc, #272]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b0e      	cmp	r3, #14
 8003352:	d902      	bls.n	800335a <DevADC1Func_Main+0x1aa>
	{
		sCount = 0;
 8003354:	4b42      	ldr	r3, [pc, #264]	@ (8003460 <DevADC1Func_Main+0x2b0>)
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
	}

	TemptureVol = SampleVolFilter(TemptureVol_Temp,FILTERNUM);
 800335a:	210f      	movs	r1, #15
 800335c:	4841      	ldr	r0, [pc, #260]	@ (8003464 <DevADC1Func_Main+0x2b4>)
 800335e:	f000 f8a3 	bl	80034a8 <SampleVolFilter>
 8003362:	60f8      	str	r0, [r7, #12]
	CurrentFrontVol = SampleVolFilter(CurrentFrontVol_Temp,FILTERNUM);
 8003364:	210f      	movs	r1, #15
 8003366:	4840      	ldr	r0, [pc, #256]	@ (8003468 <DevADC1Func_Main+0x2b8>)
 8003368:	f000 f89e 	bl	80034a8 <SampleVolFilter>
 800336c:	60b8      	str	r0, [r7, #8]
	CurrentAfterVol = SampleVolFilter(CurrentAfterVol_Temp,FILTERNUM);
 800336e:	210f      	movs	r1, #15
 8003370:	483e      	ldr	r0, [pc, #248]	@ (800346c <DevADC1Func_Main+0x2bc>)
 8003372:	f000 f899 	bl	80034a8 <SampleVolFilter>
 8003376:	6078      	str	r0, [r7, #4]
	TemptureRes = (10000.0f * TemptureVol)/(3.3 - TemptureVol);
 8003378:	493e      	ldr	r1, [pc, #248]	@ (8003474 <DevADC1Func_Main+0x2c4>)
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7fd fca8 	bl	8000cd0 <__aeabi_fmul>
 8003380:	4603      	mov	r3, r0
 8003382:	4618      	mov	r0, r3
 8003384:	f7fd f8b4 	bl	80004f0 <__aeabi_f2d>
 8003388:	4604      	mov	r4, r0
 800338a:	460d      	mov	r5, r1
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7fd f8af 	bl	80004f0 <__aeabi_f2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	a128      	add	r1, pc, #160	@ (adr r1, 8003438 <DevADC1Func_Main+0x288>)
 8003398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800339c:	f7fc ff48 	bl	8000230 <__aeabi_dsub>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	4620      	mov	r0, r4
 80033a6:	4629      	mov	r1, r5
 80033a8:	f7fd fa24 	bl	80007f4 <__aeabi_ddiv>
 80033ac:	4602      	mov	r2, r0
 80033ae:	460b      	mov	r3, r1
 80033b0:	4610      	mov	r0, r2
 80033b2:	4619      	mov	r1, r3
 80033b4:	f7fd fb2e 	bl	8000a14 <__aeabi_d2f>
 80033b8:	4603      	mov	r3, r0
 80033ba:	603b      	str	r3, [r7, #0]

	SampleTemp = look1_iflf_binlxpw(TemptureRes,INP_HWTemp_R,OUT_HWTemp_T,TEMPTURENUM);
 80033bc:	23a1      	movs	r3, #161	@ 0xa1
 80033be:	4a2e      	ldr	r2, [pc, #184]	@ (8003478 <DevADC1Func_Main+0x2c8>)
 80033c0:	492e      	ldr	r1, [pc, #184]	@ (800347c <DevADC1Func_Main+0x2cc>)
 80033c2:	6838      	ldr	r0, [r7, #0]
 80033c4:	f7ff fe1e 	bl	8003004 <look1_iflf_binlxpw>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003480 <DevADC1Func_Main+0x2d0>)
 80033cc:	6013      	str	r3, [r2, #0]
	CurrentFront = CurrentFrontVol * 50.0f * 100.0f;
 80033ce:	492d      	ldr	r1, [pc, #180]	@ (8003484 <DevADC1Func_Main+0x2d4>)
 80033d0:	68b8      	ldr	r0, [r7, #8]
 80033d2:	f7fd fc7d 	bl	8000cd0 <__aeabi_fmul>
 80033d6:	4603      	mov	r3, r0
 80033d8:	492b      	ldr	r1, [pc, #172]	@ (8003488 <DevADC1Func_Main+0x2d8>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fc78 	bl	8000cd0 <__aeabi_fmul>
 80033e0:	4603      	mov	r3, r0
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b29      	ldr	r3, [pc, #164]	@ (800348c <DevADC1Func_Main+0x2dc>)
 80033e6:	601a      	str	r2, [r3, #0]
	CurrentAfter = CurrentAfterVol / 4.7f * 50.0f * 100.0f;
 80033e8:	4929      	ldr	r1, [pc, #164]	@ (8003490 <DevADC1Func_Main+0x2e0>)
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7fd fd24 	bl	8000e38 <__aeabi_fdiv>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4924      	ldr	r1, [pc, #144]	@ (8003484 <DevADC1Func_Main+0x2d4>)
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fd fc6b 	bl	8000cd0 <__aeabi_fmul>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4922      	ldr	r1, [pc, #136]	@ (8003488 <DevADC1Func_Main+0x2d8>)
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fc66 	bl	8000cd0 <__aeabi_fmul>
 8003404:	4603      	mov	r3, r0
 8003406:	461a      	mov	r2, r3
 8003408:	4b22      	ldr	r3, [pc, #136]	@ (8003494 <DevADC1Func_Main+0x2e4>)
 800340a:	601a      	str	r2, [r3, #0]
	CoreTempture = (CoreVol_Temp - 1350) * 4.3f + 25.0f;
 800340c:	4922      	ldr	r1, [pc, #136]	@ (8003498 <DevADC1Func_Main+0x2e8>)
 800340e:	6938      	ldr	r0, [r7, #16]
 8003410:	f7fd fb54 	bl	8000abc <__aeabi_fsub>
 8003414:	4603      	mov	r3, r0
 8003416:	4921      	ldr	r1, [pc, #132]	@ (800349c <DevADC1Func_Main+0x2ec>)
 8003418:	4618      	mov	r0, r3
 800341a:	f7fd fc59 	bl	8000cd0 <__aeabi_fmul>
 800341e:	4603      	mov	r3, r0
 8003420:	491f      	ldr	r1, [pc, #124]	@ (80034a0 <DevADC1Func_Main+0x2f0>)
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fb4c 	bl	8000ac0 <__addsf3>
 8003428:	4603      	mov	r3, r0
 800342a:	461a      	mov	r2, r3
 800342c:	4b1d      	ldr	r3, [pc, #116]	@ (80034a4 <DevADC1Func_Main+0x2f4>)
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bdb0      	pop	{r4, r5, r7, pc}
 8003438:	66666666 	.word	0x66666666
 800343c:	400a6666 	.word	0x400a6666
 8003440:	20000174 	.word	0x20000174
 8003444:	40020080 	.word	0x40020080
 8003448:	40020400 	.word	0x40020400
 800344c:	40020000 	.word	0x40020000
 8003450:	200006a0 	.word	0x200006a0
 8003454:	40b00000 	.word	0x40b00000
 8003458:	3ff33333 	.word	0x3ff33333
 800345c:	40533333 	.word	0x40533333
 8003460:	200006b8 	.word	0x200006b8
 8003464:	20000104 	.word	0x20000104
 8003468:	20000628 	.word	0x20000628
 800346c:	20000664 	.word	0x20000664
 8003470:	454e4000 	.word	0x454e4000
 8003474:	461c4000 	.word	0x461c4000
 8003478:	08008cb4 	.word	0x08008cb4
 800347c:	08008a30 	.word	0x08008a30
 8003480:	200006a8 	.word	0x200006a8
 8003484:	42480000 	.word	0x42480000
 8003488:	42c80000 	.word	0x42c80000
 800348c:	200006ac 	.word	0x200006ac
 8003490:	40966666 	.word	0x40966666
 8003494:	200006b0 	.word	0x200006b0
 8003498:	44a8c000 	.word	0x44a8c000
 800349c:	4089999a 	.word	0x4089999a
 80034a0:	41c80000 	.word	0x41c80000
 80034a4:	200006b4 	.word	0x200006b4

080034a8 <SampleVolFilter>:

static float SampleVolFilter(float* buf,uint8_t len)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
	float vol,vol_sum;
	float vol_temp;
	uint8_t tag_i = 0,tag_j = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	74fb      	strb	r3, [r7, #19]
 80034b8:	2300      	movs	r3, #0
 80034ba:	74bb      	strb	r3, [r7, #18]

	for(tag_i = 0;tag_i < (len - 1);tag_i++)
 80034bc:	2300      	movs	r3, #0
 80034be:	74fb      	strb	r3, [r7, #19]
 80034c0:	e038      	b.n	8003534 <SampleVolFilter+0x8c>
	{
		for(tag_j = 0;tag_j < (len - tag_i - 1);tag_j++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	74bb      	strb	r3, [r7, #18]
 80034c6:	e02b      	b.n	8003520 <SampleVolFilter+0x78>
		{
			if(buf[tag_j] > buf[tag_j+1])
 80034c8:	7cbb      	ldrb	r3, [r7, #18]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	7cbb      	ldrb	r3, [r7, #18]
 80034d4:	3301      	adds	r3, #1
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	4413      	add	r3, r2
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fdb2 	bl	8001048 <__aeabi_fcmpgt>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d017      	beq.n	800351a <SampleVolFilter+0x72>
			{
				vol_temp = buf[tag_j];
 80034ea:	7cbb      	ldrb	r3, [r7, #18]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60bb      	str	r3, [r7, #8]
				buf[tag_j] = buf[tag_j+1];
 80034f6:	7cbb      	ldrb	r3, [r7, #18]
 80034f8:	3301      	adds	r3, #1
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	441a      	add	r2, r3
 8003500:	7cbb      	ldrb	r3, [r7, #18]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	440b      	add	r3, r1
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	601a      	str	r2, [r3, #0]
				buf[tag_j+1] = vol_temp;
 800350c:	7cbb      	ldrb	r3, [r7, #18]
 800350e:	3301      	adds	r3, #1
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	601a      	str	r2, [r3, #0]
		for(tag_j = 0;tag_j < (len - tag_i - 1);tag_j++)
 800351a:	7cbb      	ldrb	r3, [r7, #18]
 800351c:	3301      	adds	r3, #1
 800351e:	74bb      	strb	r3, [r7, #18]
 8003520:	7cba      	ldrb	r2, [r7, #18]
 8003522:	78f9      	ldrb	r1, [r7, #3]
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	429a      	cmp	r2, r3
 800352c:	dbcc      	blt.n	80034c8 <SampleVolFilter+0x20>
	for(tag_i = 0;tag_i < (len - 1);tag_i++)
 800352e:	7cfb      	ldrb	r3, [r7, #19]
 8003530:	3301      	adds	r3, #1
 8003532:	74fb      	strb	r3, [r7, #19]
 8003534:	7cfa      	ldrb	r2, [r7, #19]
 8003536:	78fb      	ldrb	r3, [r7, #3]
 8003538:	3b01      	subs	r3, #1
 800353a:	429a      	cmp	r2, r3
 800353c:	dbc1      	blt.n	80034c2 <SampleVolFilter+0x1a>
			}
		}
	}

	for(tag_i = 0;tag_i < len-2;tag_i++)
 800353e:	2300      	movs	r3, #0
 8003540:	74fb      	strb	r3, [r7, #19]
 8003542:	e00e      	b.n	8003562 <SampleVolFilter+0xba>
	{
		vol_sum += buf[tag_i+1];
 8003544:	7cfb      	ldrb	r3, [r7, #19]
 8003546:	3301      	adds	r3, #1
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4619      	mov	r1, r3
 8003552:	6978      	ldr	r0, [r7, #20]
 8003554:	f7fd fab4 	bl	8000ac0 <__addsf3>
 8003558:	4603      	mov	r3, r0
 800355a:	617b      	str	r3, [r7, #20]
	for(tag_i = 0;tag_i < len-2;tag_i++)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	3301      	adds	r3, #1
 8003560:	74fb      	strb	r3, [r7, #19]
 8003562:	7cfa      	ldrb	r2, [r7, #19]
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	3b02      	subs	r3, #2
 8003568:	429a      	cmp	r2, r3
 800356a:	dbeb      	blt.n	8003544 <SampleVolFilter+0x9c>
	}
	vol = (uint16_t)(vol_sum/(len-2));
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	3b02      	subs	r3, #2
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fb59 	bl	8000c28 <__aeabi_i2f>
 8003576:	4603      	mov	r3, r0
 8003578:	4619      	mov	r1, r3
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7fd fc5c 	bl	8000e38 <__aeabi_fdiv>
 8003580:	4603      	mov	r3, r0
 8003582:	4618      	mov	r0, r3
 8003584:	f7fd fd6a 	bl	800105c <__aeabi_f2uiz>
 8003588:	4603      	mov	r3, r0
 800358a:	b29b      	uxth	r3, r3
 800358c:	4618      	mov	r0, r3
 800358e:	f7fd fb47 	bl	8000c20 <__aeabi_ui2f>
 8003592:	4603      	mov	r3, r0
 8003594:	60fb      	str	r3, [r7, #12]

	return vol;
 8003596:	68fb      	ldr	r3, [r7, #12]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DevFlash_Write>:
static uint32_t FlashOffset = 0;

extern Device_Param DevParamRead;

HAL_StatusTypeDef DevFlash_Write(uint32_t addr,uint16_t *buff,uint8_t len)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	77fb      	strb	r3, [r7, #31]
	uint8_t tag_i= 0;
 80035b2:	2300      	movs	r3, #0
 80035b4:	77bb      	strb	r3, [r7, #30]
	uint16_t writedata = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	82fb      	strh	r3, [r7, #22]
	uint32_t writeaddr = addr;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 80035be:	f002 f85d 	bl	800567c <HAL_FLASH_Unlock>

	for(tag_i = 0;tag_i < len;tag_i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	77bb      	strb	r3, [r7, #30]
 80035c6:	e01e      	b.n	8003606 <DevFlash_Write+0x66>
	{
		writedata = buff[tag_i];
 80035c8:	7fbb      	ldrb	r3, [r7, #30]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	68ba      	ldr	r2, [r7, #8]
 80035ce:	4413      	add	r3, r2
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	82fb      	strh	r3, [r7, #22]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, writeaddr, (uint64_t)writedata);
 80035d4:	8afb      	ldrh	r3, [r7, #22]
 80035d6:	2200      	movs	r2, #0
 80035d8:	461c      	mov	r4, r3
 80035da:	4615      	mov	r5, r2
 80035dc:	4622      	mov	r2, r4
 80035de:	462b      	mov	r3, r5
 80035e0:	69b9      	ldr	r1, [r7, #24]
 80035e2:	2001      	movs	r0, #1
 80035e4:	f001 ffbc 	bl	8005560 <HAL_FLASH_Program>
 80035e8:	4603      	mov	r3, r0
 80035ea:	77fb      	strb	r3, [r7, #31]
		if(status != HAL_OK)
 80035ec:	7ffb      	ldrb	r3, [r7, #31]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <DevFlash_Write+0x5a>
		{
			HAL_FLASH_Lock();
 80035f2:	f002 f87d 	bl	80056f0 <HAL_FLASH_Lock>
			return status;
 80035f6:	7ffb      	ldrb	r3, [r7, #31]
 80035f8:	e00c      	b.n	8003614 <DevFlash_Write+0x74>
		}else
		{
			writeaddr += 2;
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	3302      	adds	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003600:	7fbb      	ldrb	r3, [r7, #30]
 8003602:	3301      	adds	r3, #1
 8003604:	77bb      	strb	r3, [r7, #30]
 8003606:	7fba      	ldrb	r2, [r7, #30]
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	429a      	cmp	r2, r3
 800360c:	d3dc      	bcc.n	80035c8 <DevFlash_Write+0x28>
		}
	}
	HAL_FLASH_Lock();
 800360e:	f002 f86f 	bl	80056f0 <HAL_FLASH_Lock>

	return status;
 8003612:	7ffb      	ldrb	r3, [r7, #31]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bdb0      	pop	{r4, r5, r7, pc}

0800361c <DevFlash_Read>:

void DevFlash_Read(uint32_t addr,uint16_t* buff,uint16_t len)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
	uint8_t tag_i = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	75fb      	strb	r3, [r7, #23]
	uint32_t readaddr = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8003632:	f002 f823 	bl	800567c <HAL_FLASH_Unlock>

	readaddr = addr;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 800363a:	2300      	movs	r3, #0
 800363c:	75fb      	strb	r3, [r7, #23]
 800363e:	e00d      	b.n	800365c <DevFlash_Read+0x40>
	{
		*(buff + tag_i) = *(volatile uint32_t *)readaddr;
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6819      	ldr	r1, [r3, #0]
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4413      	add	r3, r2
 800364c:	b28a      	uxth	r2, r1
 800364e:	801a      	strh	r2, [r3, #0]
		readaddr += 2;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3302      	adds	r3, #2
 8003654:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	3301      	adds	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
 800365c:	7dfb      	ldrb	r3, [r7, #23]
 800365e:	b29b      	uxth	r3, r3
 8003660:	88fa      	ldrh	r2, [r7, #6]
 8003662:	429a      	cmp	r2, r3
 8003664:	d8ec      	bhi.n	8003640 <DevFlash_Read+0x24>
	}

	HAL_FLASH_Lock();
 8003666:	f002 f843 	bl	80056f0 <HAL_FLASH_Lock>
}
 800366a:	bf00      	nop
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <DevParam_Init>:

void DevParam_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
	uint32_t read_addr = FLASH_SLAVE_ULTRAPARAM;
 800367a:	4b1e      	ldr	r3, [pc, #120]	@ (80036f4 <DevParam_Init+0x80>)
 800367c:	607b      	str	r3, [r7, #4]

	while(read_addr < (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 800367e:	e030      	b.n	80036e2 <DevParam_Init+0x6e>
	{
		DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003680:	2220      	movs	r2, #32
 8003682:	491d      	ldr	r1, [pc, #116]	@ (80036f8 <DevParam_Init+0x84>)
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff ffc9 	bl	800361c <DevFlash_Read>
		if(DevParamRead.UltraParam.WriteCount != 0xFFFFFFFF)
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <DevParam_Init+0x84>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003692:	d00c      	beq.n	80036ae <DevParam_Init+0x3a>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <DevParam_Init+0x88>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3340      	adds	r3, #64	@ 0x40
 800369a:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <DevParam_Init+0x88>)
 800369c:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 800369e:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <DevParam_Init+0x88>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80036a6:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 80036aa:	607b      	str	r3, [r7, #4]
 80036ac:	e019      	b.n	80036e2 <DevParam_Init+0x6e>
		}else
		{
			if(read_addr == FLASH_SLAVE_ULTRAPARAM)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a10      	ldr	r2, [pc, #64]	@ (80036f4 <DevParam_Init+0x80>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d103      	bne.n	80036be <DevParam_Init+0x4a>
			{
				DevParamRead.UltraParam.WriteCount = 0;
 80036b6:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <DevParam_Init+0x84>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
				break;
 80036bc:	e016      	b.n	80036ec <DevParam_Init+0x78>
			}
			FlashOffset -= (ULTRAPARAMSIZE * 2);
 80036be:	4b0f      	ldr	r3, [pc, #60]	@ (80036fc <DevParam_Init+0x88>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b40      	subs	r3, #64	@ 0x40
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <DevParam_Init+0x88>)
 80036c6:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <DevParam_Init+0x88>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80036d0:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 80036d4:	607b      	str	r3, [r7, #4]
			DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 80036d6:	2220      	movs	r2, #32
 80036d8:	4907      	ldr	r1, [pc, #28]	@ (80036f8 <DevParam_Init+0x84>)
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f7ff ff9e 	bl	800361c <DevFlash_Read>
			break;
 80036e0:	e004      	b.n	80036ec <DevParam_Init+0x78>
	while(read_addr < (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a06      	ldr	r2, [pc, #24]	@ (8003700 <DevParam_Init+0x8c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d9ca      	bls.n	8003680 <DevParam_Init+0xc>
		}
	}
}
 80036ea:	bf00      	nop
 80036ec:	bf00      	nop
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	08080000 	.word	0x08080000
 80036f8:	200005d8 	.word	0x200005d8
 80036fc:	200006bc 	.word	0x200006bc
 8003700:	08080fff 	.word	0x08080fff

08003704 <DevFlashWrite_Main>:

void DevFlashWrite_Main(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
	uint32_t sectorError = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
	uint32_t write_addr = FLASH_SLAVE_ULTRAPARAM;
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <DevFlashWrite_Main+0x8c>)
 8003710:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef eraseInitStruct;

	if(FlashSaveFlg == 1)
 8003712:	4b20      	ldr	r3, [pc, #128]	@ (8003794 <DevFlashWrite_Main+0x90>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d135      	bne.n	8003786 <DevFlashWrite_Main+0x82>
	{
		DevParamRead.UltraParam.WriteCount += 1;
 800371a:	4b1f      	ldr	r3, [pc, #124]	@ (8003798 <DevFlashWrite_Main+0x94>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3301      	adds	r3, #1
 8003720:	4a1d      	ldr	r2, [pc, #116]	@ (8003798 <DevFlashWrite_Main+0x94>)
 8003722:	6013      	str	r3, [r2, #0]

		if(DevParamRead.UltraParam.WriteCount != 1)
 8003724:	4b1c      	ldr	r3, [pc, #112]	@ (8003798 <DevFlashWrite_Main+0x94>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d009      	beq.n	8003740 <DevFlashWrite_Main+0x3c>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <DevFlashWrite_Main+0x98>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	3340      	adds	r3, #64	@ 0x40
 8003732:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <DevFlashWrite_Main+0x98>)
 8003734:	6013      	str	r3, [r2, #0]
			write_addr += FlashOffset;
 8003736:	4b19      	ldr	r3, [pc, #100]	@ (800379c <DevFlashWrite_Main+0x98>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4413      	add	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
		}
		if((write_addr + ULTRAPARAMSIZE * 2) > (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	3340      	adds	r3, #64	@ 0x40
 8003744:	4a16      	ldr	r2, [pc, #88]	@ (80037a0 <DevFlashWrite_Main+0x9c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d915      	bls.n	8003776 <DevFlashWrite_Main+0x72>
		{
			HAL_FLASH_Unlock();
 800374a:	f001 ff97 	bl	800567c <HAL_FLASH_Unlock>

			eraseInitStruct.Banks = FLASH_BANK_2;
 800374e:	2302      	movs	r3, #2
 8003750:	607b      	str	r3, [r7, #4]
			eraseInitStruct.NbPages = 2;
 8003752:	2302      	movs	r3, #2
 8003754:	60fb      	str	r3, [r7, #12]
			eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003756:	2300      	movs	r3, #0
 8003758:	603b      	str	r3, [r7, #0]
			eraseInitStruct.PageAddress = FLASH_SLAVE_ULTRAPARAM;
 800375a:	4b0d      	ldr	r3, [pc, #52]	@ (8003790 <DevFlashWrite_Main+0x8c>)
 800375c:	60bb      	str	r3, [r7, #8]

			HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 800375e:	f107 0210 	add.w	r2, r7, #16
 8003762:	463b      	mov	r3, r7
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 f8f0 	bl	800594c <HAL_FLASHEx_Erase>

			write_addr = FLASH_SLAVE_ULTRAPARAM;
 800376c:	4b08      	ldr	r3, [pc, #32]	@ (8003790 <DevFlashWrite_Main+0x8c>)
 800376e:	617b      	str	r3, [r7, #20]
			FlashOffset = 0;
 8003770:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <DevFlashWrite_Main+0x98>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
		}

		DevFlash_Write(write_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003776:	2220      	movs	r2, #32
 8003778:	4907      	ldr	r1, [pc, #28]	@ (8003798 <DevFlashWrite_Main+0x94>)
 800377a:	6978      	ldr	r0, [r7, #20]
 800377c:	f7ff ff10 	bl	80035a0 <DevFlash_Write>
		FlashSaveFlg = 0;
 8003780:	4b04      	ldr	r3, [pc, #16]	@ (8003794 <DevFlashWrite_Main+0x90>)
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
	}
}
 8003786:	bf00      	nop
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	08080000 	.word	0x08080000
 8003794:	200006b9 	.word	0x200006b9
 8003798:	200005d8 	.word	0x200005d8
 800379c:	200006bc 	.word	0x200006bc
 80037a0:	08081000 	.word	0x08081000

080037a4 <DevPwmFunc_Init>:
		pwm_period[ch] = period;
	}
}

void DevPwmFunc_Init(void)
{
 80037a4:	b590      	push	{r4, r7, lr}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	71fb      	strb	r3, [r7, #7]
	uint8_t motor_level = 0xA;
 80037ae:	230a      	movs	r3, #10
 80037b0:	71bb      	strb	r3, [r7, #6]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 80037b2:	2300      	movs	r3, #0
 80037b4:	71fb      	strb	r3, [r7, #7]
 80037b6:	e046      	b.n	8003846 <DevPwmFunc_Init+0xa2>
	{
		pwm_duty[tag_i] = (DevParamRead.UltraParam.PluseDuty[tag_i] == 0xFF) ? 60 : DevParamRead.UltraParam.PluseDuty[tag_i];
 80037b8:	79fb      	ldrb	r3, [r7, #7]
 80037ba:	4a31      	ldr	r2, [pc, #196]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 80037bc:	4413      	add	r3, r2
 80037be:	7f9b      	ldrb	r3, [r3, #30]
 80037c0:	2bff      	cmp	r3, #255	@ 0xff
 80037c2:	d004      	beq.n	80037ce <DevPwmFunc_Init+0x2a>
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 80037c8:	4413      	add	r3, r2
 80037ca:	7f9a      	ldrb	r2, [r3, #30]
 80037cc:	e000      	b.n	80037d0 <DevPwmFunc_Init+0x2c>
 80037ce:	223c      	movs	r2, #60	@ 0x3c
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	492c      	ldr	r1, [pc, #176]	@ (8003884 <DevPwmFunc_Init+0xe0>)
 80037d4:	54ca      	strb	r2, [r1, r3]
		pwm_period[tag_i] = (DevParamRead.UltraParam.PlusePeriod[tag_i] == 0xFFFF) ? 100 : DevParamRead.UltraParam.PlusePeriod[tag_i];
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	4a29      	ldr	r2, [pc, #164]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 80037da:	3310      	adds	r3, #16
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	88db      	ldrh	r3, [r3, #6]
 80037e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d007      	beq.n	80037fa <DevPwmFunc_Init+0x56>
 80037ea:	79fb      	ldrb	r3, [r7, #7]
 80037ec:	4a24      	ldr	r2, [pc, #144]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 80037ee:	3310      	adds	r3, #16
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	88db      	ldrh	r3, [r3, #6]
 80037f6:	461a      	mov	r2, r3
 80037f8:	e000      	b.n	80037fc <DevPwmFunc_Init+0x58>
 80037fa:	2264      	movs	r2, #100	@ 0x64
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	4922      	ldr	r1, [pc, #136]	@ (8003888 <DevPwmFunc_Init+0xe4>)
 8003800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	4a20      	ldr	r2, [pc, #128]	@ (8003888 <DevPwmFunc_Init+0xe4>)
 8003808:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4a1d      	ldr	r2, [pc, #116]	@ (8003884 <DevPwmFunc_Init+0xe0>)
 8003810:	5cd2      	ldrb	r2, [r2, r3]
 8003812:	79fc      	ldrb	r4, [r7, #7]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f91c 	bl	8003a54 <DevPwm_SetPulseFreq>
 800381c:	4603      	mov	r3, r0
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <DevPwmFunc_Init+0xe8>)
 8003820:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pwm_duty_old[tag_i] = pwm_duty[tag_i];
 8003824:	79fa      	ldrb	r2, [r7, #7]
 8003826:	79fb      	ldrb	r3, [r7, #7]
 8003828:	4916      	ldr	r1, [pc, #88]	@ (8003884 <DevPwmFunc_Init+0xe0>)
 800382a:	5c89      	ldrb	r1, [r1, r2]
 800382c:	4a18      	ldr	r2, [pc, #96]	@ (8003890 <DevPwmFunc_Init+0xec>)
 800382e:	54d1      	strb	r1, [r2, r3]
		pwm_period_old[tag_i] = pwm_period[tag_i];
 8003830:	79fa      	ldrb	r2, [r7, #7]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	4914      	ldr	r1, [pc, #80]	@ (8003888 <DevPwmFunc_Init+0xe4>)
 8003836:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800383a:	4916      	ldr	r1, [pc, #88]	@ (8003894 <DevPwmFunc_Init+0xf0>)
 800383c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8003840:	79fb      	ldrb	r3, [r7, #7]
 8003842:	3301      	adds	r3, #1
 8003844:	71fb      	strb	r3, [r7, #7]
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2b07      	cmp	r3, #7
 800384a:	d9b5      	bls.n	80037b8 <DevPwmFunc_Init+0x14>
	}

	motor_level = (DevParamRead.UltraParam.Vibra_Param == 0xFFFF) ? 0xA : (uint8_t)DevParamRead.UltraParam.Vibra_Param;
 800384c:	4b0c      	ldr	r3, [pc, #48]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 800384e:	8b9b      	ldrh	r3, [r3, #28]
 8003850:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003854:	4293      	cmp	r3, r2
 8003856:	d003      	beq.n	8003860 <DevPwmFunc_Init+0xbc>
 8003858:	4b09      	ldr	r3, [pc, #36]	@ (8003880 <DevPwmFunc_Init+0xdc>)
 800385a:	8b9b      	ldrh	r3, [r3, #28]
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e000      	b.n	8003862 <DevPwmFunc_Init+0xbe>
 8003860:	230a      	movs	r3, #10
 8003862:	71bb      	strb	r3, [r7, #6]
	MotorLevel = motor_level;
 8003864:	4a0c      	ldr	r2, [pc, #48]	@ (8003898 <DevPwmFunc_Init+0xf4>)
 8003866:	79bb      	ldrb	r3, [r7, #6]
 8003868:	7013      	strb	r3, [r2, #0]

	__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,motor_level * MOTOR_STEP);
 800386a:	79bb      	ldrb	r3, [r7, #6]
 800386c:	22d8      	movs	r2, #216	@ 0xd8
 800386e:	fb03 f202 	mul.w	r2, r3, r2
 8003872:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <DevPwmFunc_Init+0xf8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	200005d8 	.word	0x200005d8
 8003884:	200006c0 	.word	0x200006c0
 8003888:	200006d0 	.word	0x200006d0
 800388c:	20000710 	.word	0x20000710
 8003890:	200006c8 	.word	0x200006c8
 8003894:	200006f0 	.word	0x200006f0
 8003898:	20000140 	.word	0x20000140
 800389c:	200003e0 	.word	0x200003e0

080038a0 <DevPwmFunc_Main>:

void DevPwmFunc_Main(void)
{
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	71fb      	strb	r3, [r7, #7]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 80038aa:	2300      	movs	r3, #0
 80038ac:	71fb      	strb	r3, [r7, #7]
 80038ae:	e029      	b.n	8003904 <DevPwmFunc_Main+0x64>
	{
		if(pwm_period_old[tag_i] != pwm_period[tag_i])
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4a31      	ldr	r2, [pc, #196]	@ (8003978 <DevPwmFunc_Main+0xd8>)
 80038b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80038b8:	79fb      	ldrb	r3, [r7, #7]
 80038ba:	4930      	ldr	r1, [pc, #192]	@ (800397c <DevPwmFunc_Main+0xdc>)
 80038bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d010      	beq.n	80038e6 <DevPwmFunc_Main+0x46>
		{
			pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	4a2d      	ldr	r2, [pc, #180]	@ (800397c <DevPwmFunc_Main+0xdc>)
 80038c8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003980 <DevPwmFunc_Main+0xe0>)
 80038d0:	5cd2      	ldrb	r2, [r2, r3]
 80038d2:	79fc      	ldrb	r4, [r7, #7]
 80038d4:	79fb      	ldrb	r3, [r7, #7]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 f8bc 	bl	8003a54 <DevPwm_SetPulseFreq>
 80038dc:	4603      	mov	r3, r0
 80038de:	4a29      	ldr	r2, [pc, #164]	@ (8003984 <DevPwmFunc_Main+0xe4>)
 80038e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80038e4:	e00b      	b.n	80038fe <DevPwmFunc_Main+0x5e>
		}else if(pwm_duty_old[tag_i] != pwm_duty[tag_i])
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	4a27      	ldr	r2, [pc, #156]	@ (8003988 <DevPwmFunc_Main+0xe8>)
 80038ea:	5cd2      	ldrb	r2, [r2, r3]
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	4924      	ldr	r1, [pc, #144]	@ (8003980 <DevPwmFunc_Main+0xe0>)
 80038f0:	5ccb      	ldrb	r3, [r1, r3]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d003      	beq.n	80038fe <DevPwmFunc_Main+0x5e>
		{
			DevPwm_SetPulseDuty(tag_i);
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f855 	bl	80039a8 <DevPwm_SetPulseDuty>
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	3301      	adds	r3, #1
 8003902:	71fb      	strb	r3, [r7, #7]
 8003904:	79fb      	ldrb	r3, [r7, #7]
 8003906:	2b07      	cmp	r3, #7
 8003908:	d9d2      	bls.n	80038b0 <DevPwmFunc_Main+0x10>
		}else
		{
		}
	}

	if(MotorLevel != DevParamRead.UltraParam.Vibra_Param)
 800390a:	4b20      	ldr	r3, [pc, #128]	@ (800398c <DevPwmFunc_Main+0xec>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	461a      	mov	r2, r3
 8003910:	4b1f      	ldr	r3, [pc, #124]	@ (8003990 <DevPwmFunc_Main+0xf0>)
 8003912:	8b9b      	ldrh	r3, [r3, #28]
 8003914:	429a      	cmp	r2, r3
 8003916:	d00d      	beq.n	8003934 <DevPwmFunc_Main+0x94>
	{
		MotorLevel = DevParamRead.UltraParam.Vibra_Param;
 8003918:	4b1d      	ldr	r3, [pc, #116]	@ (8003990 <DevPwmFunc_Main+0xf0>)
 800391a:	8b9b      	ldrh	r3, [r3, #28]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4b1b      	ldr	r3, [pc, #108]	@ (800398c <DevPwmFunc_Main+0xec>)
 8003920:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,MotorLevel * MOTOR_STEP);
 8003922:	4b1a      	ldr	r3, [pc, #104]	@ (800398c <DevPwmFunc_Main+0xec>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	23d8      	movs	r3, #216	@ 0xd8
 800392a:	fb03 f202 	mul.w	r2, r3, r2
 800392e:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <DevPwmFunc_Main+0xf4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(SampleTemp > 45.0f)
 8003934:	4b18      	ldr	r3, [pc, #96]	@ (8003998 <DevPwmFunc_Main+0xf8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4918      	ldr	r1, [pc, #96]	@ (800399c <DevPwmFunc_Main+0xfc>)
 800393a:	4618      	mov	r0, r3
 800393c:	f7fd fb84 	bl	8001048 <__aeabi_fcmpgt>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <DevPwmFunc_Main+0xb2>
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,FAN_PULSE);
 8003946:	4b16      	ldr	r3, [pc, #88]	@ (80039a0 <DevPwmFunc_Main+0x100>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394e:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else if(SampleTemp < 40.0f)
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
	}
}
 8003950:	e00d      	b.n	800396e <DevPwmFunc_Main+0xce>
	}else if(SampleTemp < 40.0f)
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <DevPwmFunc_Main+0xf8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4913      	ldr	r1, [pc, #76]	@ (80039a4 <DevPwmFunc_Main+0x104>)
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd fb57 	bl	800100c <__aeabi_fcmplt>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d100      	bne.n	8003966 <DevPwmFunc_Main+0xc6>
}
 8003964:	e003      	b.n	800396e <DevPwmFunc_Main+0xce>
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
 8003966:	4b0e      	ldr	r3, [pc, #56]	@ (80039a0 <DevPwmFunc_Main+0x100>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	bd90      	pop	{r4, r7, pc}
 8003976:	bf00      	nop
 8003978:	200006f0 	.word	0x200006f0
 800397c:	200006d0 	.word	0x200006d0
 8003980:	200006c0 	.word	0x200006c0
 8003984:	20000710 	.word	0x20000710
 8003988:	200006c8 	.word	0x200006c8
 800398c:	20000140 	.word	0x20000140
 8003990:	200005d8 	.word	0x200005d8
 8003994:	200003e0 	.word	0x200003e0
 8003998:	200006a8 	.word	0x200006a8
 800399c:	42340000 	.word	0x42340000
 80039a0:	20000308 	.word	0x20000308
 80039a4:	42200000 	.word	0x42200000

080039a8 <DevPwm_SetPulseDuty>:

static void DevPwm_SetPulseDuty(uint8_t ch)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
	uint32_t channel;
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <DevPwm_SetPulseDuty+0x9c>)
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	4413      	add	r3, r2
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]
	p_handle = dev_ultra_handle[ch].Handle;
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a44 <DevPwm_SetPulseDuty+0x9c>)
 80039c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039ca:	60fb      	str	r3, [r7, #12]

	if(pwm_duty[ch] == 100)
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003a48 <DevPwm_SetPulseDuty+0xa0>)
 80039d0:	5cd3      	ldrb	r3, [r2, r3]
 80039d2:	2b64      	cmp	r3, #100	@ 0x64
 80039d4:	d106      	bne.n	80039e4 <DevPwm_SetPulseDuty+0x3c>
	{
		pulse = pwm_pluse[ch] + 1;
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	4a1c      	ldr	r2, [pc, #112]	@ (8003a4c <DevPwm_SetPulseDuty+0xa4>)
 80039da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039de:	3301      	adds	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e00e      	b.n	8003a02 <DevPwm_SetPulseDuty+0x5a>
	}else
	{
		pulse = pwm_duty[ch] * pwm_pluse[ch] / 100;
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	4a18      	ldr	r2, [pc, #96]	@ (8003a48 <DevPwm_SetPulseDuty+0xa0>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	4619      	mov	r1, r3
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	4a17      	ldr	r2, [pc, #92]	@ (8003a4c <DevPwm_SetPulseDuty+0xa4>)
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4a15      	ldr	r2, [pc, #84]	@ (8003a50 <DevPwm_SetPulseDuty+0xa8>)
 80039fa:	fba2 2303 	umull	r2, r3, r2, r3
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	617b      	str	r3, [r7, #20]
	}


	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <DevPwm_SetPulseDuty+0x6a>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003a10:	e013      	b.n	8003a3a <DevPwm_SetPulseDuty+0x92>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d104      	bne.n	8003a22 <DevPwm_SetPulseDuty+0x7a>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003a20:	e00b      	b.n	8003a3a <DevPwm_SetPulseDuty+0x92>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d104      	bne.n	8003a32 <DevPwm_SetPulseDuty+0x8a>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003a30:	e003      	b.n	8003a3a <DevPwm_SetPulseDuty+0x92>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	08008f38 	.word	0x08008f38
 8003a48:	200006c0 	.word	0x200006c0
 8003a4c:	20000710 	.word	0x20000710
 8003a50:	51eb851f 	.word	0x51eb851f

08003a54 <DevPwm_SetPulseFreq>:
 * @retval	none
 * @func	调节脉冲时间和占空比
 */

static uint32_t DevPwm_SetPulseFreq(uint8_t ch,uint32_t pulsetime,uint8_t duty)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	6039      	str	r1, [r7, #0]
 8003a5e:	71fb      	strb	r3, [r7, #7]
 8003a60:	4613      	mov	r3, r2
 8003a62:	71bb      	strb	r3, [r7, #6]
	uint32_t input_freq = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
	uint32_t out_prescaler_value = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61fb      	str	r3, [r7, #28]
	uint32_t out_count_value = 0;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
	uint32_t channel;
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	4a49      	ldr	r2, [pc, #292]	@ (8003b98 <DevPwm_SetPulseFreq+0x144>)
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	613b      	str	r3, [r7, #16]
	p_handle = dev_ultra_handle[ch].Handle;
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	4a46      	ldr	r2, [pc, #280]	@ (8003b98 <DevPwm_SetPulseFreq+0x144>)
 8003a80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a84:	60fb      	str	r3, [r7, #12]

	input_freq = 10000 / pulsetime;
 8003a86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]

	if((input_freq > MAX_OUTPUT_FREQ) || (input_freq < MIN_OUTPUT_FREQ))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d802      	bhi.n	8003aa2 <DevPwm_SetPulseFreq+0x4e>
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d801      	bhi.n	8003aa6 <DevPwm_SetPulseFreq+0x52>
	{
		return 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e073      	b.n	8003b8e <DevPwm_SetPulseFreq+0x13a>
	}

	if((input_freq >= 20) && (input_freq <= 10000))
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	2b13      	cmp	r3, #19
 8003aaa:	d90d      	bls.n	8003ac8 <DevPwm_SetPulseFreq+0x74>
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d808      	bhi.n	8003ac8 <DevPwm_SetPulseFreq+0x74>
	{
		out_prescaler_value = 720-1;
 8003ab6:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8003aba:	61fb      	str	r3, [r7, #28]
		out_count_value = 1000000 / input_freq;
 8003abc:	4a37      	ldr	r2, [pc, #220]	@ (8003b9c <DevPwm_SetPulseFreq+0x148>)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	61bb      	str	r3, [r7, #24]
 8003ac6:	e010      	b.n	8003aea <DevPwm_SetPulseFreq+0x96>
	}else if((input_freq >= 2) && (input_freq < 20))
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d90b      	bls.n	8003ae6 <DevPwm_SetPulseFreq+0x92>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b13      	cmp	r3, #19
 8003ad2:	d808      	bhi.n	8003ae6 <DevPwm_SetPulseFreq+0x92>
	{
		out_prescaler_value = 7200-1;
 8003ad4:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 8003ad8:	61fb      	str	r3, [r7, #28]
		out_count_value = 100000 / input_freq;
 8003ada:	4a31      	ldr	r2, [pc, #196]	@ (8003ba0 <DevPwm_SetPulseFreq+0x14c>)
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	e001      	b.n	8003aea <DevPwm_SetPulseFreq+0x96>
	}else
	{
		return 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e051      	b.n	8003b8e <DevPwm_SetPulseFreq+0x13a>
	}

	// 停止定时器
	HAL_TIM_PWM_Stop(p_handle, channel);
 8003aea:	6939      	ldr	r1, [r7, #16]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f003 f9e7 	bl	8006ec0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(p_handle);
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f003 f89e 	bl	8006c34 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_PRESCALER(p_handle, out_prescaler_value);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SetAutoreload(p_handle, out_count_value);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	60da      	str	r2, [r3, #12]

	__HAL_TIM_SetCompare(p_handle, channel, (out_count_value * duty / 100)); // 假设使用通道1	//PWM_Ultra_B
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <DevPwm_SetPulseFreq+0xd8>
 8003b14:	79bb      	ldrb	r3, [r7, #6]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	fb03 f202 	mul.w	r2, r3, r2
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4920      	ldr	r1, [pc, #128]	@ (8003ba4 <DevPwm_SetPulseFreq+0x150>)
 8003b22:	fba1 1202 	umull	r1, r2, r1, r2
 8003b26:	0952      	lsrs	r2, r2, #5
 8003b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b2a:	e028      	b.n	8003b7e <DevPwm_SetPulseFreq+0x12a>
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d10b      	bne.n	8003b4a <DevPwm_SetPulseFreq+0xf6>
 8003b32:	79bb      	ldrb	r3, [r7, #6]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	4919      	ldr	r1, [pc, #100]	@ (8003ba4 <DevPwm_SetPulseFreq+0x150>)
 8003b40:	fba1 1303 	umull	r1, r3, r1, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	6393      	str	r3, [r2, #56]	@ 0x38
 8003b48:	e019      	b.n	8003b7e <DevPwm_SetPulseFreq+0x12a>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d10b      	bne.n	8003b68 <DevPwm_SetPulseFreq+0x114>
 8003b50:	79bb      	ldrb	r3, [r7, #6]
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	fb02 f303 	mul.w	r3, r2, r3
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	4911      	ldr	r1, [pc, #68]	@ (8003ba4 <DevPwm_SetPulseFreq+0x150>)
 8003b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003b66:	e00a      	b.n	8003b7e <DevPwm_SetPulseFreq+0x12a>
 8003b68:	79bb      	ldrb	r3, [r7, #6]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	490b      	ldr	r1, [pc, #44]	@ (8003ba4 <DevPwm_SetPulseFreq+0x150>)
 8003b76:	fba1 1303 	umull	r1, r3, r1, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	6413      	str	r3, [r2, #64]	@ 0x40

    // 更新并启动定时器
	HAL_TIM_Base_Start(p_handle);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f002 fff2 	bl	8006b68 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(p_handle, channel);
 8003b84:	6939      	ldr	r1, [r7, #16]
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f003 f8d2 	bl	8006d30 <HAL_TIM_PWM_Start>

    return out_count_value;
 8003b8c:	69bb      	ldr	r3, [r7, #24]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08008f38 	.word	0x08008f38
 8003b9c:	000f4240 	.word	0x000f4240
 8003ba0:	000186a0 	.word	0x000186a0
 8003ba4:	51eb851f 	.word	0x51eb851f

08003ba8 <DevScreen_StartorStop>:
	[DevScreenCmd_SetUltraPeriod] = DevScreen_SetUltraPeriod,
	[DevScreenCmd_SetUltraWork] = DevScreen_SetUltraWork,
};

static void DevScreen_StartorStop(uint8_t *buff)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
	WorkSta = (buff[0] == 0) ? DEVWORKSTOP : DEVWORKSTART;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b04      	ldr	r3, [pc, #16]	@ (8003bd4 <DevScreen_StartorStop+0x2c>)
 8003bc2:	701a      	strb	r2, [r3, #0]
	UltraWorkTime = 0;
 8003bc4:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <DevScreen_StartorStop+0x30>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bc80      	pop	{r7}
 8003bd2:	4770      	bx	lr
 8003bd4:	200005d0 	.word	0x200005d0
 8003bd8:	200005d4 	.word	0x200005d4

08003bdc <DevScreen_SetUltraFreq>:

static void DevScreen_SetUltraFreq(uint8_t *buff)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	72fb      	strb	r3, [r7, #11]
	uint16_t freq_param_temp = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	81bb      	strh	r3, [r7, #12]

	DevParamRead.UltraParam.UltraParamChangeFlg[0] = 0xdddd;
 8003bf0:	4b38      	ldr	r3, [pc, #224]	@ (8003cd4 <DevScreen_SetUltraFreq+0xf8>)
 8003bf2:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8003bf6:	809a      	strh	r2, [r3, #4]
	DevParamRead.UltraParam.UltraParamChangeFlg[1] = 0xeeee;
 8003bf8:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <DevScreen_SetUltraFreq+0xf8>)
 8003bfa:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003bfe:	80da      	strh	r2, [r3, #6]
	DevParamRead.UltraParam.UltraParamChangeFlg[2] = 0xffff;
 8003c00:	4b34      	ldr	r3, [pc, #208]	@ (8003cd4 <DevScreen_SetUltraFreq+0xf8>)
 8003c02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003c06:	811a      	strh	r2, [r3, #8]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e058      	b.n	8003cc0 <DevScreen_SetUltraFreq+0xe4>
	{
		if((tag_i % 2) == 0)
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11b      	bne.n	8003c52 <DevScreen_SetUltraFreq+0x76>
		{
			temp = tag_i / 2 * 3;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	0052      	lsls	r2, r2, #1
 8003c24:	4413      	add	r3, r2
 8003c26:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	b21a      	sxth	r2, r3
 8003c34:	7afb      	ldrb	r3, [r7, #11]
 8003c36:	3301      	adds	r3, #1
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	440b      	add	r3, r1
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	b21b      	sxth	r3, r3
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	b21b      	sxth	r3, r3
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	81bb      	strh	r3, [r7, #12]
 8003c50:	e01a      	b.n	8003c88 <DevScreen_SetUltraFreq+0xac>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	461a      	mov	r2, r3
 8003c5a:	0052      	lsls	r2, r2, #1
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	3301      	adds	r3, #1
 8003c62:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 8003c64:	7afb      	ldrb	r3, [r7, #11]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	b21b      	sxth	r3, r3
 8003c70:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c74:	b21a      	sxth	r2, r3
 8003c76:	7afb      	ldrb	r3, [r7, #11]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	440b      	add	r3, r1
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	b21b      	sxth	r3, r3
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b21b      	sxth	r3, r3
 8003c86:	81bb      	strh	r3, [r7, #12]
		}

		if(freq_param_temp != 0)
 8003c88:	89bb      	ldrh	r3, [r7, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d015      	beq.n	8003cba <DevScreen_SetUltraFreq+0xde>
		{
			FlashSaveFlg = (DevParamRead.UltraParam.Freq_Param[tag_i] != freq_param_temp) ? 1 : FlashSaveFlg;
 8003c8e:	7bfb      	ldrb	r3, [r7, #15]
 8003c90:	4a10      	ldr	r2, [pc, #64]	@ (8003cd4 <DevScreen_SetUltraFreq+0xf8>)
 8003c92:	3304      	adds	r3, #4
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4413      	add	r3, r2
 8003c98:	885b      	ldrh	r3, [r3, #2]
 8003c9a:	89ba      	ldrh	r2, [r7, #12]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d102      	bne.n	8003ca6 <DevScreen_SetUltraFreq+0xca>
 8003ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd8 <DevScreen_SetUltraFreq+0xfc>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	e000      	b.n	8003ca8 <DevScreen_SetUltraFreq+0xcc>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd8 <DevScreen_SetUltraFreq+0xfc>)
 8003caa:	7013      	strb	r3, [r2, #0]
			DevParamRead.UltraParam.Freq_Param[tag_i] = freq_param_temp;
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	4a09      	ldr	r2, [pc, #36]	@ (8003cd4 <DevScreen_SetUltraFreq+0xf8>)
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	89ba      	ldrh	r2, [r7, #12]
 8003cb8:	805a      	strh	r2, [r3, #2]
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	7bfb      	ldrb	r3, [r7, #15]
 8003cc2:	2b07      	cmp	r3, #7
 8003cc4:	d9a3      	bls.n	8003c0e <DevScreen_SetUltraFreq+0x32>
		}
	}
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bc80      	pop	{r7}
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	200005d8 	.word	0x200005d8
 8003cd8:	200006b9 	.word	0x200006b9

08003cdc <DevScreen_SetUltraVibra>:

static void DevScreen_SetUltraVibra(uint8_t *buff)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 8003ce4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <DevScreen_SetUltraVibra+0x48>)
 8003ce6:	8b5b      	ldrh	r3, [r3, #26]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	7812      	ldrb	r2, [r2, #0]
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d106      	bne.n	8003cfe <DevScreen_SetUltraVibra+0x22>
	   (DevParamRead.UltraParam.Vibra_Param != (uint16_t)buff[1]))
 8003cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003d24 <DevScreen_SetUltraVibra+0x48>)
 8003cf2:	8b9b      	ldrh	r3, [r3, #28]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	3201      	adds	r2, #1
 8003cf8:	7812      	ldrb	r2, [r2, #0]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <DevScreen_SetUltraVibra+0x3e>
	{
		FlashSaveFlg = 1;
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <DevScreen_SetUltraVibra+0x4c>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.VibraEnableFlg = (uint16_t)buff[0];
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	461a      	mov	r2, r3
 8003d0a:	4b06      	ldr	r3, [pc, #24]	@ (8003d24 <DevScreen_SetUltraVibra+0x48>)
 8003d0c:	835a      	strh	r2, [r3, #26]
		DevParamRead.UltraParam.Vibra_Param = (uint16_t)buff[1];
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3301      	adds	r3, #1
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	461a      	mov	r2, r3
 8003d16:	4b03      	ldr	r3, [pc, #12]	@ (8003d24 <DevScreen_SetUltraVibra+0x48>)
 8003d18:	839a      	strh	r2, [r3, #28]
	}
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bc80      	pop	{r7}
 8003d22:	4770      	bx	lr
 8003d24:	200005d8 	.word	0x200005d8
 8003d28:	200006b9 	.word	0x200006b9

08003d2c <DevScreen_SetUltraDuty>:

static void DevScreen_SetUltraDuty(uint8_t *buff)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	uint8_t tag_i;
	uint8_t pluse_duty_temp = 0;
 8003d34:	2300      	movs	r3, #0
 8003d36:	73bb      	strb	r3, [r7, #14]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e016      	b.n	8003d6c <DevScreen_SetUltraDuty+0x40>
	{
		pluse_duty_temp = buff[tag_i];
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	73bb      	strb	r3, [r7, #14]

		if(pluse_duty_temp != DevParamRead.UltraParam.PluseDuty[tag_i])
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d80 <DevScreen_SetUltraDuty+0x54>)
 8003d4c:	4413      	add	r3, r2
 8003d4e:	7f9b      	ldrb	r3, [r3, #30]
 8003d50:	7bba      	ldrb	r2, [r7, #14]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d007      	beq.n	8003d66 <DevScreen_SetUltraDuty+0x3a>
		{
			DevParamRead.UltraParam.PluseDuty[tag_i] = pluse_duty_temp;
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	4a09      	ldr	r2, [pc, #36]	@ (8003d80 <DevScreen_SetUltraDuty+0x54>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	7bba      	ldrb	r2, [r7, #14]
 8003d5e:	779a      	strb	r2, [r3, #30]
			FlashSaveFlg = 1;
 8003d60:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <DevScreen_SetUltraDuty+0x58>)
 8003d62:	2201      	movs	r2, #1
 8003d64:	701a      	strb	r2, [r3, #0]
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003d66:	7bfb      	ldrb	r3, [r7, #15]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	73fb      	strb	r3, [r7, #15]
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b07      	cmp	r3, #7
 8003d70:	d9e5      	bls.n	8003d3e <DevScreen_SetUltraDuty+0x12>
		}
	}
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bc80      	pop	{r7}
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	200005d8 	.word	0x200005d8
 8003d84:	200006b9 	.word	0x200006b9

08003d88 <DevScreen_SetUltraPeriod>:

static void DevScreen_SetUltraPeriod(uint8_t *buff)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8003d90:	2300      	movs	r3, #0
 8003d92:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	72fb      	strb	r3, [r7, #11]
	uint16_t period_temp = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	81bb      	strh	r3, [r7, #12]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]
 8003da0:	e055      	b.n	8003e4e <DevScreen_SetUltraPeriod+0xc6>
	{
		if((tag_i % 2) == 0)
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d11b      	bne.n	8003de6 <DevScreen_SetUltraPeriod+0x5e>
		{
			temp = tag_i / 2 * 3;
 8003dae:	7bfb      	ldrb	r3, [r7, #15]
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	461a      	mov	r2, r3
 8003db6:	0052      	lsls	r2, r2, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	440b      	add	r3, r1
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	b21b      	sxth	r3, r3
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b21b      	sxth	r3, r3
 8003de2:	81bb      	strh	r3, [r7, #12]
 8003de4:	e01a      	b.n	8003e1c <DevScreen_SetUltraPeriod+0x94>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	0052      	lsls	r2, r2, #1
 8003df0:	4413      	add	r3, r2
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 8003df8:	7afb      	ldrb	r3, [r7, #11]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	b21b      	sxth	r3, r3
 8003e04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003e08:	b21a      	sxth	r2, r3
 8003e0a:	7afb      	ldrb	r3, [r7, #11]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	440b      	add	r3, r1
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	b21b      	sxth	r3, r3
 8003e16:	4313      	orrs	r3, r2
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	81bb      	strh	r3, [r7, #12]
		}

		FlashSaveFlg = (DevParamRead.UltraParam.PlusePeriod[tag_i] != period_temp) ? 1 : FlashSaveFlg;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	4a10      	ldr	r2, [pc, #64]	@ (8003e60 <DevScreen_SetUltraPeriod+0xd8>)
 8003e20:	3310      	adds	r3, #16
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	88db      	ldrh	r3, [r3, #6]
 8003e28:	89ba      	ldrh	r2, [r7, #12]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d102      	bne.n	8003e34 <DevScreen_SetUltraPeriod+0xac>
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e64 <DevScreen_SetUltraPeriod+0xdc>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	e000      	b.n	8003e36 <DevScreen_SetUltraPeriod+0xae>
 8003e34:	2301      	movs	r3, #1
 8003e36:	4a0b      	ldr	r2, [pc, #44]	@ (8003e64 <DevScreen_SetUltraPeriod+0xdc>)
 8003e38:	7013      	strb	r3, [r2, #0]
		DevParamRead.UltraParam.PlusePeriod[tag_i] = period_temp;
 8003e3a:	7bfb      	ldrb	r3, [r7, #15]
 8003e3c:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <DevScreen_SetUltraPeriod+0xd8>)
 8003e3e:	3310      	adds	r3, #16
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	89ba      	ldrh	r2, [r7, #12]
 8003e46:	80da      	strh	r2, [r3, #6]
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b07      	cmp	r3, #7
 8003e52:	d9a6      	bls.n	8003da2 <DevScreen_SetUltraPeriod+0x1a>
	}
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	200005d8 	.word	0x200005d8
 8003e64:	200006b9 	.word	0x200006b9

08003e68 <DevScreen_SetUltraWork>:

static void DevScreen_SetUltraWork(uint8_t *buff)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
	uint16_t stimu_temp = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	81fb      	strh	r3, [r7, #14]
	uint16_t idle_temp = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	81bb      	strh	r3, [r7, #12]

	stimu_temp = ((uint16_t)buff[0] << 8) | buff[1];
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	b21a      	sxth	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3301      	adds	r3, #1
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b21b      	sxth	r3, r3
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	b21b      	sxth	r3, r3
 8003e8c:	81fb      	strh	r3, [r7, #14]
	idle_temp = ((uint16_t)buff[2] << 8) | buff[3];
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	3302      	adds	r3, #2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	b21a      	sxth	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	3303      	adds	r3, #3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	b21b      	sxth	r3, r3
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	b21b      	sxth	r3, r3
 8003ea4:	81bb      	strh	r3, [r7, #12]
	if((DevParamRead.UltraParam.StimuTime != stimu_temp) || (idle_temp != DevParamRead.UltraParam.IdleTime))
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <DevScreen_SetUltraWork+0x70>)
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eaa:	89fa      	ldrh	r2, [r7, #14]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d104      	bne.n	8003eba <DevScreen_SetUltraWork+0x52>
 8003eb0:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <DevScreen_SetUltraWork+0x70>)
 8003eb2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8003eb4:	89ba      	ldrh	r2, [r7, #12]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d008      	beq.n	8003ecc <DevScreen_SetUltraWork+0x64>
	{
		FlashSaveFlg = 1;
 8003eba:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <DevScreen_SetUltraWork+0x74>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.StimuTime = stimu_temp;
 8003ec0:	4a05      	ldr	r2, [pc, #20]	@ (8003ed8 <DevScreen_SetUltraWork+0x70>)
 8003ec2:	89fb      	ldrh	r3, [r7, #14]
 8003ec4:	86d3      	strh	r3, [r2, #54]	@ 0x36
		DevParamRead.UltraParam.IdleTime = idle_temp;
 8003ec6:	4a04      	ldr	r2, [pc, #16]	@ (8003ed8 <DevScreen_SetUltraWork+0x70>)
 8003ec8:	89bb      	ldrh	r3, [r7, #12]
 8003eca:	8713      	strh	r3, [r2, #56]	@ 0x38
	}
}
 8003ecc:	bf00      	nop
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bc80      	pop	{r7}
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	200005d8 	.word	0x200005d8
 8003edc:	200006b9 	.word	0x200006b9

08003ee0 <HAL_UART_IdleCallback>:
	 HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
	 __HAL_UART_ENABLE_IT(DEV_SCREEN_UART_HANDLE,UART_IT_IDLE);
}

void HAL_UART_IdleCallback(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
	uint8_t cmd_id = 0;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	73fb      	strb	r3, [r7, #15]
	if((huart->Instance == USART3) && (RESET != __HAL_UART_GET_FLAG(DEV_SCREEN_UART_HANDLE,UART_FLAG_IDLE)))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8003fac <HAL_UART_IdleCallback+0xcc>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d155      	bne.n	8003fa2 <HAL_UART_IdleCallback+0xc2>
 8003ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8003fb0 <HAL_UART_IdleCallback+0xd0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b10      	cmp	r3, #16
 8003f02:	d14e      	bne.n	8003fa2 <HAL_UART_IdleCallback+0xc2>
	{
		HAL_UART_DMAStop(DEV_SCREEN_UART_HANDLE);
 8003f04:	482a      	ldr	r0, [pc, #168]	@ (8003fb0 <HAL_UART_IdleCallback+0xd0>)
 8003f06:	f003 fe25 	bl	8007b54 <HAL_UART_DMAStop>
		uint8_t *temp_buff = passive_buff;
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60bb      	str	r3, [r7, #8]
		passive_buff = active_buff;
 8003f10:	4b29      	ldr	r3, [pc, #164]	@ (8003fb8 <HAL_UART_IdleCallback+0xd8>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a27      	ldr	r2, [pc, #156]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f16:	6013      	str	r3, [r2, #0]
		active_buff = temp_buff;
 8003f18:	4a27      	ldr	r2, [pc, #156]	@ (8003fb8 <HAL_UART_IdleCallback+0xd8>)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6013      	str	r3, [r2, #0]

		if((passive_buff[0] == 0xEE) &&
 8003f1e:	4b25      	ldr	r3, [pc, #148]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2bee      	cmp	r3, #238	@ 0xee
 8003f26:	d132      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[1] == 0xB5) &&
 8003f28:	4b22      	ldr	r3, [pc, #136]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	781b      	ldrb	r3, [r3, #0]
		if((passive_buff[0] == 0xEE) &&
 8003f30:	2bb5      	cmp	r3, #181	@ 0xb5
 8003f32:	d12c      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[15] == 0xFF) &&
 8003f34:	4b1f      	ldr	r3, [pc, #124]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330f      	adds	r3, #15
 8003f3a:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[1] == 0xB5) &&
 8003f3c:	2bff      	cmp	r3, #255	@ 0xff
 8003f3e:	d126      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[16] == 0xFC) &&
 8003f40:	4b1c      	ldr	r3, [pc, #112]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3310      	adds	r3, #16
 8003f46:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[15] == 0xFF) &&
 8003f48:	2bfc      	cmp	r3, #252	@ 0xfc
 8003f4a:	d120      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[17] == 0xFF) &&
 8003f4c:	4b19      	ldr	r3, [pc, #100]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	3311      	adds	r3, #17
 8003f52:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[16] == 0xFC) &&
 8003f54:	2bff      	cmp	r3, #255	@ 0xff
 8003f56:	d11a      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[18] == 0xFF))
 8003f58:	4b16      	ldr	r3, [pc, #88]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3312      	adds	r3, #18
 8003f5e:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[17] == 0xFF) &&
 8003f60:	2bff      	cmp	r3, #255	@ 0xff
 8003f62:	d114      	bne.n	8003f8e <HAL_UART_IdleCallback+0xae>
		{
			cmd_id = passive_buff[2] - 0xB0;
 8003f64:	4b13      	ldr	r3, [pc, #76]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3302      	adds	r3, #2
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	3350      	adds	r3, #80	@ 0x50
 8003f6e:	73fb      	strb	r3, [r7, #15]
			if((cmd_id >= DevScreenCmd_WorkStart) && (cmd_id < DevScreenCmdMax))
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IdleCallback+0xae>
 8003f76:	7bfb      	ldrb	r3, [r7, #15]
 8003f78:	2b06      	cmp	r3, #6
 8003f7a:	d808      	bhi.n	8003f8e <HAL_UART_IdleCallback+0xae>
			{
				dev_screen_cmd[cmd_id](&passive_buff[3]);
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8003fbc <HAL_UART_IdleCallback+0xdc>)
 8003f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f84:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb4 <HAL_UART_IdleCallback+0xd4>)
 8003f86:	6812      	ldr	r2, [r2, #0]
 8003f88:	3203      	adds	r2, #3
 8003f8a:	4610      	mov	r0, r2
 8003f8c:	4798      	blx	r3
			}
		}
		HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb8 <HAL_UART_IdleCallback+0xd8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2240      	movs	r2, #64	@ 0x40
 8003f94:	4619      	mov	r1, r3
 8003f96:	4806      	ldr	r0, [pc, #24]	@ (8003fb0 <HAL_UART_IdleCallback+0xd0>)
 8003f98:	f003 fdb7 	bl	8007b0a <HAL_UART_Receive_DMA>

		ParamRefresh = 1;
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_UART_IdleCallback+0xe0>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
	}
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40004800 	.word	0x40004800
 8003fb0:	20000500 	.word	0x20000500
 8003fb4:	20000148 	.word	0x20000148
 8003fb8:	20000144 	.word	0x20000144
 8003fbc:	08008f78 	.word	0x08008f78
 8003fc0:	200005d1 	.word	0x200005d1

08003fc4 <DevMotor_StaGet>:

inline uint8_t DevMotor_StaGet(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
	uint8_t motor_sta = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	71fb      	strb	r3, [r7, #7]

	motor_sta = (DevParamRead.UltraParam.VibraEnableFlg == 0xFFFF) ? 1 : (uint8_t)DevParamRead.UltraParam.VibraEnableFlg;
 8003fce:	4b09      	ldr	r3, [pc, #36]	@ (8003ff4 <DevMotor_StaGet+0x30>)
 8003fd0:	8b5b      	ldrh	r3, [r3, #26]
 8003fd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <DevMotor_StaGet+0x1e>
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <DevMotor_StaGet+0x30>)
 8003fdc:	8b5b      	ldrh	r3, [r3, #26]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	e000      	b.n	8003fe4 <DevMotor_StaGet+0x20>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
	return motor_sta;
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bc80      	pop	{r7}
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	200005d8 	.word	0x200005d8

08003ff8 <DevWork_StimuTimeGet>:

inline uint16_t DevWork_StimuTimeGet(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
	uint16_t stimu_time = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	80fb      	strh	r3, [r7, #6]
	stimu_time = (DevParamRead.UltraParam.StimuTime == 0xFFFF) ? 1500 : DevParamRead.UltraParam.StimuTime;
 8004002:	4b09      	ldr	r3, [pc, #36]	@ (8004028 <DevWork_StimuTimeGet+0x30>)
 8004004:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004006:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800400a:	4293      	cmp	r3, r2
 800400c:	d002      	beq.n	8004014 <DevWork_StimuTimeGet+0x1c>
 800400e:	4b06      	ldr	r3, [pc, #24]	@ (8004028 <DevWork_StimuTimeGet+0x30>)
 8004010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004012:	e001      	b.n	8004018 <DevWork_StimuTimeGet+0x20>
 8004014:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8004018:	80fb      	strh	r3, [r7, #6]
	return stimu_time;
 800401a:	88fb      	ldrh	r3, [r7, #6]
}
 800401c:	4618      	mov	r0, r3
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	bc80      	pop	{r7}
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	200005d8 	.word	0x200005d8

0800402c <DevWork_IdleTimeGet>:

inline uint16_t DevWork_IdleTimeGet(void)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
	uint16_t idle_time = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	80fb      	strh	r3, [r7, #6]

	idle_time = (DevParamRead.UltraParam.IdleTime == 0xFFFF) ? 2500 : DevParamRead.UltraParam.IdleTime;
 8004036:	4b09      	ldr	r3, [pc, #36]	@ (800405c <DevWork_IdleTimeGet+0x30>)
 8004038:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800403a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800403e:	4293      	cmp	r3, r2
 8004040:	d002      	beq.n	8004048 <DevWork_IdleTimeGet+0x1c>
 8004042:	4b06      	ldr	r3, [pc, #24]	@ (800405c <DevWork_IdleTimeGet+0x30>)
 8004044:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004046:	e001      	b.n	800404c <DevWork_IdleTimeGet+0x20>
 8004048:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800404c:	80fb      	strh	r3, [r7, #6]
	return idle_time;
 800404e:	88fb      	ldrh	r3, [r7, #6]
}
 8004050:	4618      	mov	r0, r3
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	200005d8 	.word	0x200005d8

08004060 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004064:	4b08      	ldr	r3, [pc, #32]	@ (8004088 <HAL_Init+0x28>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a07      	ldr	r2, [pc, #28]	@ (8004088 <HAL_Init+0x28>)
 800406a:	f043 0310 	orr.w	r3, r3, #16
 800406e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004070:	2003      	movs	r0, #3
 8004072:	f000 fdaf 	bl	8004bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004076:	200f      	movs	r0, #15
 8004078:	f000 f808 	bl	800408c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800407c:	f7fd faae 	bl	80015dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40022000 	.word	0x40022000

0800408c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004094:	4b12      	ldr	r3, [pc, #72]	@ (80040e0 <HAL_InitTick+0x54>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_InitTick+0x58>)
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	4619      	mov	r1, r3
 800409e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fdc7 	bl	8004c3e <HAL_SYSTICK_Config>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e00e      	b.n	80040d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d80a      	bhi.n	80040d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c0:	2200      	movs	r2, #0
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f000 fd8f 	bl	8004bea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040cc:	4a06      	ldr	r2, [pc, #24]	@ (80040e8 <HAL_InitTick+0x5c>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000000 	.word	0x20000000
 80040e4:	20000150 	.word	0x20000150
 80040e8:	2000014c 	.word	0x2000014c

080040ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040f0:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_IncTick+0x1c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b05      	ldr	r3, [pc, #20]	@ (800410c <HAL_IncTick+0x20>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4413      	add	r3, r2
 80040fc:	4a03      	ldr	r2, [pc, #12]	@ (800410c <HAL_IncTick+0x20>)
 80040fe:	6013      	str	r3, [r2, #0]
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	20000150 	.word	0x20000150
 800410c:	200007b0 	.word	0x200007b0

08004110 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return uwTick;
 8004114:	4b02      	ldr	r3, [pc, #8]	@ (8004120 <HAL_GetTick+0x10>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr
 8004120:	200007b0 	.word	0x200007b0

08004124 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800412c:	2300      	movs	r3, #0
 800412e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e0ce      	b.n	80042e4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd f814 	bl	8001190 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb11 	bl	8004790 <ADC_ConversionStop_Disable>
 800416e:	4603      	mov	r3, r0
 8004170:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	f040 80a9 	bne.w	80042d2 <HAL_ADC_Init+0x1ae>
 8004180:	7dfb      	ldrb	r3, [r7, #23]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 80a5 	bne.w	80042d2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004190:	f023 0302 	bic.w	r3, r3, #2
 8004194:	f043 0202 	orr.w	r2, r3, #2
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4951      	ldr	r1, [pc, #324]	@ (80042ec <HAL_ADC_Init+0x1c8>)
 80041a6:	428b      	cmp	r3, r1
 80041a8:	d10a      	bne.n	80041c0 <HAL_ADC_Init+0x9c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041b2:	d002      	beq.n	80041ba <HAL_ADC_Init+0x96>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	69db      	ldr	r3, [r3, #28]
 80041b8:	e004      	b.n	80041c4 <HAL_ADC_Init+0xa0>
 80041ba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80041be:	e001      	b.n	80041c4 <HAL_ADC_Init+0xa0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041c4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	7b1b      	ldrb	r3, [r3, #12]
 80041ca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80041cc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041dc:	d003      	beq.n	80041e6 <HAL_ADC_Init+0xc2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <HAL_ADC_Init+0xc8>
 80041e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041ea:	e000      	b.n	80041ee <HAL_ADC_Init+0xca>
 80041ec:	2300      	movs	r3, #0
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	7d1b      	ldrb	r3, [r3, #20]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d119      	bne.n	8004230 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7b1b      	ldrb	r3, [r3, #12]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	3b01      	subs	r3, #1
 800420a:	035a      	lsls	r2, r3, #13
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	4313      	orrs	r3, r2
 8004210:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004214:	613b      	str	r3, [r7, #16]
 8004216:	e00b      	b.n	8004230 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004228:	f043 0201 	orr.w	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689a      	ldr	r2, [r3, #8]
 800424a:	4b29      	ldr	r3, [pc, #164]	@ (80042f0 <HAL_ADC_Init+0x1cc>)
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	430b      	orrs	r3, r1
 8004256:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004260:	d003      	beq.n	800426a <HAL_ADC_Init+0x146>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d104      	bne.n	8004274 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	3b01      	subs	r3, #1
 8004270:	051b      	lsls	r3, r3, #20
 8004272:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	430a      	orrs	r2, r1
 8004286:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	4b19      	ldr	r3, [pc, #100]	@ (80042f4 <HAL_ADC_Init+0x1d0>)
 8004290:	4013      	ands	r3, r2
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	f043 0201 	orr.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042ae:	e018      	b.n	80042e2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b4:	f023 0312 	bic.w	r3, r3, #18
 80042b8:	f043 0210 	orr.w	r2, r3, #16
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	f043 0201 	orr.w	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80042d0:	e007      	b.n	80042e2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042d6:	f043 0210 	orr.w	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80042e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3718      	adds	r7, #24
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40013c00 	.word	0x40013c00
 80042f0:	ffe1f7fd 	.word	0xffe1f7fd
 80042f4:	ff1f0efe 	.word	0xff1f0efe

080042f8 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a64      	ldr	r2, [pc, #400]	@ (80044a0 <HAL_ADC_Start_DMA+0x1a8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_ADC_Start_DMA+0x24>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a63      	ldr	r2, [pc, #396]	@ (80044a4 <HAL_ADC_Start_DMA+0x1ac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d106      	bne.n	800432a <HAL_ADC_Start_DMA+0x32>
 800431c:	4b60      	ldr	r3, [pc, #384]	@ (80044a0 <HAL_ADC_Start_DMA+0x1a8>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 80b3 	bne.w	8004490 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_ADC_Start_DMA+0x40>
 8004334:	2302      	movs	r3, #2
 8004336:	e0ae      	b.n	8004496 <HAL_ADC_Start_DMA+0x19e>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 f9cb 	bl	80046dc <ADC_Enable>
 8004346:	4603      	mov	r3, r0
 8004348:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 809a 	bne.w	8004486 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004356:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a4e      	ldr	r2, [pc, #312]	@ (80044a4 <HAL_ADC_Start_DMA+0x1ac>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d105      	bne.n	800437c <HAL_ADC_Start_DMA+0x84>
 8004370:	4b4b      	ldr	r3, [pc, #300]	@ (80044a0 <HAL_ADC_Start_DMA+0x1a8>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	2b00      	cmp	r3, #0
 8004394:	d026      	beq.n	80043e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800439e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043a6:	e01d      	b.n	80043e4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ac:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a39      	ldr	r2, [pc, #228]	@ (80044a0 <HAL_ADC_Start_DMA+0x1a8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <HAL_ADC_Start_DMA+0xd0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a38      	ldr	r2, [pc, #224]	@ (80044a4 <HAL_ADC_Start_DMA+0x1ac>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d10d      	bne.n	80043e4 <HAL_ADC_Start_DMA+0xec>
 80043c8:	4b35      	ldr	r3, [pc, #212]	@ (80044a0 <HAL_ADC_Start_DMA+0x1a8>)
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d007      	beq.n	80043e4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d006      	beq.n	80043fe <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f4:	f023 0206 	bic.w	r2, r3, #6
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80043fc:	e002      	b.n	8004404 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4a25      	ldr	r2, [pc, #148]	@ (80044a8 <HAL_ADC_Start_DMA+0x1b0>)
 8004412:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	4a24      	ldr	r2, [pc, #144]	@ (80044ac <HAL_ADC_Start_DMA+0x1b4>)
 800441a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	4a23      	ldr	r2, [pc, #140]	@ (80044b0 <HAL_ADC_Start_DMA+0x1b8>)
 8004422:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f06f 0202 	mvn.w	r2, #2
 800442c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800443c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a18      	ldr	r0, [r3, #32]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	334c      	adds	r3, #76	@ 0x4c
 8004448:	4619      	mov	r1, r3
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f000 fc79 	bl	8004d44 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800445c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004460:	d108      	bne.n	8004474 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004470:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004472:	e00f      	b.n	8004494 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004482:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004484:	e006      	b.n	8004494 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 800448e:	e001      	b.n	8004494 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004494:	7dfb      	ldrb	r3, [r7, #23]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3718      	adds	r7, #24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	40012400 	.word	0x40012400
 80044a4:	40012800 	.word	0x40012800
 80044a8:	08004813 	.word	0x08004813
 80044ac:	0800488f 	.word	0x0800488f
 80044b0:	080048ab 	.word	0x080048ab

080044b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr

080044c6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80044c6:	b480      	push	{r7}
 80044c8:	b083      	sub	sp, #12
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bc80      	pop	{r7}
 80044e8:	4770      	bx	lr
	...

080044ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004504:	2b01      	cmp	r3, #1
 8004506:	d101      	bne.n	800450c <HAL_ADC_ConfigChannel+0x20>
 8004508:	2302      	movs	r3, #2
 800450a:	e0dc      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x1da>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b06      	cmp	r3, #6
 800451a:	d81c      	bhi.n	8004556 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	3b05      	subs	r3, #5
 800452e:	221f      	movs	r2, #31
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	4019      	ands	r1, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	3b05      	subs	r3, #5
 8004548:	fa00 f203 	lsl.w	r2, r0, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	635a      	str	r2, [r3, #52]	@ 0x34
 8004554:	e03c      	b.n	80045d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b0c      	cmp	r3, #12
 800455c:	d81c      	bhi.n	8004598 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	3b23      	subs	r3, #35	@ 0x23
 8004570:	221f      	movs	r2, #31
 8004572:	fa02 f303 	lsl.w	r3, r2, r3
 8004576:	43db      	mvns	r3, r3
 8004578:	4019      	ands	r1, r3
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685a      	ldr	r2, [r3, #4]
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	3b23      	subs	r3, #35	@ 0x23
 800458a:	fa00 f203 	lsl.w	r2, r0, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	631a      	str	r2, [r3, #48]	@ 0x30
 8004596:	e01b      	b.n	80045d0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685a      	ldr	r2, [r3, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	3b41      	subs	r3, #65	@ 0x41
 80045aa:	221f      	movs	r2, #31
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	4019      	ands	r1, r3
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6818      	ldr	r0, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
 80045bc:	4613      	mov	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	3b41      	subs	r3, #65	@ 0x41
 80045c4:	fa00 f203 	lsl.w	r2, r0, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b09      	cmp	r3, #9
 80045d6:	d91c      	bls.n	8004612 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68d9      	ldr	r1, [r3, #12]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4613      	mov	r3, r2
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4413      	add	r3, r2
 80045e8:	3b1e      	subs	r3, #30
 80045ea:	2207      	movs	r2, #7
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	43db      	mvns	r3, r3
 80045f2:	4019      	ands	r1, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6898      	ldr	r0, [r3, #8]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	3b1e      	subs	r3, #30
 8004604:	fa00 f203 	lsl.w	r2, r0, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]
 8004610:	e019      	b.n	8004646 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6919      	ldr	r1, [r3, #16]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	4413      	add	r3, r2
 8004622:	2207      	movs	r2, #7
 8004624:	fa02 f303 	lsl.w	r3, r2, r3
 8004628:	43db      	mvns	r3, r3
 800462a:	4019      	ands	r1, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	6898      	ldr	r0, [r3, #8]
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4613      	mov	r3, r2
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	4413      	add	r3, r2
 800463a:	fa00 f203 	lsl.w	r2, r0, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b10      	cmp	r3, #16
 800464c:	d003      	beq.n	8004656 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004652:	2b11      	cmp	r3, #17
 8004654:	d132      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1d      	ldr	r2, [pc, #116]	@ (80046d0 <HAL_ADC_ConfigChannel+0x1e4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d125      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d126      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800467c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b10      	cmp	r3, #16
 8004684:	d11a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004686:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <HAL_ADC_ConfigChannel+0x1e8>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a13      	ldr	r2, [pc, #76]	@ (80046d8 <HAL_ADC_ConfigChannel+0x1ec>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	0c9a      	lsrs	r2, r3, #18
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800469c:	e002      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3b01      	subs	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f9      	bne.n	800469e <HAL_ADC_ConfigChannel+0x1b2>
 80046aa:	e007      	b.n	80046bc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	f043 0220 	orr.w	r2, r3, #32
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bc80      	pop	{r7}
 80046ce:	4770      	bx	lr
 80046d0:	40012400 	.word	0x40012400
 80046d4:	20000000 	.word	0x20000000
 80046d8:	431bde83 	.word	0x431bde83

080046dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d040      	beq.n	800477c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800470a:	4b1f      	ldr	r3, [pc, #124]	@ (8004788 <ADC_Enable+0xac>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <ADC_Enable+0xb0>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	0c9b      	lsrs	r3, r3, #18
 8004716:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004718:	e002      	b.n	8004720 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	3b01      	subs	r3, #1
 800471e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f9      	bne.n	800471a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004726:	f7ff fcf3 	bl	8004110 <HAL_GetTick>
 800472a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800472c:	e01f      	b.n	800476e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800472e:	f7ff fcef 	bl	8004110 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b02      	cmp	r3, #2
 800473a:	d918      	bls.n	800476e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d011      	beq.n	800476e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	f043 0210 	orr.w	r2, r3, #16
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f043 0201 	orr.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e007      	b.n	800477e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d1d8      	bne.n	800472e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000000 	.word	0x20000000
 800478c:	431bde83 	.word	0x431bde83

08004790 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d12e      	bne.n	8004808 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80047ba:	f7ff fca9 	bl	8004110 <HAL_GetTick>
 80047be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047c0:	e01b      	b.n	80047fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80047c2:	f7ff fca5 	bl	8004110 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d914      	bls.n	80047fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d10d      	bne.n	80047fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e2:	f043 0210 	orr.w	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e007      	b.n	800480a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b01      	cmp	r3, #1
 8004806:	d0dc      	beq.n	80047c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004824:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004828:	2b00      	cmp	r3, #0
 800482a:	d127      	bne.n	800487c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004830:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004842:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004846:	d115      	bne.n	8004874 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800484c:	2b00      	cmp	r3, #0
 800484e:	d111      	bne.n	8004874 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d105      	bne.n	8004874 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff fe1d 	bl	80044b4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800487a:	e004      	b.n	8004886 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	4798      	blx	r3
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f7ff fe12 	bl	80044c6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	f043 0204 	orr.w	r2, r3, #4
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fe01 	bl	80044d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
	...

080048e0 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80048ec:	2300      	movs	r3, #0
 80048ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <HAL_ADCEx_Calibration_Start+0x1e>
 80048fa:	2302      	movs	r3, #2
 80048fc:	e097      	b.n	8004a2e <HAL_ADCEx_Calibration_Start+0x14e>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff ff42 	bl	8004790 <ADC_ConversionStop_Disable>
 800490c:	4603      	mov	r3, r0
 800490e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f7ff fee3 	bl	80046dc <ADC_Enable>
 8004916:	4603      	mov	r3, r0
 8004918:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b00      	cmp	r3, #0
 800491e:	f040 8081 	bne.w	8004a24 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800492a:	f023 0302 	bic.w	r3, r3, #2
 800492e:	f043 0202 	orr.w	r2, r3, #2
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004936:	4b40      	ldr	r3, [pc, #256]	@ (8004a38 <HAL_ADCEx_Calibration_Start+0x158>)
 8004938:	681c      	ldr	r4, [r3, #0]
 800493a:	2002      	movs	r0, #2
 800493c:	f001 ffec 	bl	8006918 <HAL_RCCEx_GetPeriphCLKFreq>
 8004940:	4603      	mov	r3, r0
 8004942:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004946:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004948:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 800494a:	e002      	b.n	8004952 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3b01      	subs	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1f9      	bne.n	800494c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f042 0208 	orr.w	r2, r2, #8
 8004966:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004968:	f7ff fbd2 	bl	8004110 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800496e:	e01b      	b.n	80049a8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004970:	f7ff fbce 	bl	8004110 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b0a      	cmp	r3, #10
 800497c:	d914      	bls.n	80049a8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00d      	beq.n	80049a8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	f023 0312 	bic.w	r3, r3, #18
 8004994:	f043 0210 	orr.w	r2, r3, #16
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e042      	b.n	8004a2e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1dc      	bne.n	8004970 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f042 0204 	orr.w	r2, r2, #4
 80049c4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80049c6:	f7ff fba3 	bl	8004110 <HAL_GetTick>
 80049ca:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80049cc:	e01b      	b.n	8004a06 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80049ce:	f7ff fb9f 	bl	8004110 <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b0a      	cmp	r3, #10
 80049da:	d914      	bls.n	8004a06 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	f023 0312 	bic.w	r3, r3, #18
 80049f2:	f043 0210 	orr.w	r2, r3, #16
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e013      	b.n	8004a2e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0304 	and.w	r3, r3, #4
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1dc      	bne.n	80049ce <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a18:	f023 0303 	bic.w	r3, r3, #3
 8004a1c:	f043 0201 	orr.w	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	371c      	adds	r7, #28
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd90      	pop	{r4, r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000000 	.word	0x20000000

08004a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <__NVIC_SetPriorityGrouping+0x44>)
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a58:	4013      	ands	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a6e:	4a04      	ldr	r2, [pc, #16]	@ (8004a80 <__NVIC_SetPriorityGrouping+0x44>)
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	60d3      	str	r3, [r2, #12]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a88:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <__NVIC_GetPriorityGrouping+0x18>)
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	0a1b      	lsrs	r3, r3, #8
 8004a8e:	f003 0307 	and.w	r3, r3, #7
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bc80      	pop	{r7}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	db0b      	blt.n	8004aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	4906      	ldr	r1, [pc, #24]	@ (8004ad4 <__NVIC_EnableIRQ+0x34>)
 8004aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004abe:	095b      	lsrs	r3, r3, #5
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bc80      	pop	{r7}
 8004ad2:	4770      	bx	lr
 8004ad4:	e000e100 	.word	0xe000e100

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr

08004b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba0:	d301      	bcc.n	8004ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e00f      	b.n	8004bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd0 <SysTick_Config+0x40>)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	3b01      	subs	r3, #1
 8004bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bae:	210f      	movs	r1, #15
 8004bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb4:	f7ff ff90 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <SysTick_Config+0x40>)
 8004bc0:	2207      	movs	r2, #7
 8004bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	e000e010 	.word	0xe000e010

08004bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff ff2d 	bl	8004a3c <__NVIC_SetPriorityGrouping>
}
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b086      	sub	sp, #24
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	60b9      	str	r1, [r7, #8]
 8004bf4:	607a      	str	r2, [r7, #4]
 8004bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004bfc:	f7ff ff42 	bl	8004a84 <__NVIC_GetPriorityGrouping>
 8004c00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	6978      	ldr	r0, [r7, #20]
 8004c08:	f7ff ff90 	bl	8004b2c <NVIC_EncodePriority>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c12:	4611      	mov	r1, r2
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff ff5f 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7ff ff35 	bl	8004aa0 <__NVIC_EnableIRQ>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b082      	sub	sp, #8
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7ff ffa2 	bl	8004b90 <SysTick_Config>
 8004c4c:	4603      	mov	r3, r0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e059      	b.n	8004d22 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <HAL_DMA_Init+0xd4>)
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d80f      	bhi.n	8004c9a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	4b2b      	ldr	r3, [pc, #172]	@ (8004d30 <HAL_DMA_Init+0xd8>)
 8004c82:	4413      	add	r3, r2
 8004c84:	4a2b      	ldr	r2, [pc, #172]	@ (8004d34 <HAL_DMA_Init+0xdc>)
 8004c86:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8a:	091b      	lsrs	r3, r3, #4
 8004c8c:	009a      	lsls	r2, r3, #2
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a28      	ldr	r2, [pc, #160]	@ (8004d38 <HAL_DMA_Init+0xe0>)
 8004c96:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004c98:	e00e      	b.n	8004cb8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	4b26      	ldr	r3, [pc, #152]	@ (8004d3c <HAL_DMA_Init+0xe4>)
 8004ca2:	4413      	add	r3, r2
 8004ca4:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <HAL_DMA_Init+0xdc>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	091b      	lsrs	r3, r3, #4
 8004cac:	009a      	lsls	r2, r3, #2
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a22      	ldr	r2, [pc, #136]	@ (8004d40 <HAL_DMA_Init+0xe8>)
 8004cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004cce:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004cd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ce8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	69db      	ldr	r3, [r3, #28]
 8004cfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	40020407 	.word	0x40020407
 8004d30:	bffdfff8 	.word	0xbffdfff8
 8004d34:	cccccccd 	.word	0xcccccccd
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	bffdfbf8 	.word	0xbffdfbf8
 8004d40:	40020400 	.word	0x40020400

08004d44 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_DMA_Start_IT+0x20>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e04b      	b.n	8004dfc <HAL_DMA_Start_IT+0xb8>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d13a      	bne.n	8004dee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0201 	bic.w	r2, r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68b9      	ldr	r1, [r7, #8]
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 fbb1 	bl	8005504 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f042 020e 	orr.w	r2, r2, #14
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	e00f      	b.n	8004ddc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0204 	bic.w	r2, r2, #4
 8004dca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 020a 	orr.w	r2, r2, #10
 8004dda:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f042 0201 	orr.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]
 8004dec:	e005      	b.n	8004dfa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004df6:	2302      	movs	r3, #2
 8004df8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d008      	beq.n	8004e2e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2204      	movs	r2, #4
 8004e20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e020      	b.n	8004e70 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 020e 	bic.w	r2, r2, #14
 8004e3c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e56:	2101      	movs	r1, #1
 8004e58:	fa01 f202 	lsl.w	r2, r1, r2
 8004e5c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e84:	2300      	movs	r3, #0
 8004e86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d005      	beq.n	8004ea0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2204      	movs	r2, #4
 8004e98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e0d6      	b.n	800504e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f022 020e 	bic.w	r2, r2, #14
 8004eae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0201 	bic.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4b64      	ldr	r3, [pc, #400]	@ (8005058 <HAL_DMA_Abort_IT+0x1dc>)
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d958      	bls.n	8004f7e <HAL_DMA_Abort_IT+0x102>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a62      	ldr	r2, [pc, #392]	@ (800505c <HAL_DMA_Abort_IT+0x1e0>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04f      	beq.n	8004f76 <HAL_DMA_Abort_IT+0xfa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a61      	ldr	r2, [pc, #388]	@ (8005060 <HAL_DMA_Abort_IT+0x1e4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d048      	beq.n	8004f72 <HAL_DMA_Abort_IT+0xf6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8005064 <HAL_DMA_Abort_IT+0x1e8>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <HAL_DMA_Abort_IT+0xf0>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5e      	ldr	r2, [pc, #376]	@ (8005068 <HAL_DMA_Abort_IT+0x1ec>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d038      	beq.n	8004f66 <HAL_DMA_Abort_IT+0xea>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5c      	ldr	r2, [pc, #368]	@ (800506c <HAL_DMA_Abort_IT+0x1f0>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d030      	beq.n	8004f60 <HAL_DMA_Abort_IT+0xe4>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5b      	ldr	r2, [pc, #364]	@ (8005070 <HAL_DMA_Abort_IT+0x1f4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d028      	beq.n	8004f5a <HAL_DMA_Abort_IT+0xde>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	@ (8005058 <HAL_DMA_Abort_IT+0x1dc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d020      	beq.n	8004f54 <HAL_DMA_Abort_IT+0xd8>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a57      	ldr	r2, [pc, #348]	@ (8005074 <HAL_DMA_Abort_IT+0x1f8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d019      	beq.n	8004f50 <HAL_DMA_Abort_IT+0xd4>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a55      	ldr	r2, [pc, #340]	@ (8005078 <HAL_DMA_Abort_IT+0x1fc>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d012      	beq.n	8004f4c <HAL_DMA_Abort_IT+0xd0>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a54      	ldr	r2, [pc, #336]	@ (800507c <HAL_DMA_Abort_IT+0x200>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00a      	beq.n	8004f46 <HAL_DMA_Abort_IT+0xca>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a52      	ldr	r2, [pc, #328]	@ (8005080 <HAL_DMA_Abort_IT+0x204>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d102      	bne.n	8004f40 <HAL_DMA_Abort_IT+0xc4>
 8004f3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f3e:	e01b      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f44:	e018      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f4a:	e015      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f4c:	2310      	movs	r3, #16
 8004f4e:	e013      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e011      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f58:	e00e      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f5a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f5e:	e00b      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f64:	e008      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f6a:	e005      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f70:	e002      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f72:	2310      	movs	r3, #16
 8004f74:	e000      	b.n	8004f78 <HAL_DMA_Abort_IT+0xfc>
 8004f76:	2301      	movs	r3, #1
 8004f78:	4a42      	ldr	r2, [pc, #264]	@ (8005084 <HAL_DMA_Abort_IT+0x208>)
 8004f7a:	6053      	str	r3, [r2, #4]
 8004f7c:	e057      	b.n	800502e <HAL_DMA_Abort_IT+0x1b2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a36      	ldr	r2, [pc, #216]	@ (800505c <HAL_DMA_Abort_IT+0x1e0>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d04f      	beq.n	8005028 <HAL_DMA_Abort_IT+0x1ac>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a34      	ldr	r2, [pc, #208]	@ (8005060 <HAL_DMA_Abort_IT+0x1e4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d048      	beq.n	8005024 <HAL_DMA_Abort_IT+0x1a8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a33      	ldr	r2, [pc, #204]	@ (8005064 <HAL_DMA_Abort_IT+0x1e8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d040      	beq.n	800501e <HAL_DMA_Abort_IT+0x1a2>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a31      	ldr	r2, [pc, #196]	@ (8005068 <HAL_DMA_Abort_IT+0x1ec>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d038      	beq.n	8005018 <HAL_DMA_Abort_IT+0x19c>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a30      	ldr	r2, [pc, #192]	@ (800506c <HAL_DMA_Abort_IT+0x1f0>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d030      	beq.n	8005012 <HAL_DMA_Abort_IT+0x196>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8005070 <HAL_DMA_Abort_IT+0x1f4>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d028      	beq.n	800500c <HAL_DMA_Abort_IT+0x190>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a26      	ldr	r2, [pc, #152]	@ (8005058 <HAL_DMA_Abort_IT+0x1dc>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d020      	beq.n	8005006 <HAL_DMA_Abort_IT+0x18a>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005074 <HAL_DMA_Abort_IT+0x1f8>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d019      	beq.n	8005002 <HAL_DMA_Abort_IT+0x186>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a29      	ldr	r2, [pc, #164]	@ (8005078 <HAL_DMA_Abort_IT+0x1fc>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d012      	beq.n	8004ffe <HAL_DMA_Abort_IT+0x182>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a27      	ldr	r2, [pc, #156]	@ (800507c <HAL_DMA_Abort_IT+0x200>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_DMA_Abort_IT+0x17c>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a26      	ldr	r2, [pc, #152]	@ (8005080 <HAL_DMA_Abort_IT+0x204>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d102      	bne.n	8004ff2 <HAL_DMA_Abort_IT+0x176>
 8004fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ff0:	e01b      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8004ff2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004ff6:	e018      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8004ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ffc:	e015      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8004ffe:	2310      	movs	r3, #16
 8005000:	e013      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005002:	2301      	movs	r3, #1
 8005004:	e011      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005006:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800500a:	e00e      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 800500c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005010:	e00b      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005012:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005016:	e008      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800501c:	e005      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 800501e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005022:	e002      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005024:	2310      	movs	r3, #16
 8005026:	e000      	b.n	800502a <HAL_DMA_Abort_IT+0x1ae>
 8005028:	2301      	movs	r3, #1
 800502a:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <HAL_DMA_Abort_IT+0x20c>)
 800502c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	4798      	blx	r3
    } 
  }
  return status;
 800504e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40020080 	.word	0x40020080
 800505c:	40020008 	.word	0x40020008
 8005060:	4002001c 	.word	0x4002001c
 8005064:	40020030 	.word	0x40020030
 8005068:	40020044 	.word	0x40020044
 800506c:	40020058 	.word	0x40020058
 8005070:	4002006c 	.word	0x4002006c
 8005074:	40020408 	.word	0x40020408
 8005078:	4002041c 	.word	0x4002041c
 800507c:	40020430 	.word	0x40020430
 8005080:	40020444 	.word	0x40020444
 8005084:	40020400 	.word	0x40020400
 8005088:	40020000 	.word	0x40020000

0800508c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b084      	sub	sp, #16
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	2204      	movs	r2, #4
 80050aa:	409a      	lsls	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80f1 	beq.w	8005298 <HAL_DMA_IRQHandler+0x20c>
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80eb 	beq.w	8005298 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0320 	and.w	r3, r3, #32
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d107      	bne.n	80050e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0204 	bic.w	r2, r2, #4
 80050de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005264 <HAL_DMA_IRQHandler+0x1d8>)
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d958      	bls.n	800519e <HAL_DMA_IRQHandler+0x112>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a5d      	ldr	r2, [pc, #372]	@ (8005268 <HAL_DMA_IRQHandler+0x1dc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d04f      	beq.n	8005196 <HAL_DMA_IRQHandler+0x10a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a5c      	ldr	r2, [pc, #368]	@ (800526c <HAL_DMA_IRQHandler+0x1e0>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d048      	beq.n	8005192 <HAL_DMA_IRQHandler+0x106>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a5a      	ldr	r2, [pc, #360]	@ (8005270 <HAL_DMA_IRQHandler+0x1e4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d040      	beq.n	800518c <HAL_DMA_IRQHandler+0x100>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a59      	ldr	r2, [pc, #356]	@ (8005274 <HAL_DMA_IRQHandler+0x1e8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d038      	beq.n	8005186 <HAL_DMA_IRQHandler+0xfa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a57      	ldr	r2, [pc, #348]	@ (8005278 <HAL_DMA_IRQHandler+0x1ec>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d030      	beq.n	8005180 <HAL_DMA_IRQHandler+0xf4>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a56      	ldr	r2, [pc, #344]	@ (800527c <HAL_DMA_IRQHandler+0x1f0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d028      	beq.n	800517a <HAL_DMA_IRQHandler+0xee>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a4d      	ldr	r2, [pc, #308]	@ (8005264 <HAL_DMA_IRQHandler+0x1d8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d020      	beq.n	8005174 <HAL_DMA_IRQHandler+0xe8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a52      	ldr	r2, [pc, #328]	@ (8005280 <HAL_DMA_IRQHandler+0x1f4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d019      	beq.n	8005170 <HAL_DMA_IRQHandler+0xe4>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a50      	ldr	r2, [pc, #320]	@ (8005284 <HAL_DMA_IRQHandler+0x1f8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d012      	beq.n	800516c <HAL_DMA_IRQHandler+0xe0>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a4f      	ldr	r2, [pc, #316]	@ (8005288 <HAL_DMA_IRQHandler+0x1fc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00a      	beq.n	8005166 <HAL_DMA_IRQHandler+0xda>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a4d      	ldr	r2, [pc, #308]	@ (800528c <HAL_DMA_IRQHandler+0x200>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d102      	bne.n	8005160 <HAL_DMA_IRQHandler+0xd4>
 800515a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800515e:	e01b      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005160:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005164:	e018      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800516a:	e015      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 800516c:	2340      	movs	r3, #64	@ 0x40
 800516e:	e013      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005170:	2304      	movs	r3, #4
 8005172:	e011      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005174:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005178:	e00e      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 800517a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800517e:	e00b      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005180:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005184:	e008      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005186:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800518a:	e005      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 800518c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005190:	e002      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005192:	2340      	movs	r3, #64	@ 0x40
 8005194:	e000      	b.n	8005198 <HAL_DMA_IRQHandler+0x10c>
 8005196:	2304      	movs	r3, #4
 8005198:	4a3d      	ldr	r2, [pc, #244]	@ (8005290 <HAL_DMA_IRQHandler+0x204>)
 800519a:	6053      	str	r3, [r2, #4]
 800519c:	e057      	b.n	800524e <HAL_DMA_IRQHandler+0x1c2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a31      	ldr	r2, [pc, #196]	@ (8005268 <HAL_DMA_IRQHandler+0x1dc>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d04f      	beq.n	8005248 <HAL_DMA_IRQHandler+0x1bc>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2f      	ldr	r2, [pc, #188]	@ (800526c <HAL_DMA_IRQHandler+0x1e0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d048      	beq.n	8005244 <HAL_DMA_IRQHandler+0x1b8>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a2e      	ldr	r2, [pc, #184]	@ (8005270 <HAL_DMA_IRQHandler+0x1e4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d040      	beq.n	800523e <HAL_DMA_IRQHandler+0x1b2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <HAL_DMA_IRQHandler+0x1e8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d038      	beq.n	8005238 <HAL_DMA_IRQHandler+0x1ac>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <HAL_DMA_IRQHandler+0x1ec>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d030      	beq.n	8005232 <HAL_DMA_IRQHandler+0x1a6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a29      	ldr	r2, [pc, #164]	@ (800527c <HAL_DMA_IRQHandler+0x1f0>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d028      	beq.n	800522c <HAL_DMA_IRQHandler+0x1a0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a21      	ldr	r2, [pc, #132]	@ (8005264 <HAL_DMA_IRQHandler+0x1d8>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d020      	beq.n	8005226 <HAL_DMA_IRQHandler+0x19a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a25      	ldr	r2, [pc, #148]	@ (8005280 <HAL_DMA_IRQHandler+0x1f4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d019      	beq.n	8005222 <HAL_DMA_IRQHandler+0x196>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <HAL_DMA_IRQHandler+0x1f8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d012      	beq.n	800521e <HAL_DMA_IRQHandler+0x192>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a22      	ldr	r2, [pc, #136]	@ (8005288 <HAL_DMA_IRQHandler+0x1fc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d00a      	beq.n	8005218 <HAL_DMA_IRQHandler+0x18c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a21      	ldr	r2, [pc, #132]	@ (800528c <HAL_DMA_IRQHandler+0x200>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d102      	bne.n	8005212 <HAL_DMA_IRQHandler+0x186>
 800520c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005210:	e01b      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005212:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005216:	e018      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800521c:	e015      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 800521e:	2340      	movs	r3, #64	@ 0x40
 8005220:	e013      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005222:	2304      	movs	r3, #4
 8005224:	e011      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005226:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800522a:	e00e      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 800522c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005230:	e00b      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005232:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005236:	e008      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005238:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800523c:	e005      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 800523e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005242:	e002      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005244:	2340      	movs	r3, #64	@ 0x40
 8005246:	e000      	b.n	800524a <HAL_DMA_IRQHandler+0x1be>
 8005248:	2304      	movs	r3, #4
 800524a:	4a12      	ldr	r2, [pc, #72]	@ (8005294 <HAL_DMA_IRQHandler+0x208>)
 800524c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 8136 	beq.w	80054c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005260:	e130      	b.n	80054c4 <HAL_DMA_IRQHandler+0x438>
 8005262:	bf00      	nop
 8005264:	40020080 	.word	0x40020080
 8005268:	40020008 	.word	0x40020008
 800526c:	4002001c 	.word	0x4002001c
 8005270:	40020030 	.word	0x40020030
 8005274:	40020044 	.word	0x40020044
 8005278:	40020058 	.word	0x40020058
 800527c:	4002006c 	.word	0x4002006c
 8005280:	40020408 	.word	0x40020408
 8005284:	4002041c 	.word	0x4002041c
 8005288:	40020430 	.word	0x40020430
 800528c:	40020444 	.word	0x40020444
 8005290:	40020400 	.word	0x40020400
 8005294:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529c:	2202      	movs	r2, #2
 800529e:	409a      	lsls	r2, r3
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80dd 	beq.w	8005464 <HAL_DMA_IRQHandler+0x3d8>
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80d7 	beq.w	8005464 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10b      	bne.n	80052dc <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 020a 	bic.w	r2, r2, #10
 80052d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	4b7b      	ldr	r3, [pc, #492]	@ (80054d0 <HAL_DMA_IRQHandler+0x444>)
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d958      	bls.n	800539a <HAL_DMA_IRQHandler+0x30e>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a79      	ldr	r2, [pc, #484]	@ (80054d4 <HAL_DMA_IRQHandler+0x448>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d04f      	beq.n	8005392 <HAL_DMA_IRQHandler+0x306>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a78      	ldr	r2, [pc, #480]	@ (80054d8 <HAL_DMA_IRQHandler+0x44c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d048      	beq.n	800538e <HAL_DMA_IRQHandler+0x302>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a76      	ldr	r2, [pc, #472]	@ (80054dc <HAL_DMA_IRQHandler+0x450>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d040      	beq.n	8005388 <HAL_DMA_IRQHandler+0x2fc>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a75      	ldr	r2, [pc, #468]	@ (80054e0 <HAL_DMA_IRQHandler+0x454>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d038      	beq.n	8005382 <HAL_DMA_IRQHandler+0x2f6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a73      	ldr	r2, [pc, #460]	@ (80054e4 <HAL_DMA_IRQHandler+0x458>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d030      	beq.n	800537c <HAL_DMA_IRQHandler+0x2f0>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a72      	ldr	r2, [pc, #456]	@ (80054e8 <HAL_DMA_IRQHandler+0x45c>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d028      	beq.n	8005376 <HAL_DMA_IRQHandler+0x2ea>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a69      	ldr	r2, [pc, #420]	@ (80054d0 <HAL_DMA_IRQHandler+0x444>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d020      	beq.n	8005370 <HAL_DMA_IRQHandler+0x2e4>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6e      	ldr	r2, [pc, #440]	@ (80054ec <HAL_DMA_IRQHandler+0x460>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d019      	beq.n	800536c <HAL_DMA_IRQHandler+0x2e0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6c      	ldr	r2, [pc, #432]	@ (80054f0 <HAL_DMA_IRQHandler+0x464>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d012      	beq.n	8005368 <HAL_DMA_IRQHandler+0x2dc>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6b      	ldr	r2, [pc, #428]	@ (80054f4 <HAL_DMA_IRQHandler+0x468>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00a      	beq.n	8005362 <HAL_DMA_IRQHandler+0x2d6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a69      	ldr	r2, [pc, #420]	@ (80054f8 <HAL_DMA_IRQHandler+0x46c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d102      	bne.n	800535c <HAL_DMA_IRQHandler+0x2d0>
 8005356:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800535a:	e01b      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 800535c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005360:	e018      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005362:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005366:	e015      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005368:	2320      	movs	r3, #32
 800536a:	e013      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 800536c:	2302      	movs	r3, #2
 800536e:	e011      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005370:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005374:	e00e      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005376:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800537a:	e00b      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 800537c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005380:	e008      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005382:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005386:	e005      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005388:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800538c:	e002      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 800538e:	2320      	movs	r3, #32
 8005390:	e000      	b.n	8005394 <HAL_DMA_IRQHandler+0x308>
 8005392:	2302      	movs	r3, #2
 8005394:	4a59      	ldr	r2, [pc, #356]	@ (80054fc <HAL_DMA_IRQHandler+0x470>)
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e057      	b.n	800544a <HAL_DMA_IRQHandler+0x3be>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4d      	ldr	r2, [pc, #308]	@ (80054d4 <HAL_DMA_IRQHandler+0x448>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d04f      	beq.n	8005444 <HAL_DMA_IRQHandler+0x3b8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a4b      	ldr	r2, [pc, #300]	@ (80054d8 <HAL_DMA_IRQHandler+0x44c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d048      	beq.n	8005440 <HAL_DMA_IRQHandler+0x3b4>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a4a      	ldr	r2, [pc, #296]	@ (80054dc <HAL_DMA_IRQHandler+0x450>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d040      	beq.n	800543a <HAL_DMA_IRQHandler+0x3ae>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a48      	ldr	r2, [pc, #288]	@ (80054e0 <HAL_DMA_IRQHandler+0x454>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d038      	beq.n	8005434 <HAL_DMA_IRQHandler+0x3a8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a47      	ldr	r2, [pc, #284]	@ (80054e4 <HAL_DMA_IRQHandler+0x458>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d030      	beq.n	800542e <HAL_DMA_IRQHandler+0x3a2>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a45      	ldr	r2, [pc, #276]	@ (80054e8 <HAL_DMA_IRQHandler+0x45c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d028      	beq.n	8005428 <HAL_DMA_IRQHandler+0x39c>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a3d      	ldr	r2, [pc, #244]	@ (80054d0 <HAL_DMA_IRQHandler+0x444>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d020      	beq.n	8005422 <HAL_DMA_IRQHandler+0x396>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a41      	ldr	r2, [pc, #260]	@ (80054ec <HAL_DMA_IRQHandler+0x460>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d019      	beq.n	800541e <HAL_DMA_IRQHandler+0x392>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a40      	ldr	r2, [pc, #256]	@ (80054f0 <HAL_DMA_IRQHandler+0x464>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d012      	beq.n	800541a <HAL_DMA_IRQHandler+0x38e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <HAL_DMA_IRQHandler+0x468>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d00a      	beq.n	8005414 <HAL_DMA_IRQHandler+0x388>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3d      	ldr	r2, [pc, #244]	@ (80054f8 <HAL_DMA_IRQHandler+0x46c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d102      	bne.n	800540e <HAL_DMA_IRQHandler+0x382>
 8005408:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800540c:	e01b      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 800540e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005412:	e018      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005414:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005418:	e015      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 800541a:	2320      	movs	r3, #32
 800541c:	e013      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 800541e:	2302      	movs	r3, #2
 8005420:	e011      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005426:	e00e      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005428:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800542c:	e00b      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 800542e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005432:	e008      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005434:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005438:	e005      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 800543a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800543e:	e002      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005440:	2320      	movs	r3, #32
 8005442:	e000      	b.n	8005446 <HAL_DMA_IRQHandler+0x3ba>
 8005444:	2302      	movs	r3, #2
 8005446:	4a2e      	ldr	r2, [pc, #184]	@ (8005500 <HAL_DMA_IRQHandler+0x474>)
 8005448:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005456:	2b00      	cmp	r3, #0
 8005458:	d034      	beq.n	80054c4 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005462:	e02f      	b.n	80054c4 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	2208      	movs	r2, #8
 800546a:	409a      	lsls	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4013      	ands	r3, r2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d028      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x43a>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 020e 	bic.w	r2, r2, #14
 800548c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005496:	2101      	movs	r1, #1
 8005498:	fa01 f202 	lsl.w	r2, r1, r2
 800549c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
    }
  }
  return;
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
}
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40020080 	.word	0x40020080
 80054d4:	40020008 	.word	0x40020008
 80054d8:	4002001c 	.word	0x4002001c
 80054dc:	40020030 	.word	0x40020030
 80054e0:	40020044 	.word	0x40020044
 80054e4:	40020058 	.word	0x40020058
 80054e8:	4002006c 	.word	0x4002006c
 80054ec:	40020408 	.word	0x40020408
 80054f0:	4002041c 	.word	0x4002041c
 80054f4:	40020430 	.word	0x40020430
 80054f8:	40020444 	.word	0x40020444
 80054fc:	40020400 	.word	0x40020400
 8005500:	40020000 	.word	0x40020000

08005504 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800551a:	2101      	movs	r1, #1
 800551c:	fa01 f202 	lsl.w	r2, r1, r2
 8005520:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b10      	cmp	r3, #16
 8005530:	d108      	bne.n	8005544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005542:	e007      	b.n	8005554 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	60da      	str	r2, [r3, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr
	...

08005560 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005572:	2300      	movs	r3, #0
 8005574:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005576:	2300      	movs	r3, #0
 8005578:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800557a:	4b3d      	ldr	r3, [pc, #244]	@ (8005670 <HAL_FLASH_Program+0x110>)
 800557c:	7e1b      	ldrb	r3, [r3, #24]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_FLASH_Program+0x26>
 8005582:	2302      	movs	r3, #2
 8005584:	e070      	b.n	8005668 <HAL_FLASH_Program+0x108>
 8005586:	4b3a      	ldr	r3, [pc, #232]	@ (8005670 <HAL_FLASH_Program+0x110>)
 8005588:	2201      	movs	r2, #1
 800558a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a39      	ldr	r2, [pc, #228]	@ (8005674 <HAL_FLASH_Program+0x114>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d806      	bhi.n	80055a2 <HAL_FLASH_Program+0x42>
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005594:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005598:	f000 f8e8 	bl	800576c <FLASH_WaitForLastOperation>
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]
 80055a0:	e005      	b.n	80055ae <HAL_FLASH_Program+0x4e>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 80055a2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80055a6:	f000 f927 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 80055aa:	4603      	mov	r3, r0
 80055ac:	75fb      	strb	r3, [r7, #23]
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d155      	bne.n	8005660 <HAL_FLASH_Program+0x100>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <HAL_FLASH_Program+0x60>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	757b      	strb	r3, [r7, #21]
 80055be:	e007      	b.n	80055d0 <HAL_FLASH_Program+0x70>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d102      	bne.n	80055cc <HAL_FLASH_Program+0x6c>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80055c6:	2302      	movs	r3, #2
 80055c8:	757b      	strb	r3, [r7, #21]
 80055ca:	e001      	b.n	80055d0 <HAL_FLASH_Program+0x70>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80055cc:	2304      	movs	r3, #4
 80055ce:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80055d0:	2300      	movs	r3, #0
 80055d2:	75bb      	strb	r3, [r7, #22]
 80055d4:	e03e      	b.n	8005654 <HAL_FLASH_Program+0xf4>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80055d6:	7dbb      	ldrb	r3, [r7, #22]
 80055d8:	005a      	lsls	r2, r3, #1
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	eb02 0c03 	add.w	ip, r2, r3
 80055e0:	7dbb      	ldrb	r3, [r7, #22]
 80055e2:	0119      	lsls	r1, r3, #4
 80055e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055e8:	f1c1 0620 	rsb	r6, r1, #32
 80055ec:	f1a1 0020 	sub.w	r0, r1, #32
 80055f0:	fa22 f401 	lsr.w	r4, r2, r1
 80055f4:	fa03 f606 	lsl.w	r6, r3, r6
 80055f8:	4334      	orrs	r4, r6
 80055fa:	fa23 f000 	lsr.w	r0, r3, r0
 80055fe:	4304      	orrs	r4, r0
 8005600:	fa23 f501 	lsr.w	r5, r3, r1
 8005604:	b2a3      	uxth	r3, r4
 8005606:	4619      	mov	r1, r3
 8005608:	4660      	mov	r0, ip
 800560a:	f000 f887 	bl	800571c <FLASH_Program_HalfWord>

#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_FLASH_Program+0x114>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d80c      	bhi.n	8005630 <HAL_FLASH_Program+0xd0>
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005616:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800561a:	f000 f8a7 	bl	800576c <FLASH_WaitForLastOperation>
 800561e:	4603      	mov	r3, r0
 8005620:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005622:	4b15      	ldr	r3, [pc, #84]	@ (8005678 <HAL_FLASH_Program+0x118>)
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <HAL_FLASH_Program+0x118>)
 8005628:	f023 0301 	bic.w	r3, r3, #1
 800562c:	6113      	str	r3, [r2, #16]
 800562e:	e00b      	b.n	8005648 <HAL_FLASH_Program+0xe8>
#if defined(FLASH_BANK2_END)
      }
      else
      {
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8005630:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005634:	f000 f8e0 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 8005638:	4603      	mov	r3, r0
 800563a:	75fb      	strb	r3, [r7, #23]
        
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 800563c:	4b0e      	ldr	r3, [pc, #56]	@ (8005678 <HAL_FLASH_Program+0x118>)
 800563e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005640:	4a0d      	ldr	r2, [pc, #52]	@ (8005678 <HAL_FLASH_Program+0x118>)
 8005642:	f023 0301 	bic.w	r3, r3, #1
 8005646:	6513      	str	r3, [r2, #80]	@ 0x50
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d107      	bne.n	800565e <HAL_FLASH_Program+0xfe>
    for (index = 0U; index < nbiterations; index++)
 800564e:	7dbb      	ldrb	r3, [r7, #22]
 8005650:	3301      	adds	r3, #1
 8005652:	75bb      	strb	r3, [r7, #22]
 8005654:	7dba      	ldrb	r2, [r7, #22]
 8005656:	7d7b      	ldrb	r3, [r7, #21]
 8005658:	429a      	cmp	r2, r3
 800565a:	d3bc      	bcc.n	80055d6 <HAL_FLASH_Program+0x76>
 800565c:	e000      	b.n	8005660 <HAL_FLASH_Program+0x100>
      {
        break;
 800565e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005660:	4b03      	ldr	r3, [pc, #12]	@ (8005670 <HAL_FLASH_Program+0x110>)
 8005662:	2200      	movs	r2, #0
 8005664:	761a      	strb	r2, [r3, #24]

  return status;
 8005666:	7dfb      	ldrb	r3, [r7, #23]
}
 8005668:	4618      	mov	r0, r3
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005670:	200007b8 	.word	0x200007b8
 8005674:	0807ffff 	.word	0x0807ffff
 8005678:	40022000 	.word	0x40022000

0800567c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005686:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005692:	4b14      	ldr	r3, [pc, #80]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 8005694:	4a14      	ldr	r2, [pc, #80]	@ (80056e8 <HAL_FLASH_Unlock+0x6c>)
 8005696:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005698:	4b12      	ldr	r3, [pc, #72]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 800569a:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <HAL_FLASH_Unlock+0x70>)
 800569c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800569e:	4b11      	ldr	r3, [pc, #68]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	71fb      	strb	r3, [r7, #7]
    }
  }
#if defined(FLASH_BANK2_END)
  if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 80056b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00d      	beq.n	80056d6 <HAL_FLASH_Unlock+0x5a>
  {
    /* Authorize the FLASH BANK2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 80056ba:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 80056bc:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <HAL_FLASH_Unlock+0x6c>)
 80056be:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 80056c0:	4b08      	ldr	r3, [pc, #32]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 80056c2:	4a0a      	ldr	r2, [pc, #40]	@ (80056ec <HAL_FLASH_Unlock+0x70>)
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Verify Flash BANK2 is unlocked */
    if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 80056c6:	4b07      	ldr	r3, [pc, #28]	@ (80056e4 <HAL_FLASH_Unlock+0x68>)
 80056c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_FLASH_Unlock+0x5a>
    {
      status = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80056d6:	79fb      	ldrb	r3, [r7, #7]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	40022000 	.word	0x40022000
 80056e8:	45670123 	.word	0x45670123
 80056ec:	cdef89ab 	.word	0xcdef89ab

080056f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80056f4:	4b08      	ldr	r3, [pc, #32]	@ (8005718 <HAL_FLASH_Lock+0x28>)
 80056f6:	691b      	ldr	r3, [r3, #16]
 80056f8:	4a07      	ldr	r2, [pc, #28]	@ (8005718 <HAL_FLASH_Lock+0x28>)
 80056fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056fe:	6113      	str	r3, [r2, #16]
  
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
 8005700:	4b05      	ldr	r3, [pc, #20]	@ (8005718 <HAL_FLASH_Lock+0x28>)
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	4a04      	ldr	r2, [pc, #16]	@ (8005718 <HAL_FLASH_Lock+0x28>)
 8005706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800570a:	6513      	str	r3, [r2, #80]	@ 0x50

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	46bd      	mov	sp, r7
 8005712:	bc80      	pop	{r7}
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40022000 	.word	0x40022000

0800571c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005728:	4b0d      	ldr	r3, [pc, #52]	@ (8005760 <FLASH_Program_HalfWord+0x44>)
 800572a:	2200      	movs	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
  
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a0c      	ldr	r2, [pc, #48]	@ (8005764 <FLASH_Program_HalfWord+0x48>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d806      	bhi.n	8005744 <FLASH_Program_HalfWord+0x28>
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005736:	4b0c      	ldr	r3, [pc, #48]	@ (8005768 <FLASH_Program_HalfWord+0x4c>)
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	4a0b      	ldr	r2, [pc, #44]	@ (8005768 <FLASH_Program_HalfWord+0x4c>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6113      	str	r3, [r2, #16]
 8005742:	e005      	b.n	8005750 <FLASH_Program_HalfWord+0x34>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
 8005744:	4b08      	ldr	r3, [pc, #32]	@ (8005768 <FLASH_Program_HalfWord+0x4c>)
 8005746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005748:	4a07      	ldr	r2, [pc, #28]	@ (8005768 <FLASH_Program_HalfWord+0x4c>)
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	887a      	ldrh	r2, [r7, #2]
 8005754:	801a      	strh	r2, [r3, #0]
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	200007b8 	.word	0x200007b8
 8005764:	0807ffff 	.word	0x0807ffff
 8005768:	40022000 	.word	0x40022000

0800576c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005774:	f7fe fccc 	bl	8004110 <HAL_GetTick>
 8005778:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800577a:	e010      	b.n	800579e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005782:	d00c      	beq.n	800579e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d007      	beq.n	800579a <FLASH_WaitForLastOperation+0x2e>
 800578a:	f7fe fcc1 	bl	8004110 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d201      	bcs.n	800579e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e025      	b.n	80057ea <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800579e:	4b15      	ldr	r3, [pc, #84]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e8      	bne.n	800577c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80057aa:	4b12      	ldr	r3, [pc, #72]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0320 	and.w	r3, r3, #32
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d002      	beq.n	80057bc <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80057b6:	4b0f      	ldr	r3, [pc, #60]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057b8:	2220      	movs	r2, #32
 80057ba:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80057bc:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10b      	bne.n	80057e0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057ca:	69db      	ldr	r3, [r3, #28]
 80057cc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80057d4:	4b07      	ldr	r3, [pc, #28]	@ (80057f4 <FLASH_WaitForLastOperation+0x88>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80057e0:	f000 f84a 	bl	8005878 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	40022000 	.word	0x40022000

080057f8 <FLASH_WaitForLastOperationBank2>:
  * @brief  Wait for a FLASH BANK2 operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)
{ 
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005800:	f7fe fc86 	bl	8004110 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 8005806:	e010      	b.n	800582a <FLASH_WaitForLastOperationBank2+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580e:	d00c      	beq.n	800582a <FLASH_WaitForLastOperationBank2+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d007      	beq.n	8005826 <FLASH_WaitForLastOperationBank2+0x2e>
 8005816:	f7fe fc7b 	bl	8004110 <HAL_GetTick>
 800581a:	4602      	mov	r2, r0
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	429a      	cmp	r2, r3
 8005824:	d201      	bcs.n	800582a <FLASH_WaitForLastOperationBank2+0x32>
      {
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e01f      	b.n	800586a <FLASH_WaitForLastOperationBank2+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 800582a:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <FLASH_WaitForLastOperationBank2+0x7c>)
 800582c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e8      	bne.n	8005808 <FLASH_WaitForLastOperationBank2+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK2))
 8005836:	4b0f      	ldr	r3, [pc, #60]	@ (8005874 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800583a:	f003 0320 	and.w	r3, r3, #32
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <FLASH_WaitForLastOperationBank2+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 8005842:	4b0c      	ldr	r3, [pc, #48]	@ (8005874 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005844:	2220      	movs	r2, #32
 8005846:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 8005848:	4b0a      	ldr	r3, [pc, #40]	@ (8005874 <FLASH_WaitForLastOperationBank2+0x7c>)
 800584a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800584c:	f003 0310 	and.w	r3, r3, #16
 8005850:	2b00      	cmp	r3, #0
 8005852:	d105      	bne.n	8005860 <FLASH_WaitForLastOperationBank2+0x68>
 8005854:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005858:	f003 0304 	and.w	r3, r3, #4
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <FLASH_WaitForLastOperationBank2+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005860:	f000 f80a 	bl	8005878 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <FLASH_WaitForLastOperationBank2+0x72>
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005868:	2300      	movs	r3, #0
  
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	40022000 	.word	0x40022000

08005878 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800587e:	2300      	movs	r3, #0
 8005880:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
 8005882:	4b30      	ldr	r3, [pc, #192]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d105      	bne.n	800589a <FLASH_SetErrorCode+0x22>
 800588e:	4b2d      	ldr	r3, [pc, #180]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 8005890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005892:	f003 0310 	and.w	r3, r3, #16
 8005896:	2b00      	cmp	r3, #0
 8005898:	d009      	beq.n	80058ae <FLASH_SetErrorCode+0x36>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800589a:	4b2b      	ldr	r3, [pc, #172]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	4a29      	ldr	r2, [pc, #164]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 80058a4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f043 1310 	orr.w	r3, r3, #1048592	@ 0x100010
 80058ac:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_WRPERR;
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 80058ae:	4b25      	ldr	r3, [pc, #148]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0304 	and.w	r3, r3, #4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d105      	bne.n	80058c6 <FLASH_SetErrorCode+0x4e>
 80058ba:	4b22      	ldr	r3, [pc, #136]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 80058bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058be:	f003 0304 	and.w	r3, r3, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <FLASH_SetErrorCode+0x62>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80058c6:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 80058d0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f043 1304 	orr.w	r3, r3, #262148	@ 0x40004
 80058d8:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_PGERR;
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80058da:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00b      	beq.n	80058fe <FLASH_SetErrorCode+0x86>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f043 0304 	orr.w	r3, r3, #4
 80058ee:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <FLASH_SetErrorCode+0xd0>)
 80058f0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058f2:	4b14      	ldr	r3, [pc, #80]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	4a13      	ldr	r2, [pc, #76]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f240 1201 	movw	r2, #257	@ 0x101
 8005904:	4293      	cmp	r3, r2
 8005906:	d106      	bne.n	8005916 <FLASH_SetErrorCode+0x9e>
 8005908:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	4a0d      	ldr	r2, [pc, #52]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 800590e:	f023 0301 	bic.w	r3, r3, #1
 8005912:	61d3      	str	r3, [r2, #28]
}  
 8005914:	e011      	b.n	800593a <FLASH_SetErrorCode+0xc2>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 800591c:	2b00      	cmp	r3, #0
 800591e:	d004      	beq.n	800592a <FLASH_SetErrorCode+0xb2>
 8005920:	4a08      	ldr	r2, [pc, #32]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 8005928:	60d3      	str	r3, [r2, #12]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	0c1b      	lsrs	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <FLASH_SetErrorCode+0xc2>
 8005932:	4a04      	ldr	r2, [pc, #16]	@ (8005944 <FLASH_SetErrorCode+0xcc>)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	64d3      	str	r3, [r2, #76]	@ 0x4c
}  
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr
 8005944:	40022000 	.word	0x40022000
 8005948:	200007b8 	.word	0x200007b8

0800594c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800595e:	4b73      	ldr	r3, [pc, #460]	@ (8005b2c <HAL_FLASHEx_Erase+0x1e0>)
 8005960:	7e1b      	ldrb	r3, [r3, #24]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_FLASHEx_Erase+0x1e>
 8005966:	2302      	movs	r3, #2
 8005968:	e0db      	b.n	8005b22 <HAL_FLASHEx_Erase+0x1d6>
 800596a:	4b70      	ldr	r3, [pc, #448]	@ (8005b2c <HAL_FLASHEx_Erase+0x1e0>)
 800596c:	2201      	movs	r2, #1
 800596e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d166      	bne.n	8005a46 <HAL_FLASHEx_Erase+0xfa>
  {
#if defined(FLASH_BANK2_END)
    if (pEraseInit->Banks == FLASH_BANK_BOTH)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	2b03      	cmp	r3, #3
 800597e:	d12f      	bne.n	80059e0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Mass Erase requested for Bank1 and Bank2 */
      /* Wait for last operation to be completed */
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8005980:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005984:	f7ff fef2 	bl	800576c <FLASH_WaitForLastOperation>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	f040 80c5 	bne.w	8005b1a <HAL_FLASHEx_Erase+0x1ce>
          (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 8005990:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005994:	f7ff ff30 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 8005998:	4603      	mov	r3, r0
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 800599a:	2b00      	cmp	r3, #0
 800599c:	f040 80bd 	bne.w	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_BOTH);
 80059a0:	2003      	movs	r0, #3
 80059a2:	f000 f8c9 	bl	8005b38 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 80059a6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059aa:	f7ff fedf 	bl	800576c <FLASH_WaitForLastOperation>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d108      	bne.n	80059c6 <HAL_FLASHEx_Erase+0x7a>
            (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 80059b4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059b8:	f7ff ff1e 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 80059bc:	4603      	mov	r3, r0
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_FLASHEx_Erase+0x7a>
        {
          status = HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	73fb      	strb	r3, [r7, #15]
        }
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80059c6:	4b5a      	ldr	r3, [pc, #360]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	4a59      	ldr	r2, [pc, #356]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 80059cc:	f023 0304 	bic.w	r3, r3, #4
 80059d0:	6113      	str	r3, [r2, #16]
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 80059d2:	4b57      	ldr	r3, [pc, #348]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	4a56      	ldr	r2, [pc, #344]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 80059d8:	f023 0304 	bic.w	r3, r3, #4
 80059dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80059de:	e09c      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      }
    }
    else if (pEraseInit->Banks == FLASH_BANK_2)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d117      	bne.n	8005a18 <HAL_FLASHEx_Erase+0xcc>
    {
      /* Mass Erase requested for Bank2 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80059e8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80059ec:	f7ff ff04 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f040 8091 	bne.w	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_2);
 80059f8:	2002      	movs	r0, #2
 80059fa:	f000 f89d 	bl	8005b38 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 80059fe:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a02:	f7ff fef9 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 8005a06:	4603      	mov	r3, r0
 8005a08:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 8005a0a:	4b49      	ldr	r3, [pc, #292]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0e:	4a48      	ldr	r2, [pc, #288]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a10:	f023 0304 	bic.w	r3, r3, #4
 8005a14:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a16:	e080      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005a18:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a1c:	f7ff fea6 	bl	800576c <FLASH_WaitForLastOperation>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d179      	bne.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8005a26:	2001      	movs	r0, #1
 8005a28:	f000 f886 	bl	8005b38 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a2c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a30:	f7ff fe9c 	bl	800576c <FLASH_WaitForLastOperation>
 8005a34:	4603      	mov	r3, r0
 8005a36:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8005a38:	4b3d      	ldr	r3, [pc, #244]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a3e:	f023 0304 	bic.w	r3, r3, #4
 8005a42:	6113      	str	r3, [r2, #16]
 8005a44:	e069      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
#if defined(FLASH_BANK2_END)
    /* Page Erase requested on address located on bank2 */
    if(pEraseInit->PageAddress > FLASH_BANK1_END)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4a3a      	ldr	r2, [pc, #232]	@ (8005b34 <HAL_FLASHEx_Erase+0x1e8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d932      	bls.n	8005ab6 <HAL_FLASHEx_Erase+0x16a>
    {   
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005a50:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a54:	f7ff fed0 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d15d      	bne.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f04f 32ff 	mov.w	r2, #4294967295
 8005a64:	601a      	str	r2, [r3, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	e019      	b.n	8005aa2 <HAL_FLASHEx_Erase+0x156>
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f000 f8aa 	bl	8005bc8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a74:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005a78:	f7ff febe 	bl	80057f8 <FLASH_WaitForLastOperationBank2>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 8005a80:	4b2b      	ldr	r3, [pc, #172]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a84:	4a2a      	ldr	r2, [pc, #168]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005a86:	f023 0302 	bic.w	r3, r3, #2
 8005a8a:	6513      	str	r3, [r2, #80]	@ 0x50
          
          if (status != HAL_OK)
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <HAL_FLASHEx_Erase+0x14e>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	601a      	str	r2, [r3, #0]
            break;
 8005a98:	e03f      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa0:	60bb      	str	r3, [r7, #8]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	02db      	lsls	r3, r3, #11
 8005aac:	4413      	add	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d3dc      	bcc.n	8005a6e <HAL_FLASHEx_Erase+0x122>
 8005ab4:	e031      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8005ab6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005aba:	f7ff fe57 	bl	800576c <FLASH_WaitForLastOperation>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d12a      	bne.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aca:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	e019      	b.n	8005b08 <HAL_FLASHEx_Erase+0x1bc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8005ad4:	68b8      	ldr	r0, [r7, #8]
 8005ad6:	f000 f877 	bl	8005bc8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ada:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ade:	f7ff fe45 	bl	800576c <FLASH_WaitForLastOperation>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8005ae6:	4b12      	ldr	r3, [pc, #72]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	4a11      	ldr	r2, [pc, #68]	@ (8005b30 <HAL_FLASHEx_Erase+0x1e4>)
 8005aec:	f023 0302 	bic.w	r3, r3, #2
 8005af0:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8005af2:	7bfb      	ldrb	r3, [r7, #15]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d003      	beq.n	8005b00 <HAL_FLASHEx_Erase+0x1b4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	68ba      	ldr	r2, [r7, #8]
 8005afc:	601a      	str	r2, [r3, #0]
            break;
 8005afe:	e00c      	b.n	8005b1a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b06:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	02da      	lsls	r2, r3, #11
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	4413      	add	r3, r2
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3dc      	bcc.n	8005ad4 <HAL_FLASHEx_Erase+0x188>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005b1a:	4b04      	ldr	r3, [pc, #16]	@ (8005b2c <HAL_FLASHEx_Erase+0x1e0>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	761a      	strb	r2, [r3, #24]

  return status;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	200007b8 	.word	0x200007b8
 8005b30:	40022000 	.word	0x40022000
 8005b34:	0807ffff 	.word	0x0807ffff

08005b38 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005b40:	4b1f      	ldr	r3, [pc, #124]	@ (8005bc0 <FLASH_MassErase+0x88>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(Banks == FLASH_BANK_BOTH)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d118      	bne.n	8005b7e <FLASH_MassErase+0x46>
  {
    /* bank1 & bank2 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b52:	f043 0304 	orr.w	r3, r3, #4
 8005b56:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 8005b58:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b5c:	4a19      	ldr	r2, [pc, #100]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b5e:	f043 0304 	orr.w	r3, r3, #4
 8005b62:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005b64:	4b17      	ldr	r3, [pc, #92]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4a16      	ldr	r2, [pc, #88]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b6e:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8005b70:	4b14      	ldr	r3, [pc, #80]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	4a13      	ldr	r2, [pc, #76]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b7a:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_MER);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005b7c:	e01b      	b.n	8005bb6 <FLASH_MassErase+0x7e>
  else if(Banks == FLASH_BANK_2)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d10c      	bne.n	8005b9e <FLASH_MassErase+0x66>
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 8005b84:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b88:	4a0e      	ldr	r2, [pc, #56]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b8a:	f043 0304 	orr.w	r3, r3, #4
 8005b8e:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8005b90:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b94:	4a0b      	ldr	r2, [pc, #44]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005b96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b9a:	6513      	str	r3, [r2, #80]	@ 0x50
}
 8005b9c:	e00b      	b.n	8005bb6 <FLASH_MassErase+0x7e>
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8005b9e:	4b09      	ldr	r3, [pc, #36]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	4a08      	ldr	r2, [pc, #32]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005ba4:	f043 0304 	orr.w	r3, r3, #4
 8005ba8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005baa:	4b06      	ldr	r3, [pc, #24]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	4a05      	ldr	r2, [pc, #20]	@ (8005bc4 <FLASH_MassErase+0x8c>)
 8005bb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bb4:	6113      	str	r3, [r2, #16]
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bc80      	pop	{r7}
 8005bbe:	4770      	bx	lr
 8005bc0:	200007b8 	.word	0x200007b8
 8005bc4:	40022000 	.word	0x40022000

08005bc8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005bd0:	4b15      	ldr	r3, [pc, #84]	@ (8005c28 <FLASH_PageErase+0x60>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(PageAddress > FLASH_BANK1_END)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a14      	ldr	r2, [pc, #80]	@ (8005c2c <FLASH_PageErase+0x64>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d90f      	bls.n	8005bfe <FLASH_PageErase+0x36>
  { 
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR2, FLASH_CR2_PER);
 8005bde:	4b14      	ldr	r3, [pc, #80]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005be2:	4a13      	ldr	r2, [pc, #76]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005be4:	f043 0302 	orr.w	r3, r3, #2
 8005be8:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR2, PageAddress);
 8005bea:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6553      	str	r3, [r2, #84]	@ 0x54
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bfa:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8005bfc:	e00e      	b.n	8005c1c <FLASH_PageErase+0x54>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005c04:	f043 0302 	orr.w	r3, r3, #2
 8005c08:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8005c0a:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8005c10:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	4a06      	ldr	r2, [pc, #24]	@ (8005c30 <FLASH_PageErase+0x68>)
 8005c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c1a:	6113      	str	r3, [r2, #16]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	200007b8 	.word	0x200007b8
 8005c2c:	0807ffff 	.word	0x0807ffff
 8005c30:	40022000 	.word	0x40022000

08005c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b08b      	sub	sp, #44	@ 0x2c
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005c42:	2300      	movs	r3, #0
 8005c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c46:	e179      	b.n	8005f3c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005c48:	2201      	movs	r2, #1
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69fa      	ldr	r2, [r7, #28]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	f040 8168 	bne.w	8005f36 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	4a96      	ldr	r2, [pc, #600]	@ (8005ec4 <HAL_GPIO_Init+0x290>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d05e      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
 8005c70:	4a94      	ldr	r2, [pc, #592]	@ (8005ec4 <HAL_GPIO_Init+0x290>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d875      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005c76:	4a94      	ldr	r2, [pc, #592]	@ (8005ec8 <HAL_GPIO_Init+0x294>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d058      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
 8005c7c:	4a92      	ldr	r2, [pc, #584]	@ (8005ec8 <HAL_GPIO_Init+0x294>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d86f      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005c82:	4a92      	ldr	r2, [pc, #584]	@ (8005ecc <HAL_GPIO_Init+0x298>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d052      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
 8005c88:	4a90      	ldr	r2, [pc, #576]	@ (8005ecc <HAL_GPIO_Init+0x298>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d869      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005c8e:	4a90      	ldr	r2, [pc, #576]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d04c      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
 8005c94:	4a8e      	ldr	r2, [pc, #568]	@ (8005ed0 <HAL_GPIO_Init+0x29c>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d863      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005c9a:	4a8e      	ldr	r2, [pc, #568]	@ (8005ed4 <HAL_GPIO_Init+0x2a0>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d046      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
 8005ca0:	4a8c      	ldr	r2, [pc, #560]	@ (8005ed4 <HAL_GPIO_Init+0x2a0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d85d      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005ca6:	2b12      	cmp	r3, #18
 8005ca8:	d82a      	bhi.n	8005d00 <HAL_GPIO_Init+0xcc>
 8005caa:	2b12      	cmp	r3, #18
 8005cac:	d859      	bhi.n	8005d62 <HAL_GPIO_Init+0x12e>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <HAL_GPIO_Init+0x80>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d1b 	.word	0x08005d1b
 8005cc0:	08005d5d 	.word	0x08005d5d
 8005cc4:	08005d63 	.word	0x08005d63
 8005cc8:	08005d63 	.word	0x08005d63
 8005ccc:	08005d63 	.word	0x08005d63
 8005cd0:	08005d63 	.word	0x08005d63
 8005cd4:	08005d63 	.word	0x08005d63
 8005cd8:	08005d63 	.word	0x08005d63
 8005cdc:	08005d63 	.word	0x08005d63
 8005ce0:	08005d63 	.word	0x08005d63
 8005ce4:	08005d63 	.word	0x08005d63
 8005ce8:	08005d63 	.word	0x08005d63
 8005cec:	08005d63 	.word	0x08005d63
 8005cf0:	08005d63 	.word	0x08005d63
 8005cf4:	08005d63 	.word	0x08005d63
 8005cf8:	08005d11 	.word	0x08005d11
 8005cfc:	08005d25 	.word	0x08005d25
 8005d00:	4a75      	ldr	r2, [pc, #468]	@ (8005ed8 <HAL_GPIO_Init+0x2a4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005d06:	e02c      	b.n	8005d62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	623b      	str	r3, [r7, #32]
          break;
 8005d0e:	e029      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	3304      	adds	r3, #4
 8005d16:	623b      	str	r3, [r7, #32]
          break;
 8005d18:	e024      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	3308      	adds	r3, #8
 8005d20:	623b      	str	r3, [r7, #32]
          break;
 8005d22:	e01f      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	330c      	adds	r3, #12
 8005d2a:	623b      	str	r3, [r7, #32]
          break;
 8005d2c:	e01a      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d102      	bne.n	8005d3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005d36:	2304      	movs	r3, #4
 8005d38:	623b      	str	r3, [r7, #32]
          break;
 8005d3a:	e013      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d105      	bne.n	8005d50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d44:	2308      	movs	r3, #8
 8005d46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	611a      	str	r2, [r3, #16]
          break;
 8005d4e:	e009      	b.n	8005d64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005d50:	2308      	movs	r3, #8
 8005d52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	615a      	str	r2, [r3, #20]
          break;
 8005d5a:	e003      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	623b      	str	r3, [r7, #32]
          break;
 8005d60:	e000      	b.n	8005d64 <HAL_GPIO_Init+0x130>
          break;
 8005d62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	2bff      	cmp	r3, #255	@ 0xff
 8005d68:	d801      	bhi.n	8005d6e <HAL_GPIO_Init+0x13a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	e001      	b.n	8005d72 <HAL_GPIO_Init+0x13e>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	3304      	adds	r3, #4
 8005d72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2bff      	cmp	r3, #255	@ 0xff
 8005d78:	d802      	bhi.n	8005d80 <HAL_GPIO_Init+0x14c>
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	e002      	b.n	8005d86 <HAL_GPIO_Init+0x152>
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	3b08      	subs	r3, #8
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	210f      	movs	r1, #15
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	43db      	mvns	r3, r3
 8005d96:	401a      	ands	r2, r3
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	431a      	orrs	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	f000 80c1 	beq.w	8005f36 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005db4:	4b49      	ldr	r3, [pc, #292]	@ (8005edc <HAL_GPIO_Init+0x2a8>)
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	4a48      	ldr	r2, [pc, #288]	@ (8005edc <HAL_GPIO_Init+0x2a8>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6193      	str	r3, [r2, #24]
 8005dc0:	4b46      	ldr	r3, [pc, #280]	@ (8005edc <HAL_GPIO_Init+0x2a8>)
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005dcc:	4a44      	ldr	r2, [pc, #272]	@ (8005ee0 <HAL_GPIO_Init+0x2ac>)
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	089b      	lsrs	r3, r3, #2
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	f003 0303 	and.w	r3, r3, #3
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	220f      	movs	r2, #15
 8005de4:	fa02 f303 	lsl.w	r3, r2, r3
 8005de8:	43db      	mvns	r3, r3
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	4013      	ands	r3, r2
 8005dee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee4 <HAL_GPIO_Init+0x2b0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01f      	beq.n	8005e38 <HAL_GPIO_Init+0x204>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8005ee8 <HAL_GPIO_Init+0x2b4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d019      	beq.n	8005e34 <HAL_GPIO_Init+0x200>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a3a      	ldr	r2, [pc, #232]	@ (8005eec <HAL_GPIO_Init+0x2b8>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <HAL_GPIO_Init+0x1fc>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a39      	ldr	r2, [pc, #228]	@ (8005ef0 <HAL_GPIO_Init+0x2bc>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00d      	beq.n	8005e2c <HAL_GPIO_Init+0x1f8>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a38      	ldr	r2, [pc, #224]	@ (8005ef4 <HAL_GPIO_Init+0x2c0>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <HAL_GPIO_Init+0x1f4>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a37      	ldr	r2, [pc, #220]	@ (8005ef8 <HAL_GPIO_Init+0x2c4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d101      	bne.n	8005e24 <HAL_GPIO_Init+0x1f0>
 8005e20:	2305      	movs	r3, #5
 8005e22:	e00a      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e24:	2306      	movs	r3, #6
 8005e26:	e008      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	e006      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e004      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e002      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <HAL_GPIO_Init+0x206>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e3c:	f002 0203 	and.w	r2, r2, #3
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	4093      	lsls	r3, r2
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005e4a:	4925      	ldr	r1, [pc, #148]	@ (8005ee0 <HAL_GPIO_Init+0x2ac>)
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	089b      	lsrs	r3, r3, #2
 8005e50:	3302      	adds	r3, #2
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005e64:	4b25      	ldr	r3, [pc, #148]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	4924      	ldr	r1, [pc, #144]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	608b      	str	r3, [r1, #8]
 8005e70:	e006      	b.n	8005e80 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005e72:	4b22      	ldr	r3, [pc, #136]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	4920      	ldr	r1, [pc, #128]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d006      	beq.n	8005e9a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	491a      	ldr	r1, [pc, #104]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60cb      	str	r3, [r1, #12]
 8005e98:	e006      	b.n	8005ea8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e9a:	4b18      	ldr	r3, [pc, #96]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	4916      	ldr	r1, [pc, #88]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d025      	beq.n	8005f00 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005eb4:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005eb6:	685a      	ldr	r2, [r3, #4]
 8005eb8:	4910      	ldr	r1, [pc, #64]	@ (8005efc <HAL_GPIO_Init+0x2c8>)
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	604b      	str	r3, [r1, #4]
 8005ec0:	e025      	b.n	8005f0e <HAL_GPIO_Init+0x2da>
 8005ec2:	bf00      	nop
 8005ec4:	10320000 	.word	0x10320000
 8005ec8:	10310000 	.word	0x10310000
 8005ecc:	10220000 	.word	0x10220000
 8005ed0:	10210000 	.word	0x10210000
 8005ed4:	10120000 	.word	0x10120000
 8005ed8:	10110000 	.word	0x10110000
 8005edc:	40021000 	.word	0x40021000
 8005ee0:	40010000 	.word	0x40010000
 8005ee4:	40010800 	.word	0x40010800
 8005ee8:	40010c00 	.word	0x40010c00
 8005eec:	40011000 	.word	0x40011000
 8005ef0:	40011400 	.word	0x40011400
 8005ef4:	40011800 	.word	0x40011800
 8005ef8:	40011c00 	.word	0x40011c00
 8005efc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005f00:	4b15      	ldr	r3, [pc, #84]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	43db      	mvns	r3, r3
 8005f08:	4913      	ldr	r1, [pc, #76]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	490e      	ldr	r1, [pc, #56]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	600b      	str	r3, [r1, #0]
 8005f26:	e006      	b.n	8005f36 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005f28:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	43db      	mvns	r3, r3
 8005f30:	4909      	ldr	r1, [pc, #36]	@ (8005f58 <HAL_GPIO_Init+0x324>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f38:	3301      	adds	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	f47f ae7e 	bne.w	8005c48 <HAL_GPIO_Init+0x14>
  }
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	372c      	adds	r7, #44	@ 0x2c
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr
 8005f58:	40010400 	.word	0x40010400

08005f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	460b      	mov	r3, r1
 8005f66:	807b      	strh	r3, [r7, #2]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f6c:	787b      	ldrb	r3, [r7, #1]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f72:	887a      	ldrh	r2, [r7, #2]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005f78:	e003      	b.n	8005f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005f7a:	887b      	ldrh	r3, [r7, #2]
 8005f7c:	041a      	lsls	r2, r3, #16
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	611a      	str	r2, [r3, #16]
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr

08005f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b086      	sub	sp, #24
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e272      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8087 	beq.w	80060ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fac:	4b92      	ldr	r3, [pc, #584]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f003 030c 	and.w	r3, r3, #12
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d00c      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005fb8:	4b8f      	ldr	r3, [pc, #572]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 030c 	and.w	r3, r3, #12
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d112      	bne.n	8005fea <HAL_RCC_OscConfig+0x5e>
 8005fc4:	4b8c      	ldr	r3, [pc, #560]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005fd0:	d10b      	bne.n	8005fea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd2:	4b89      	ldr	r3, [pc, #548]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d06c      	beq.n	80060b8 <HAL_RCC_OscConfig+0x12c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d168      	bne.n	80060b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e24c      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ff2:	d106      	bne.n	8006002 <HAL_RCC_OscConfig+0x76>
 8005ff4:	4b80      	ldr	r3, [pc, #512]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a7f      	ldr	r2, [pc, #508]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8005ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e02e      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10c      	bne.n	8006024 <HAL_RCC_OscConfig+0x98>
 800600a:	4b7b      	ldr	r3, [pc, #492]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a7a      	ldr	r2, [pc, #488]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	4b78      	ldr	r3, [pc, #480]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a77      	ldr	r2, [pc, #476]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800601c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	e01d      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800602c:	d10c      	bne.n	8006048 <HAL_RCC_OscConfig+0xbc>
 800602e:	4b72      	ldr	r3, [pc, #456]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a71      	ldr	r2, [pc, #452]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006034:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	4b6f      	ldr	r3, [pc, #444]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a6e      	ldr	r2, [pc, #440]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	e00b      	b.n	8006060 <HAL_RCC_OscConfig+0xd4>
 8006048:	4b6b      	ldr	r3, [pc, #428]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a6a      	ldr	r2, [pc, #424]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800604e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	4b68      	ldr	r3, [pc, #416]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a67      	ldr	r2, [pc, #412]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800605a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800605e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d013      	beq.n	8006090 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006068:	f7fe f852 	bl	8004110 <HAL_GetTick>
 800606c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800606e:	e008      	b.n	8006082 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006070:	f7fe f84e 	bl	8004110 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	2b64      	cmp	r3, #100	@ 0x64
 800607c:	d901      	bls.n	8006082 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e200      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006082:	4b5d      	ldr	r3, [pc, #372]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d0f0      	beq.n	8006070 <HAL_RCC_OscConfig+0xe4>
 800608e:	e014      	b.n	80060ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006090:	f7fe f83e 	bl	8004110 <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006098:	f7fe f83a 	bl	8004110 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	@ 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e1ec      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060aa:	4b53      	ldr	r3, [pc, #332]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1f0      	bne.n	8006098 <HAL_RCC_OscConfig+0x10c>
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d063      	beq.n	800618e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80060c6:	4b4c      	ldr	r3, [pc, #304]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	f003 030c 	and.w	r3, r3, #12
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00b      	beq.n	80060ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80060d2:	4b49      	ldr	r3, [pc, #292]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 030c 	and.w	r3, r3, #12
 80060da:	2b08      	cmp	r3, #8
 80060dc:	d11c      	bne.n	8006118 <HAL_RCC_OscConfig+0x18c>
 80060de:	4b46      	ldr	r3, [pc, #280]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d116      	bne.n	8006118 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ea:	4b43      	ldr	r3, [pc, #268]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <HAL_RCC_OscConfig+0x176>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d001      	beq.n	8006102 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e1c0      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006102:	4b3d      	ldr	r3, [pc, #244]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4939      	ldr	r1, [pc, #228]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006112:	4313      	orrs	r3, r2
 8006114:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006116:	e03a      	b.n	800618e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d020      	beq.n	8006162 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006120:	4b36      	ldr	r3, [pc, #216]	@ (80061fc <HAL_RCC_OscConfig+0x270>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006126:	f7fd fff3 	bl	8004110 <HAL_GetTick>
 800612a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800612c:	e008      	b.n	8006140 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800612e:	f7fd ffef 	bl	8004110 <HAL_GetTick>
 8006132:	4602      	mov	r2, r0
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	2b02      	cmp	r3, #2
 800613a:	d901      	bls.n	8006140 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e1a1      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006140:	4b2d      	ldr	r3, [pc, #180]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 0302 	and.w	r3, r3, #2
 8006148:	2b00      	cmp	r3, #0
 800614a:	d0f0      	beq.n	800612e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800614c:	4b2a      	ldr	r3, [pc, #168]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	00db      	lsls	r3, r3, #3
 800615a:	4927      	ldr	r1, [pc, #156]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 800615c:	4313      	orrs	r3, r2
 800615e:	600b      	str	r3, [r1, #0]
 8006160:	e015      	b.n	800618e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006162:	4b26      	ldr	r3, [pc, #152]	@ (80061fc <HAL_RCC_OscConfig+0x270>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006168:	f7fd ffd2 	bl	8004110 <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006170:	f7fd ffce 	bl	8004110 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e180      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006182:	4b1d      	ldr	r3, [pc, #116]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	2b00      	cmp	r3, #0
 8006198:	d03a      	beq.n	8006210 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d019      	beq.n	80061d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061a2:	4b17      	ldr	r3, [pc, #92]	@ (8006200 <HAL_RCC_OscConfig+0x274>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a8:	f7fd ffb2 	bl	8004110 <HAL_GetTick>
 80061ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ae:	e008      	b.n	80061c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b0:	f7fd ffae 	bl	8004110 <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e160      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061c2:	4b0d      	ldr	r3, [pc, #52]	@ (80061f8 <HAL_RCC_OscConfig+0x26c>)
 80061c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d0f0      	beq.n	80061b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80061ce:	2001      	movs	r0, #1
 80061d0:	f000 face 	bl	8006770 <RCC_Delay>
 80061d4:	e01c      	b.n	8006210 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061d6:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <HAL_RCC_OscConfig+0x274>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061dc:	f7fd ff98 	bl	8004110 <HAL_GetTick>
 80061e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e2:	e00f      	b.n	8006204 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e4:	f7fd ff94 	bl	8004110 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d908      	bls.n	8006204 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e146      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
 80061f6:	bf00      	nop
 80061f8:	40021000 	.word	0x40021000
 80061fc:	42420000 	.word	0x42420000
 8006200:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006204:	4b92      	ldr	r3, [pc, #584]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e9      	bne.n	80061e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80a6 	beq.w	800636a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800621e:	2300      	movs	r3, #0
 8006220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006222:	4b8b      	ldr	r3, [pc, #556]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10d      	bne.n	800624a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622e:	4b88      	ldr	r3, [pc, #544]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	4a87      	ldr	r2, [pc, #540]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	61d3      	str	r3, [r2, #28]
 800623a:	4b85      	ldr	r3, [pc, #532]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	4b82      	ldr	r3, [pc, #520]	@ (8006454 <HAL_RCC_OscConfig+0x4c8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d118      	bne.n	8006288 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006256:	4b7f      	ldr	r3, [pc, #508]	@ (8006454 <HAL_RCC_OscConfig+0x4c8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a7e      	ldr	r2, [pc, #504]	@ (8006454 <HAL_RCC_OscConfig+0x4c8>)
 800625c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006262:	f7fd ff55 	bl	8004110 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626a:	f7fd ff51 	bl	8004110 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b64      	cmp	r3, #100	@ 0x64
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e103      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	4b75      	ldr	r3, [pc, #468]	@ (8006454 <HAL_RCC_OscConfig+0x4c8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d106      	bne.n	800629e <HAL_RCC_OscConfig+0x312>
 8006290:	4b6f      	ldr	r3, [pc, #444]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	4a6e      	ldr	r2, [pc, #440]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	6213      	str	r3, [r2, #32]
 800629c:	e02d      	b.n	80062fa <HAL_RCC_OscConfig+0x36e>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x334>
 80062a6:	4b6a      	ldr	r3, [pc, #424]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	4a69      	ldr	r2, [pc, #420]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062ac:	f023 0301 	bic.w	r3, r3, #1
 80062b0:	6213      	str	r3, [r2, #32]
 80062b2:	4b67      	ldr	r3, [pc, #412]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4a66      	ldr	r2, [pc, #408]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062b8:	f023 0304 	bic.w	r3, r3, #4
 80062bc:	6213      	str	r3, [r2, #32]
 80062be:	e01c      	b.n	80062fa <HAL_RCC_OscConfig+0x36e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	2b05      	cmp	r3, #5
 80062c6:	d10c      	bne.n	80062e2 <HAL_RCC_OscConfig+0x356>
 80062c8:	4b61      	ldr	r3, [pc, #388]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062ca:	6a1b      	ldr	r3, [r3, #32]
 80062cc:	4a60      	ldr	r2, [pc, #384]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062ce:	f043 0304 	orr.w	r3, r3, #4
 80062d2:	6213      	str	r3, [r2, #32]
 80062d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062da:	f043 0301 	orr.w	r3, r3, #1
 80062de:	6213      	str	r3, [r2, #32]
 80062e0:	e00b      	b.n	80062fa <HAL_RCC_OscConfig+0x36e>
 80062e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4a5a      	ldr	r2, [pc, #360]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062e8:	f023 0301 	bic.w	r3, r3, #1
 80062ec:	6213      	str	r3, [r2, #32]
 80062ee:	4b58      	ldr	r3, [pc, #352]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062f0:	6a1b      	ldr	r3, [r3, #32]
 80062f2:	4a57      	ldr	r2, [pc, #348]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80062f4:	f023 0304 	bic.w	r3, r3, #4
 80062f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d015      	beq.n	800632e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006302:	f7fd ff05 	bl	8004110 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006308:	e00a      	b.n	8006320 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800630a:	f7fd ff01 	bl	8004110 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e0b1      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006320:	4b4b      	ldr	r3, [pc, #300]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d0ee      	beq.n	800630a <HAL_RCC_OscConfig+0x37e>
 800632c:	e014      	b.n	8006358 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800632e:	f7fd feef 	bl	8004110 <HAL_GetTick>
 8006332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006334:	e00a      	b.n	800634c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006336:	f7fd feeb 	bl	8004110 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e09b      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800634c:	4b40      	ldr	r3, [pc, #256]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f003 0302 	and.w	r3, r3, #2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1ee      	bne.n	8006336 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	2b01      	cmp	r3, #1
 800635c:	d105      	bne.n	800636a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800635e:	4b3c      	ldr	r3, [pc, #240]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	4a3b      	ldr	r2, [pc, #236]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006364:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006368:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 8087 	beq.w	8006482 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006374:	4b36      	ldr	r3, [pc, #216]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f003 030c 	and.w	r3, r3, #12
 800637c:	2b08      	cmp	r3, #8
 800637e:	d061      	beq.n	8006444 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	69db      	ldr	r3, [r3, #28]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d146      	bne.n	8006416 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006388:	4b33      	ldr	r3, [pc, #204]	@ (8006458 <HAL_RCC_OscConfig+0x4cc>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800638e:	f7fd febf 	bl	8004110 <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006396:	f7fd febb 	bl	8004110 <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e06d      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80063a8:	4b29      	ldr	r3, [pc, #164]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d108      	bne.n	80063d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80063be:	4b24      	ldr	r3, [pc, #144]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	4921      	ldr	r1, [pc, #132]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063d0:	4b1f      	ldr	r3, [pc, #124]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a19      	ldr	r1, [r3, #32]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e0:	430b      	orrs	r3, r1
 80063e2:	491b      	ldr	r1, [pc, #108]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006458 <HAL_RCC_OscConfig+0x4cc>)
 80063ea:	2201      	movs	r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ee:	f7fd fe8f 	bl	8004110 <HAL_GetTick>
 80063f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f6:	f7fd fe8b 	bl	8004110 <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e03d      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006408:	4b11      	ldr	r3, [pc, #68]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <HAL_RCC_OscConfig+0x46a>
 8006414:	e035      	b.n	8006482 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006416:	4b10      	ldr	r3, [pc, #64]	@ (8006458 <HAL_RCC_OscConfig+0x4cc>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800641c:	f7fd fe78 	bl	8004110 <HAL_GetTick>
 8006420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006422:	e008      	b.n	8006436 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006424:	f7fd fe74 	bl	8004110 <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e026      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006436:	4b06      	ldr	r3, [pc, #24]	@ (8006450 <HAL_RCC_OscConfig+0x4c4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1f0      	bne.n	8006424 <HAL_RCC_OscConfig+0x498>
 8006442:	e01e      	b.n	8006482 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d107      	bne.n	800645c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e019      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
 8006450:	40021000 	.word	0x40021000
 8006454:	40007000 	.word	0x40007000
 8006458:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800645c:	4b0b      	ldr	r3, [pc, #44]	@ (800648c <HAL_RCC_OscConfig+0x500>)
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	429a      	cmp	r2, r3
 800646e:	d106      	bne.n	800647e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647a:	429a      	cmp	r2, r3
 800647c:	d001      	beq.n	8006482 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40021000 	.word	0x40021000

08006490 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e0d0      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d910      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b67      	ldr	r3, [pc, #412]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f023 0207 	bic.w	r2, r3, #7
 80064ba:	4965      	ldr	r1, [pc, #404]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	4313      	orrs	r3, r2
 80064c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b63      	ldr	r3, [pc, #396]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0b8      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ec:	4b59      	ldr	r3, [pc, #356]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	4a58      	ldr	r2, [pc, #352]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 80064f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80064f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006504:	4b53      	ldr	r3, [pc, #332]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	4a52      	ldr	r2, [pc, #328]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 800650a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800650e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006510:	4b50      	ldr	r3, [pc, #320]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	494d      	ldr	r1, [pc, #308]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 800651e:	4313      	orrs	r3, r2
 8006520:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d040      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	4b47      	ldr	r3, [pc, #284]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d115      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e07f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d107      	bne.n	800655e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800654e:	4b41      	ldr	r3, [pc, #260]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e073      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655e:	4b3d      	ldr	r3, [pc, #244]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e06b      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800656e:	4b39      	ldr	r3, [pc, #228]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f023 0203 	bic.w	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4936      	ldr	r1, [pc, #216]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 800657c:	4313      	orrs	r3, r2
 800657e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006580:	f7fd fdc6 	bl	8004110 <HAL_GetTick>
 8006584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006586:	e00a      	b.n	800659e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006588:	f7fd fdc2 	bl	8004110 <HAL_GetTick>
 800658c:	4602      	mov	r2, r0
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006596:	4293      	cmp	r3, r2
 8006598:	d901      	bls.n	800659e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e053      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659e:	4b2d      	ldr	r3, [pc, #180]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 020c 	and.w	r2, r3, #12
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d1eb      	bne.n	8006588 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065b0:	4b27      	ldr	r3, [pc, #156]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	683a      	ldr	r2, [r7, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d210      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065be:	4b24      	ldr	r3, [pc, #144]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f023 0207 	bic.w	r2, r3, #7
 80065c6:	4922      	ldr	r1, [pc, #136]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	4b20      	ldr	r3, [pc, #128]	@ (8006650 <HAL_RCC_ClockConfig+0x1c0>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e032      	b.n	8006646 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ec:	4b19      	ldr	r3, [pc, #100]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4916      	ldr	r1, [pc, #88]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800660a:	4b12      	ldr	r3, [pc, #72]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	490e      	ldr	r1, [pc, #56]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 800661a:	4313      	orrs	r3, r2
 800661c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800661e:	f000 f821 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0b      	ldr	r3, [pc, #44]	@ (8006654 <HAL_RCC_ClockConfig+0x1c4>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	490a      	ldr	r1, [pc, #40]	@ (8006658 <HAL_RCC_ClockConfig+0x1c8>)
 8006630:	5ccb      	ldrb	r3, [r1, r3]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a09      	ldr	r2, [pc, #36]	@ (800665c <HAL_RCC_ClockConfig+0x1cc>)
 8006638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800663a:	4b09      	ldr	r3, [pc, #36]	@ (8006660 <HAL_RCC_ClockConfig+0x1d0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fd fd24 	bl	800408c <HAL_InitTick>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40022000 	.word	0x40022000
 8006654:	40021000 	.word	0x40021000
 8006658:	08008a18 	.word	0x08008a18
 800665c:	20000000 	.word	0x20000000
 8006660:	2000014c 	.word	0x2000014c

08006664 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
 800666e:	2300      	movs	r3, #0
 8006670:	60bb      	str	r3, [r7, #8]
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	2300      	movs	r3, #0
 8006678:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800667e:	4b1e      	ldr	r3, [pc, #120]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b04      	cmp	r3, #4
 800668c:	d002      	beq.n	8006694 <HAL_RCC_GetSysClockFreq+0x30>
 800668e:	2b08      	cmp	r3, #8
 8006690:	d003      	beq.n	800669a <HAL_RCC_GetSysClockFreq+0x36>
 8006692:	e027      	b.n	80066e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006694:	4b19      	ldr	r3, [pc, #100]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x98>)
 8006696:	613b      	str	r3, [r7, #16]
      break;
 8006698:	e027      	b.n	80066ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	0c9b      	lsrs	r3, r3, #18
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <HAL_RCC_GetSysClockFreq+0x9c>)
 80066a4:	5cd3      	ldrb	r3, [r2, r3]
 80066a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d010      	beq.n	80066d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80066b2:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	0c5b      	lsrs	r3, r3, #17
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <HAL_RCC_GetSysClockFreq+0xa0>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a0d      	ldr	r2, [pc, #52]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x98>)
 80066c6:	fb03 f202 	mul.w	r2, r3, r2
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	617b      	str	r3, [r7, #20]
 80066d2:	e004      	b.n	80066de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006708 <HAL_RCC_GetSysClockFreq+0xa4>)
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	613b      	str	r3, [r7, #16]
      break;
 80066e2:	e002      	b.n	80066ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <HAL_RCC_GetSysClockFreq+0x98>)
 80066e6:	613b      	str	r3, [r7, #16]
      break;
 80066e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066ea:	693b      	ldr	r3, [r7, #16]
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	40021000 	.word	0x40021000
 80066fc:	007a1200 	.word	0x007a1200
 8006700:	08008f94 	.word	0x08008f94
 8006704:	08008fa4 	.word	0x08008fa4
 8006708:	003d0900 	.word	0x003d0900

0800670c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006710:	4b02      	ldr	r3, [pc, #8]	@ (800671c <HAL_RCC_GetHCLKFreq+0x10>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	bc80      	pop	{r7}
 800671a:	4770      	bx	lr
 800671c:	20000000 	.word	0x20000000

08006720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006724:	f7ff fff2 	bl	800670c <HAL_RCC_GetHCLKFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b05      	ldr	r3, [pc, #20]	@ (8006740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	4903      	ldr	r1, [pc, #12]	@ (8006744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800673c:	4618      	mov	r0, r3
 800673e:	bd80      	pop	{r7, pc}
 8006740:	40021000 	.word	0x40021000
 8006744:	08008a28 	.word	0x08008a28

08006748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800674c:	f7ff ffde 	bl	800670c <HAL_RCC_GetHCLKFreq>
 8006750:	4602      	mov	r2, r0
 8006752:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	0adb      	lsrs	r3, r3, #11
 8006758:	f003 0307 	and.w	r3, r3, #7
 800675c:	4903      	ldr	r1, [pc, #12]	@ (800676c <HAL_RCC_GetPCLK2Freq+0x24>)
 800675e:	5ccb      	ldrb	r3, [r1, r3]
 8006760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006764:	4618      	mov	r0, r3
 8006766:	bd80      	pop	{r7, pc}
 8006768:	40021000 	.word	0x40021000
 800676c:	08008a28 	.word	0x08008a28

08006770 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006778:	4b0a      	ldr	r3, [pc, #40]	@ (80067a4 <RCC_Delay+0x34>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a0a      	ldr	r2, [pc, #40]	@ (80067a8 <RCC_Delay+0x38>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	0a5b      	lsrs	r3, r3, #9
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	fb02 f303 	mul.w	r3, r2, r3
 800678a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800678c:	bf00      	nop
  }
  while (Delay --);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	1e5a      	subs	r2, r3, #1
 8006792:	60fa      	str	r2, [r7, #12]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d1f9      	bne.n	800678c <RCC_Delay+0x1c>
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc80      	pop	{r7}
 80067a2:	4770      	bx	lr
 80067a4:	20000000 	.word	0x20000000
 80067a8:	10624dd3 	.word	0x10624dd3

080067ac <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d07d      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80067c8:	2300      	movs	r3, #0
 80067ca:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067cc:	4b4f      	ldr	r3, [pc, #316]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ce:	69db      	ldr	r3, [r3, #28]
 80067d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10d      	bne.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d8:	4b4c      	ldr	r3, [pc, #304]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	4a4b      	ldr	r2, [pc, #300]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067e2:	61d3      	str	r3, [r2, #28]
 80067e4:	4b49      	ldr	r3, [pc, #292]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067f0:	2301      	movs	r3, #1
 80067f2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f4:	4b46      	ldr	r3, [pc, #280]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d118      	bne.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006800:	4b43      	ldr	r3, [pc, #268]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a42      	ldr	r2, [pc, #264]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006806:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800680a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800680c:	f7fd fc80 	bl	8004110 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006812:	e008      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006814:	f7fd fc7c 	bl	8004110 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	@ 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e06d      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006826:	4b3a      	ldr	r3, [pc, #232]	@ (8006910 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006832:	4b36      	ldr	r3, [pc, #216]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800683a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d02e      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d027      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006850:	4b2e      	ldr	r3, [pc, #184]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006852:	6a1b      	ldr	r3, [r3, #32]
 8006854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006858:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800685a:	4b2e      	ldr	r3, [pc, #184]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006860:	4b2c      	ldr	r3, [pc, #176]	@ (8006914 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006866:	4a29      	ldr	r2, [pc, #164]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d014      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006876:	f7fd fc4b 	bl	8004110 <HAL_GetTick>
 800687a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687c:	e00a      	b.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687e:	f7fd fc47 	bl	8004110 <HAL_GetTick>
 8006882:	4602      	mov	r2, r0
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688c:	4293      	cmp	r3, r2
 800688e:	d901      	bls.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e036      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006894:	4b1d      	ldr	r3, [pc, #116]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	f003 0302 	and.w	r3, r3, #2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0ee      	beq.n	800687e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068a0:	4b1a      	ldr	r3, [pc, #104]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	4917      	ldr	r1, [pc, #92]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d105      	bne.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b8:	4b14      	ldr	r3, [pc, #80]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	4a13      	ldr	r2, [pc, #76]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068c2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d008      	beq.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80068d0:	4b0e      	ldr	r3, [pc, #56]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	490b      	ldr	r1, [pc, #44]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068ee:	4b07      	ldr	r3, [pc, #28]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	4904      	ldr	r1, [pc, #16]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3718      	adds	r7, #24
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000
 8006910:	40007000 	.word	0x40007000
 8006914:	42420440 	.word	0x42420440

08006918 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	617b      	str	r3, [r7, #20]
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	2300      	movs	r3, #0
 8006932:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3b01      	subs	r3, #1
 8006938:	2b0f      	cmp	r3, #15
 800693a:	f200 80af 	bhi.w	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800693e:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006944:	08006a1b 	.word	0x08006a1b
 8006948:	08006a81 	.word	0x08006a81
 800694c:	08006a9d 	.word	0x08006a9d
 8006950:	08006a0b 	.word	0x08006a0b
 8006954:	08006a9d 	.word	0x08006a9d
 8006958:	08006a9d 	.word	0x08006a9d
 800695c:	08006a9d 	.word	0x08006a9d
 8006960:	08006a13 	.word	0x08006a13
 8006964:	08006a9d 	.word	0x08006a9d
 8006968:	08006a9d 	.word	0x08006a9d
 800696c:	08006a9d 	.word	0x08006a9d
 8006970:	08006a9d 	.word	0x08006a9d
 8006974:	08006a9d 	.word	0x08006a9d
 8006978:	08006a9d 	.word	0x08006a9d
 800697c:	08006a9d 	.word	0x08006a9d
 8006980:	08006985 	.word	0x08006985
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006984:	4b4a      	ldr	r3, [pc, #296]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800698a:	4b49      	ldr	r3, [pc, #292]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006992:	2b00      	cmp	r3, #0
 8006994:	f000 8084 	beq.w	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	0c9b      	lsrs	r3, r3, #18
 800699c:	f003 030f 	and.w	r3, r3, #15
 80069a0:	4a44      	ldr	r2, [pc, #272]	@ (8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80069a2:	5cd3      	ldrb	r3, [r2, r3]
 80069a4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d015      	beq.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80069b0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	0c5b      	lsrs	r3, r3, #17
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80069bc:	5cd3      	ldrb	r3, [r2, r3]
 80069be:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00d      	beq.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80069ca:	4a3c      	ldr	r2, [pc, #240]	@ (8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	fb02 f303 	mul.w	r3, r2, r3
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	4a38      	ldr	r2, [pc, #224]	@ (8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 80069e0:	fb02 f303 	mul.w	r3, r2, r3
 80069e4:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80069e6:	4b32      	ldr	r3, [pc, #200]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069f2:	d102      	bne.n	80069fa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80069f8:	e052      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4a31      	ldr	r2, [pc, #196]	@ (8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8006a00:	fba2 2303 	umull	r2, r3, r2, r3
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	61bb      	str	r3, [r7, #24]
      break;
 8006a08:	e04a      	b.n	8006aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006a0a:	f7ff fe2b 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006a0e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006a10:	e049      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006a12:	f7ff fe27 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006a16:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006a18:	e045      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8006a1a:	4b25      	ldr	r3, [pc, #148]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a2a:	d108      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0302 	and.w	r3, r3, #2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d003      	beq.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a3a:	61bb      	str	r3, [r7, #24]
 8006a3c:	e01f      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a48:	d109      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006a4a:	4b19      	ldr	r3, [pc, #100]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d003      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8006a56:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	e00f      	b.n	8006a7e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a68:	d11c      	bne.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006a6a:	4b11      	ldr	r3, [pc, #68]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d016      	beq.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8006a76:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8006a7a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006a7c:	e012      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8006a7e:	e011      	b.n	8006aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006a80:	f7ff fe62 	bl	8006748 <HAL_RCC_GetPCLK2Freq>
 8006a84:	4602      	mov	r2, r0
 8006a86:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	0b9b      	lsrs	r3, r3, #14
 8006a8c:	f003 0303 	and.w	r3, r3, #3
 8006a90:	3301      	adds	r3, #1
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a98:	61bb      	str	r3, [r7, #24]
      break;
 8006a9a:	e004      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8006a9c:	bf00      	nop
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8006aa4:	bf00      	nop
    }
  }
  return (frequency);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	08008fa8 	.word	0x08008fa8
 8006ab8:	08008fb8 	.word	0x08008fb8
 8006abc:	007a1200 	.word	0x007a1200
 8006ac0:	003d0900 	.word	0x003d0900
 8006ac4:	aaaaaaab 	.word	0xaaaaaaab

08006ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e041      	b.n	8006b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d106      	bne.n	8006af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fb faac 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2202      	movs	r2, #2
 8006af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3304      	adds	r3, #4
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f000 fbd4 	bl	80072b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b5c:	2300      	movs	r3, #0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d001      	beq.n	8006b80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e046      	b.n	8006c0e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a22      	ldr	r2, [pc, #136]	@ (8006c18 <HAL_TIM_Base_Start+0xb0>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d022      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a21      	ldr	r2, [pc, #132]	@ (8006c1c <HAL_TIM_Base_Start+0xb4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d01d      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba4:	d018      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1d      	ldr	r2, [pc, #116]	@ (8006c20 <HAL_TIM_Base_Start+0xb8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d013      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c24 <HAL_TIM_Base_Start+0xbc>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00e      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8006c28 <HAL_TIM_Base_Start+0xc0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d009      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a18      	ldr	r2, [pc, #96]	@ (8006c2c <HAL_TIM_Base_Start+0xc4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d004      	beq.n	8006bd8 <HAL_TIM_Base_Start+0x70>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a17      	ldr	r2, [pc, #92]	@ (8006c30 <HAL_TIM_Base_Start+0xc8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d111      	bne.n	8006bfc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b06      	cmp	r3, #6
 8006be8:	d010      	beq.n	8006c0c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f042 0201 	orr.w	r2, r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bfa:	e007      	b.n	8006c0c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3714      	adds	r7, #20
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bc80      	pop	{r7}
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	40014c00 	.word	0x40014c00
 8006c30:	40001800 	.word	0x40001800

08006c34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	6a1a      	ldr	r2, [r3, #32]
 8006c42:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c46:	4013      	ands	r3, r2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10f      	bne.n	8006c6c <HAL_TIM_Base_Stop+0x38>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a1a      	ldr	r2, [r3, #32]
 8006c52:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d107      	bne.n	8006c6c <HAL_TIM_Base_Stop+0x38>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0201 	bic.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e041      	b.n	8006d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f839 	bl	8006d1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	f000 faf8 	bl	80072b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}

08006d1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bc80      	pop	{r7}
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_TIM_PWM_Start+0x24>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	bf14      	ite	ne
 8006d4c:	2301      	movne	r3, #1
 8006d4e:	2300      	moveq	r3, #0
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	e022      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d109      	bne.n	8006d6e <HAL_TIM_PWM_Start+0x3e>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	bf14      	ite	ne
 8006d66:	2301      	movne	r3, #1
 8006d68:	2300      	moveq	r3, #0
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	e015      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d109      	bne.n	8006d88 <HAL_TIM_PWM_Start+0x58>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e008      	b.n	8006d9a <HAL_TIM_PWM_Start+0x6a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	bf14      	ite	ne
 8006d94:	2301      	movne	r3, #1
 8006d96:	2300      	moveq	r3, #0
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d001      	beq.n	8006da2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e07c      	b.n	8006e9c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <HAL_TIM_PWM_Start+0x82>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006db0:	e013      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d104      	bne.n	8006dc2 <HAL_TIM_PWM_Start+0x92>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2202      	movs	r2, #2
 8006dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc0:	e00b      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	2b08      	cmp	r3, #8
 8006dc6:	d104      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0xa2>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd0:	e003      	b.n	8006dda <HAL_TIM_PWM_Start+0xaa>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2201      	movs	r2, #1
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fd52 	bl	800788c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a2d      	ldr	r2, [pc, #180]	@ (8006ea4 <HAL_TIM_PWM_Start+0x174>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d004      	beq.n	8006dfc <HAL_TIM_PWM_Start+0xcc>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2c      	ldr	r2, [pc, #176]	@ (8006ea8 <HAL_TIM_PWM_Start+0x178>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d101      	bne.n	8006e00 <HAL_TIM_PWM_Start+0xd0>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e000      	b.n	8006e02 <HAL_TIM_PWM_Start+0xd2>
 8006e00:	2300      	movs	r3, #0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a22      	ldr	r2, [pc, #136]	@ (8006ea4 <HAL_TIM_PWM_Start+0x174>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d022      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a20      	ldr	r2, [pc, #128]	@ (8006ea8 <HAL_TIM_PWM_Start+0x178>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d01d      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e32:	d018      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1c      	ldr	r2, [pc, #112]	@ (8006eac <HAL_TIM_PWM_Start+0x17c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d013      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb0 <HAL_TIM_PWM_Start+0x180>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d00e      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a19      	ldr	r2, [pc, #100]	@ (8006eb4 <HAL_TIM_PWM_Start+0x184>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d009      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a18      	ldr	r2, [pc, #96]	@ (8006eb8 <HAL_TIM_PWM_Start+0x188>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d004      	beq.n	8006e66 <HAL_TIM_PWM_Start+0x136>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a16      	ldr	r2, [pc, #88]	@ (8006ebc <HAL_TIM_PWM_Start+0x18c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d111      	bne.n	8006e8a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2b06      	cmp	r3, #6
 8006e76:	d010      	beq.n	8006e9a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	e007      	b.n	8006e9a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f042 0201 	orr.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40000400 	.word	0x40000400
 8006eb0:	40000800 	.word	0x40000800
 8006eb4:	40000c00 	.word	0x40000c00
 8006eb8:	40014c00 	.word	0x40014c00
 8006ebc:	40001800 	.word	0x40001800

08006ec0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f000 fcda 	bl	800788c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a2e      	ldr	r2, [pc, #184]	@ (8006f98 <HAL_TIM_PWM_Stop+0xd8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d004      	beq.n	8006eec <HAL_TIM_PWM_Stop+0x2c>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a2d      	ldr	r2, [pc, #180]	@ (8006f9c <HAL_TIM_PWM_Stop+0xdc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIM_PWM_Stop+0x30>
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_TIM_PWM_Stop+0x32>
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d017      	beq.n	8006f26 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a1a      	ldr	r2, [r3, #32]
 8006efc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10f      	bne.n	8006f26 <HAL_TIM_PWM_Stop+0x66>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6a1a      	ldr	r2, [r3, #32]
 8006f0c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d107      	bne.n	8006f26 <HAL_TIM_PWM_Stop+0x66>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6a1a      	ldr	r2, [r3, #32]
 8006f2c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d10f      	bne.n	8006f56 <HAL_TIM_PWM_Stop+0x96>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	f240 4344 	movw	r3, #1092	@ 0x444
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d107      	bne.n	8006f56 <HAL_TIM_PWM_Stop+0x96>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_PWM_Stop+0xa6>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f64:	e013      	b.n	8006f8e <HAL_TIM_PWM_Stop+0xce>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_PWM_Stop+0xb6>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f74:	e00b      	b.n	8006f8e <HAL_TIM_PWM_Stop+0xce>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_PWM_Stop+0xc6>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f84:	e003      	b.n	8006f8e <HAL_TIM_PWM_Stop+0xce>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3708      	adds	r7, #8
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}
 8006f98:	40012c00 	.word	0x40012c00
 8006f9c:	40013400 	.word	0x40013400

08006fa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d101      	bne.n	8006fbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e0ae      	b.n	800711c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	f200 809f 	bhi.w	800710c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006fce:	a201      	add	r2, pc, #4	@ (adr r2, 8006fd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd4:	08007009 	.word	0x08007009
 8006fd8:	0800710d 	.word	0x0800710d
 8006fdc:	0800710d 	.word	0x0800710d
 8006fe0:	0800710d 	.word	0x0800710d
 8006fe4:	08007049 	.word	0x08007049
 8006fe8:	0800710d 	.word	0x0800710d
 8006fec:	0800710d 	.word	0x0800710d
 8006ff0:	0800710d 	.word	0x0800710d
 8006ff4:	0800708b 	.word	0x0800708b
 8006ff8:	0800710d 	.word	0x0800710d
 8006ffc:	0800710d 	.word	0x0800710d
 8007000:	0800710d 	.word	0x0800710d
 8007004:	080070cb 	.word	0x080070cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 f9fa 	bl	8007408 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	699a      	ldr	r2, [r3, #24]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0208 	orr.w	r2, r2, #8
 8007022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699a      	ldr	r2, [r3, #24]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0204 	bic.w	r2, r2, #4
 8007032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	6999      	ldr	r1, [r3, #24]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	619a      	str	r2, [r3, #24]
      break;
 8007046:	e064      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fa4a 	bl	80074e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	699a      	ldr	r2, [r3, #24]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6999      	ldr	r1, [r3, #24]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	021a      	lsls	r2, r3, #8
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	619a      	str	r2, [r3, #24]
      break;
 8007088:	e043      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68b9      	ldr	r1, [r7, #8]
 8007090:	4618      	mov	r0, r3
 8007092:	f000 fa9d 	bl	80075d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69da      	ldr	r2, [r3, #28]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f042 0208 	orr.w	r2, r2, #8
 80070a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69da      	ldr	r2, [r3, #28]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0204 	bic.w	r2, r2, #4
 80070b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69d9      	ldr	r1, [r3, #28]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	691a      	ldr	r2, [r3, #16]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	61da      	str	r2, [r3, #28]
      break;
 80070c8:	e023      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68b9      	ldr	r1, [r7, #8]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 faf1 	bl	80076b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	69da      	ldr	r2, [r3, #28]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	69d9      	ldr	r1, [r3, #28]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	021a      	lsls	r2, r3, #8
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	61da      	str	r2, [r3, #28]
      break;
 800710a:	e002      	b.n	8007112 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	75fb      	strb	r3, [r7, #23]
      break;
 8007110:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800711a:	7dfb      	ldrb	r3, [r7, #23]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <HAL_TIM_ConfigClockSource+0x1c>
 800713c:	2302      	movs	r3, #2
 800713e:	e0b4      	b.n	80072aa <HAL_TIM_ConfigClockSource+0x186>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800715e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007166:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007178:	d03e      	beq.n	80071f8 <HAL_TIM_ConfigClockSource+0xd4>
 800717a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717e:	f200 8087 	bhi.w	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 8007182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007186:	f000 8086 	beq.w	8007296 <HAL_TIM_ConfigClockSource+0x172>
 800718a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718e:	d87f      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 8007190:	2b70      	cmp	r3, #112	@ 0x70
 8007192:	d01a      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0xa6>
 8007194:	2b70      	cmp	r3, #112	@ 0x70
 8007196:	d87b      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 8007198:	2b60      	cmp	r3, #96	@ 0x60
 800719a:	d050      	beq.n	800723e <HAL_TIM_ConfigClockSource+0x11a>
 800719c:	2b60      	cmp	r3, #96	@ 0x60
 800719e:	d877      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 80071a0:	2b50      	cmp	r3, #80	@ 0x50
 80071a2:	d03c      	beq.n	800721e <HAL_TIM_ConfigClockSource+0xfa>
 80071a4:	2b50      	cmp	r3, #80	@ 0x50
 80071a6:	d873      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 80071a8:	2b40      	cmp	r3, #64	@ 0x40
 80071aa:	d058      	beq.n	800725e <HAL_TIM_ConfigClockSource+0x13a>
 80071ac:	2b40      	cmp	r3, #64	@ 0x40
 80071ae:	d86f      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 80071b0:	2b30      	cmp	r3, #48	@ 0x30
 80071b2:	d064      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15a>
 80071b4:	2b30      	cmp	r3, #48	@ 0x30
 80071b6:	d86b      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 80071b8:	2b20      	cmp	r3, #32
 80071ba:	d060      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15a>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d867      	bhi.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d05c      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15a>
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d05a      	beq.n	800727e <HAL_TIM_ConfigClockSource+0x15a>
 80071c8:	e062      	b.n	8007290 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071da:	f000 fb38 	bl	800784e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	609a      	str	r2, [r3, #8]
      break;
 80071f6:	e04f      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007208:	f000 fb21 	bl	800784e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689a      	ldr	r2, [r3, #8]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800721a:	609a      	str	r2, [r3, #8]
      break;
 800721c:	e03c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800722a:	461a      	mov	r2, r3
 800722c:	f000 fa98 	bl	8007760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2150      	movs	r1, #80	@ 0x50
 8007236:	4618      	mov	r0, r3
 8007238:	f000 faef 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800723c:	e02c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800724a:	461a      	mov	r2, r3
 800724c:	f000 fab6 	bl	80077bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2160      	movs	r1, #96	@ 0x60
 8007256:	4618      	mov	r0, r3
 8007258:	f000 fadf 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800725c:	e01c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800726a:	461a      	mov	r2, r3
 800726c:	f000 fa78 	bl	8007760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2140      	movs	r1, #64	@ 0x40
 8007276:	4618      	mov	r0, r3
 8007278:	f000 facf 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800727c:	e00c      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4619      	mov	r1, r3
 8007288:	4610      	mov	r0, r2
 800728a:	f000 fac6 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800728e:	e003      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
      break;
 8007294:	e000      	b.n	8007298 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007296:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3710      	adds	r7, #16
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	4a45      	ldr	r2, [pc, #276]	@ (80073dc <TIM_Base_SetConfig+0x128>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d013      	beq.n	80072f4 <TIM_Base_SetConfig+0x40>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a44      	ldr	r2, [pc, #272]	@ (80073e0 <TIM_Base_SetConfig+0x12c>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00f      	beq.n	80072f4 <TIM_Base_SetConfig+0x40>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072da:	d00b      	beq.n	80072f4 <TIM_Base_SetConfig+0x40>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a41      	ldr	r2, [pc, #260]	@ (80073e4 <TIM_Base_SetConfig+0x130>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <TIM_Base_SetConfig+0x40>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a40      	ldr	r2, [pc, #256]	@ (80073e8 <TIM_Base_SetConfig+0x134>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_Base_SetConfig+0x40>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a3f      	ldr	r2, [pc, #252]	@ (80073ec <TIM_Base_SetConfig+0x138>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d108      	bne.n	8007306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a34      	ldr	r2, [pc, #208]	@ (80073dc <TIM_Base_SetConfig+0x128>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d02b      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a33      	ldr	r2, [pc, #204]	@ (80073e0 <TIM_Base_SetConfig+0x12c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d027      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731c:	d023      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a30      	ldr	r2, [pc, #192]	@ (80073e4 <TIM_Base_SetConfig+0x130>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01f      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a2f      	ldr	r2, [pc, #188]	@ (80073e8 <TIM_Base_SetConfig+0x134>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01b      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a2e      	ldr	r2, [pc, #184]	@ (80073ec <TIM_Base_SetConfig+0x138>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d017      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a2d      	ldr	r2, [pc, #180]	@ (80073f0 <TIM_Base_SetConfig+0x13c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a2c      	ldr	r2, [pc, #176]	@ (80073f4 <TIM_Base_SetConfig+0x140>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d00f      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a2b      	ldr	r2, [pc, #172]	@ (80073f8 <TIM_Base_SetConfig+0x144>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d00b      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a2a      	ldr	r2, [pc, #168]	@ (80073fc <TIM_Base_SetConfig+0x148>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d007      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a29      	ldr	r2, [pc, #164]	@ (8007400 <TIM_Base_SetConfig+0x14c>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d003      	beq.n	8007366 <TIM_Base_SetConfig+0xb2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a28      	ldr	r2, [pc, #160]	@ (8007404 <TIM_Base_SetConfig+0x150>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d108      	bne.n	8007378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800736c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	4313      	orrs	r3, r2
 8007384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a0f      	ldr	r2, [pc, #60]	@ (80073dc <TIM_Base_SetConfig+0x128>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d003      	beq.n	80073ac <TIM_Base_SetConfig+0xf8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a0e      	ldr	r2, [pc, #56]	@ (80073e0 <TIM_Base_SetConfig+0x12c>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d103      	bne.n	80073b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2201      	movs	r2, #1
 80073b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d005      	beq.n	80073d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	f023 0201 	bic.w	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	611a      	str	r2, [r3, #16]
  }
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bc80      	pop	{r7}
 80073da:	4770      	bx	lr
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40013400 	.word	0x40013400
 80073e4:	40000400 	.word	0x40000400
 80073e8:	40000800 	.word	0x40000800
 80073ec:	40000c00 	.word	0x40000c00
 80073f0:	40014c00 	.word	0x40014c00
 80073f4:	40015000 	.word	0x40015000
 80073f8:	40015400 	.word	0x40015400
 80073fc:	40001800 	.word	0x40001800
 8007400:	40001c00 	.word	0x40001c00
 8007404:	40002000 	.word	0x40002000

08007408 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a1b      	ldr	r3, [r3, #32]
 8007416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	f023 0201 	bic.w	r2, r3, #1
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	4313      	orrs	r3, r2
 8007448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	f023 0302 	bic.w	r3, r3, #2
 8007450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a20      	ldr	r2, [pc, #128]	@ (80074e0 <TIM_OC1_SetConfig+0xd8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d003      	beq.n	800746c <TIM_OC1_SetConfig+0x64>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a1f      	ldr	r2, [pc, #124]	@ (80074e4 <TIM_OC1_SetConfig+0xdc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d10c      	bne.n	8007486 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f023 0308 	bic.w	r3, r3, #8
 8007472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f023 0304 	bic.w	r3, r3, #4
 8007484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <TIM_OC1_SetConfig+0xd8>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d003      	beq.n	8007496 <TIM_OC1_SetConfig+0x8e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a14      	ldr	r2, [pc, #80]	@ (80074e4 <TIM_OC1_SetConfig+0xdc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d111      	bne.n	80074ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800749c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	693a      	ldr	r2, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685a      	ldr	r2, [r3, #4]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	621a      	str	r2, [r3, #32]
}
 80074d4:	bf00      	nop
 80074d6:	371c      	adds	r7, #28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bc80      	pop	{r7}
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40012c00 	.word	0x40012c00
 80074e4:	40013400 	.word	0x40013400

080074e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6a1b      	ldr	r3, [r3, #32]
 80074fc:	f023 0210 	bic.w	r2, r3, #16
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800751e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	021b      	lsls	r3, r3, #8
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	4313      	orrs	r3, r2
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f023 0320 	bic.w	r3, r3, #32
 8007532:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	011b      	lsls	r3, r3, #4
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a21      	ldr	r2, [pc, #132]	@ (80075c8 <TIM_OC2_SetConfig+0xe0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_OC2_SetConfig+0x68>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a20      	ldr	r2, [pc, #128]	@ (80075cc <TIM_OC2_SetConfig+0xe4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10d      	bne.n	800756c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	697a      	ldr	r2, [r7, #20]
 8007560:	4313      	orrs	r3, r2
 8007562:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800756a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a16      	ldr	r2, [pc, #88]	@ (80075c8 <TIM_OC2_SetConfig+0xe0>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d003      	beq.n	800757c <TIM_OC2_SetConfig+0x94>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a15      	ldr	r2, [pc, #84]	@ (80075cc <TIM_OC2_SetConfig+0xe4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d113      	bne.n	80075a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007582:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800758a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	4313      	orrs	r3, r2
 8007596:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	4313      	orrs	r3, r2
 80075a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr
 80075c8:	40012c00 	.word	0x40012c00
 80075cc:	40013400 	.word	0x40013400

080075d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a21      	ldr	r2, [pc, #132]	@ (80076b0 <TIM_OC3_SetConfig+0xe0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a20      	ldr	r2, [pc, #128]	@ (80076b4 <TIM_OC3_SetConfig+0xe4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d10d      	bne.n	8007652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800763c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a16      	ldr	r2, [pc, #88]	@ (80076b0 <TIM_OC3_SetConfig+0xe0>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d003      	beq.n	8007662 <TIM_OC3_SetConfig+0x92>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a15      	ldr	r2, [pc, #84]	@ (80076b4 <TIM_OC3_SetConfig+0xe4>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d113      	bne.n	800768a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007668:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007670:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	011b      	lsls	r3, r3, #4
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	4313      	orrs	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	699b      	ldr	r3, [r3, #24]
 8007682:	011b      	lsls	r3, r3, #4
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	4313      	orrs	r3, r2
 8007688:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	685a      	ldr	r2, [r3, #4]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	621a      	str	r2, [r3, #32]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bc80      	pop	{r7}
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40012c00 	.word	0x40012c00
 80076b4:	40013400 	.word	0x40013400

080076b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	021b      	lsls	r3, r3, #8
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007702:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	031b      	lsls	r3, r3, #12
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	4313      	orrs	r3, r2
 800770e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a11      	ldr	r2, [pc, #68]	@ (8007758 <TIM_OC4_SetConfig+0xa0>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d003      	beq.n	8007720 <TIM_OC4_SetConfig+0x68>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a10      	ldr	r2, [pc, #64]	@ (800775c <TIM_OC4_SetConfig+0xa4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d109      	bne.n	8007734 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	019b      	lsls	r3, r3, #6
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	4313      	orrs	r3, r2
 8007732:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	bc80      	pop	{r7}
 8007756:	4770      	bx	lr
 8007758:	40012c00 	.word	0x40012c00
 800775c:	40013400 	.word	0x40013400

08007760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800778a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f023 030a 	bic.w	r3, r3, #10
 800779c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0210 	bic.w	r2, r3, #16
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	031b      	lsls	r3, r3, #12
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	621a      	str	r2, [r3, #32]
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	f043 0307 	orr.w	r3, r3, #7
 800783c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800784e:	b480      	push	{r7}
 8007850:	b087      	sub	sp, #28
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007868:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	021a      	lsls	r2, r3, #8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	431a      	orrs	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	609a      	str	r2, [r3, #8]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr

0800788c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2201      	movs	r2, #1
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e05a      	b.n	80079a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a20      	ldr	r2, [pc, #128]	@ (80079ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d022      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1e      	ldr	r2, [pc, #120]	@ (80079b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01d      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007942:	d018      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1a      	ldr	r2, [pc, #104]	@ (80079b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a19      	ldr	r2, [pc, #100]	@ (80079b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d00e      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a17      	ldr	r2, [pc, #92]	@ (80079bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d009      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a16      	ldr	r2, [pc, #88]	@ (80079c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d004      	beq.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a14      	ldr	r2, [pc, #80]	@ (80079c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d10c      	bne.n	8007990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800797c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4313      	orrs	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bc80      	pop	{r7}
 80079aa:	4770      	bx	lr
 80079ac:	40012c00 	.word	0x40012c00
 80079b0:	40013400 	.word	0x40013400
 80079b4:	40000400 	.word	0x40000400
 80079b8:	40000800 	.word	0x40000800
 80079bc:	40000c00 	.word	0x40000c00
 80079c0:	40014c00 	.word	0x40014c00
 80079c4:	40001800 	.word	0x40001800

080079c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079d2:	2300      	movs	r3, #0
 80079d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e03d      	b.n	8007a60 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bc80      	pop	{r7}
 8007a68:	4770      	bx	lr

08007a6a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e042      	b.n	8007b02 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d106      	bne.n	8007a96 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f7fa fd81 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2224      	movs	r2, #36	@ 0x24
 8007a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007aac:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 feec 	bl	800888c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007ac2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007ad2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007ae2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2220      	movs	r2, #32
 8007aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3708      	adds	r7, #8
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b084      	sub	sp, #16
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	60f8      	str	r0, [r7, #12]
 8007b12:	60b9      	str	r1, [r7, #8]
 8007b14:	4613      	mov	r3, r2
 8007b16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	2b20      	cmp	r3, #32
 8007b22:	d112      	bne.n	8007b4a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <HAL_UART_Receive_DMA+0x26>
 8007b2a:	88fb      	ldrh	r3, [r7, #6]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	e00b      	b.n	8007b4c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007b3a:	88fb      	ldrh	r3, [r7, #6]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	68b9      	ldr	r1, [r7, #8]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fc47 	bl	80083d4 <UART_Start_Receive_DMA>
 8007b46:	4603      	mov	r3, r0
 8007b48:	e000      	b.n	8007b4c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8007b4a:	2302      	movs	r3, #2
  }
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b090      	sub	sp, #64	@ 0x40
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	695b      	ldr	r3, [r3, #20]
 8007b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b21      	cmp	r3, #33	@ 0x21
 8007b80:	d128      	bne.n	8007bd4 <HAL_UART_DMAStop+0x80>
 8007b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d025      	beq.n	8007bd4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	623b      	str	r3, [r7, #32]
   return(result);
 8007b98:	6a3b      	ldr	r3, [r7, #32]
 8007b9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007ba8:	633a      	str	r2, [r7, #48]	@ 0x30
 8007baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d004      	beq.n	8007bce <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fd f91b 	bl	8004e04 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fc9a 	bl	8008508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bf14      	ite	ne
 8007be2:	2301      	movne	r3, #1
 8007be4:	2300      	moveq	r3, #0
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b22      	cmp	r3, #34	@ 0x22
 8007bf4:	d128      	bne.n	8007c48 <HAL_UART_DMAStop+0xf4>
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d025      	beq.n	8007c48 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	3314      	adds	r3, #20
 8007c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3314      	adds	r3, #20
 8007c1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007c1c:	61fa      	str	r2, [r7, #28]
 8007c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	69b9      	ldr	r1, [r7, #24]
 8007c22:	69fa      	ldr	r2, [r7, #28]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	617b      	str	r3, [r7, #20]
   return(result);
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e5      	bne.n	8007bfc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d004      	beq.n	8007c42 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fd f8e1 	bl	8004e04 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fc87 	bl	8008556 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3740      	adds	r7, #64	@ 0x40
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b0ba      	sub	sp, #232	@ 0xe8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c8a:	f003 030f 	and.w	r3, r3, #15
 8007c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007c92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9e:	f003 0320 	and.w	r3, r3, #32
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d009      	beq.n	8007cba <HAL_UART_IRQHandler+0x66>
 8007ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007caa:	f003 0320 	and.w	r3, r3, #32
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fd2c 	bl	8008710 <UART_Receive_IT>
      return;
 8007cb8:	e25b      	b.n	8008172 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007cba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 80de 	beq.w	8007e80 <HAL_UART_IRQHandler+0x22c>
 8007cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d106      	bne.n	8007cde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cd4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80d1 	beq.w	8007e80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ce2:	f003 0301 	and.w	r3, r3, #1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00b      	beq.n	8007d02 <HAL_UART_IRQHandler+0xae>
 8007cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d005      	beq.n	8007d02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00b      	beq.n	8007d26 <HAL_UART_IRQHandler+0xd2>
 8007d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d1e:	f043 0202 	orr.w	r2, r3, #2
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00b      	beq.n	8007d4a <HAL_UART_IRQHandler+0xf6>
 8007d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d36:	f003 0301 	and.w	r3, r3, #1
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d005      	beq.n	8007d4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d42:	f043 0204 	orr.w	r2, r3, #4
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d011      	beq.n	8007d7a <HAL_UART_IRQHandler+0x126>
 8007d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d5a:	f003 0320 	and.w	r3, r3, #32
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d005      	beq.n	8007d7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d72:	f043 0208 	orr.w	r2, r3, #8
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 81f2 	beq.w	8008168 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d88:	f003 0320 	and.w	r3, r3, #32
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <HAL_UART_IRQHandler+0x14e>
 8007d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d9c:	6878      	ldr	r0, [r7, #4]
 8007d9e:	f000 fcb7 	bl	8008710 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695b      	ldr	r3, [r3, #20]
 8007da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	bf14      	ite	ne
 8007db0:	2301      	movne	r3, #1
 8007db2:	2300      	moveq	r3, #0
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dbe:	f003 0308 	and.w	r3, r3, #8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <HAL_UART_IRQHandler+0x17a>
 8007dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d04f      	beq.n	8007e6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fbc1 	bl	8008556 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d041      	beq.n	8007e66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3314      	adds	r3, #20
 8007de8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007dfc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3314      	adds	r3, #20
 8007e0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007e0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007e12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007e1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007e26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1d9      	bne.n	8007de2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d013      	beq.n	8007e5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e3a:	4a7e      	ldr	r2, [pc, #504]	@ (8008034 <HAL_UART_IRQHandler+0x3e0>)
 8007e3c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd f81a 	bl	8004e7c <HAL_DMA_Abort_IT>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d016      	beq.n	8007e7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e5c:	e00e      	b.n	8007e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f9a5 	bl	80081ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e64:	e00a      	b.n	8007e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f9a1 	bl	80081ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e6c:	e006      	b.n	8007e7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f99d 	bl	80081ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007e7a:	e175      	b.n	8008168 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	bf00      	nop
    return;
 8007e7e:	e173      	b.n	8008168 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	f040 814f 	bne.w	8008128 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e8e:	f003 0310 	and.w	r3, r3, #16
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f000 8148 	beq.w	8008128 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e9c:	f003 0310 	and.w	r3, r3, #16
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8141 	beq.w	8008128 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60bb      	str	r3, [r7, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	60bb      	str	r3, [r7, #8]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	60bb      	str	r3, [r7, #8]
 8007eba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f000 80b6 	beq.w	8008038 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ed8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 8145 	beq.w	800816c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ee6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007eea:	429a      	cmp	r2, r3
 8007eec:	f080 813e 	bcs.w	800816c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007ef6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	2b20      	cmp	r3, #32
 8007f00:	f000 8088 	beq.w	8008014 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	330c      	adds	r3, #12
 8007f0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007f1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007f30:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f34:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f38:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007f3c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007f48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1d9      	bne.n	8007f04 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	3314      	adds	r3, #20
 8007f56:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f5a:	e853 3f00 	ldrex	r3, [r3]
 8007f5e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f62:	f023 0301 	bic.w	r3, r3, #1
 8007f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3314      	adds	r3, #20
 8007f70:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007f74:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007f78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f7a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007f80:	e841 2300 	strex	r3, r2, [r1]
 8007f84:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007f86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e1      	bne.n	8007f50 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	3314      	adds	r3, #20
 8007f92:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f96:	e853 3f00 	ldrex	r3, [r3]
 8007f9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3314      	adds	r3, #20
 8007fac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007fb0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fb6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fb8:	e841 2300 	strex	r3, r2, [r1]
 8007fbc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fbe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d1e3      	bne.n	8007f8c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2200      	movs	r2, #0
 8007fd0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	330c      	adds	r3, #12
 8007fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fdc:	e853 3f00 	ldrex	r3, [r3]
 8007fe0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fe4:	f023 0310 	bic.w	r3, r3, #16
 8007fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	330c      	adds	r3, #12
 8007ff2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007ff6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ff8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ffc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ffe:	e841 2300 	strex	r3, r2, [r1]
 8008002:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008004:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1e3      	bne.n	8007fd2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800e:	4618      	mov	r0, r3
 8008010:	f7fc fef8 	bl	8004e04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2202      	movs	r2, #2
 8008018:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008022:	b29b      	uxth	r3, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	b29b      	uxth	r3, r3
 8008028:	4619      	mov	r1, r3
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f8c8 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008030:	e09c      	b.n	800816c <HAL_UART_IRQHandler+0x518>
 8008032:	bf00      	nop
 8008034:	0800861b 	.word	0x0800861b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008040:	b29b      	uxth	r3, r3
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 808e 	beq.w	8008170 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008054:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 8089 	beq.w	8008170 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	330c      	adds	r3, #12
 8008064:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800806e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008070:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008074:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	330c      	adds	r3, #12
 800807e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008082:	647a      	str	r2, [r7, #68]	@ 0x44
 8008084:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e3      	bne.n	800805e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3314      	adds	r3, #20
 800809c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	623b      	str	r3, [r7, #32]
   return(result);
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f023 0301 	bic.w	r3, r3, #1
 80080ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	3314      	adds	r3, #20
 80080b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80080ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80080bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80080c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80080c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e3      	bne.n	8008096 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2220      	movs	r2, #32
 80080d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	330c      	adds	r3, #12
 80080e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	e853 3f00 	ldrex	r3, [r3]
 80080ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0310 	bic.w	r3, r3, #16
 80080f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	330c      	adds	r3, #12
 80080fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008100:	61fa      	str	r2, [r7, #28]
 8008102:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008104:	69b9      	ldr	r1, [r7, #24]
 8008106:	69fa      	ldr	r2, [r7, #28]
 8008108:	e841 2300 	strex	r3, r2, [r1]
 800810c:	617b      	str	r3, [r7, #20]
   return(result);
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d1e3      	bne.n	80080dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800811a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 f84d 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008126:	e023      	b.n	8008170 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800812c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_UART_IRQHandler+0x4f4>
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fa7e 	bl	8008642 <UART_Transmit_IT>
    return;
 8008146:	e014      	b.n	8008172 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800814c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00e      	beq.n	8008172 <HAL_UART_IRQHandler+0x51e>
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 fabd 	bl	80086e0 <UART_EndTransmit_IT>
    return;
 8008166:	e004      	b.n	8008172 <HAL_UART_IRQHandler+0x51e>
    return;
 8008168:	bf00      	nop
 800816a:	e002      	b.n	8008172 <HAL_UART_IRQHandler+0x51e>
      return;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_UART_IRQHandler+0x51e>
      return;
 8008170:	bf00      	nop
  }
}
 8008172:	37e8      	adds	r7, #232	@ 0xe8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008180:	bf00      	nop
 8008182:	370c      	adds	r7, #12
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr

0800818a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008192:	bf00      	nop
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	bc80      	pop	{r7}
 800819a:	4770      	bx	lr

0800819c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bc80      	pop	{r7}
 80081ac:	4770      	bx	lr

080081ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80081ae:	b480      	push	{r7}
 80081b0:	b083      	sub	sp, #12
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80081b6:	bf00      	nop
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bc80      	pop	{r7}
 80081be:	4770      	bx	lr

080081c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	460b      	mov	r3, r1
 80081ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80081cc:	bf00      	nop
 80081ce:	370c      	adds	r7, #12
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr

080081d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b09c      	sub	sp, #112	@ 0x70
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0320 	and.w	r3, r3, #32
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d172      	bne.n	80082d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80081f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081f4:	2200      	movs	r2, #0
 80081f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	330c      	adds	r3, #12
 80081fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008202:	e853 3f00 	ldrex	r3, [r3]
 8008206:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800820a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800820e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	330c      	adds	r3, #12
 8008216:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008218:	65ba      	str	r2, [r7, #88]	@ 0x58
 800821a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800821e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008220:	e841 2300 	strex	r3, r2, [r1]
 8008224:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1e5      	bne.n	80081f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800822c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3314      	adds	r3, #20
 8008232:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008236:	e853 3f00 	ldrex	r3, [r3]
 800823a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	667b      	str	r3, [r7, #100]	@ 0x64
 8008244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3314      	adds	r3, #20
 800824a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800824c:	647a      	str	r2, [r7, #68]	@ 0x44
 800824e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008252:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800825a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e5      	bne.n	800822c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3314      	adds	r3, #20
 8008266:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	e853 3f00 	ldrex	r3, [r3]
 800826e:	623b      	str	r3, [r7, #32]
   return(result);
 8008270:	6a3b      	ldr	r3, [r7, #32]
 8008272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008276:	663b      	str	r3, [r7, #96]	@ 0x60
 8008278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	3314      	adds	r3, #20
 800827e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008280:	633a      	str	r2, [r7, #48]	@ 0x30
 8008282:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008288:	e841 2300 	strex	r3, r2, [r1]
 800828c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e5      	bne.n	8008260 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008296:	2220      	movs	r2, #32
 8008298:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800829c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800829e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d119      	bne.n	80082d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	e853 3f00 	ldrex	r3, [r3]
 80082b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 0310 	bic.w	r3, r3, #16
 80082ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	330c      	adds	r3, #12
 80082c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80082c4:	61fa      	str	r2, [r7, #28]
 80082c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c8:	69b9      	ldr	r1, [r7, #24]
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	e841 2300 	strex	r3, r2, [r1]
 80082d0:	617b      	str	r3, [r7, #20]
   return(result);
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1e5      	bne.n	80082a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082da:	2200      	movs	r2, #0
 80082dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d106      	bne.n	80082f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082ea:	4619      	mov	r1, r3
 80082ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082ee:	f7ff ff67 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082f2:	e002      	b.n	80082fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80082f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082f6:	f7ff ff48 	bl	800818a <HAL_UART_RxCpltCallback>
}
 80082fa:	bf00      	nop
 80082fc:	3770      	adds	r7, #112	@ 0x70
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2201      	movs	r2, #1
 8008314:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800831a:	2b01      	cmp	r3, #1
 800831c:	d108      	bne.n	8008330 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	b29b      	uxth	r3, r3
 8008326:	4619      	mov	r1, r3
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff49 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800832e:	e002      	b.n	8008336 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f7ff ff33 	bl	800819c <HAL_UART_RxHalfCpltCallback>
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b084      	sub	sp, #16
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008346:	2300      	movs	r3, #0
 8008348:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800834e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695b      	ldr	r3, [r3, #20]
 8008356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800835a:	2b00      	cmp	r3, #0
 800835c:	bf14      	ite	ne
 800835e:	2301      	movne	r3, #1
 8008360:	2300      	moveq	r3, #0
 8008362:	b2db      	uxtb	r3, r3
 8008364:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800836c:	b2db      	uxtb	r3, r3
 800836e:	2b21      	cmp	r3, #33	@ 0x21
 8008370:	d108      	bne.n	8008384 <UART_DMAError+0x46>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800837e:	68b8      	ldr	r0, [r7, #8]
 8008380:	f000 f8c2 	bl	8008508 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838e:	2b00      	cmp	r3, #0
 8008390:	bf14      	ite	ne
 8008392:	2301      	movne	r3, #1
 8008394:	2300      	moveq	r3, #0
 8008396:	b2db      	uxtb	r3, r3
 8008398:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b22      	cmp	r3, #34	@ 0x22
 80083a4:	d108      	bne.n	80083b8 <UART_DMAError+0x7a>
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d005      	beq.n	80083b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2200      	movs	r2, #0
 80083b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80083b2:	68b8      	ldr	r0, [r7, #8]
 80083b4:	f000 f8cf 	bl	8008556 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083bc:	f043 0210 	orr.w	r2, r3, #16
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083c4:	68b8      	ldr	r0, [r7, #8]
 80083c6:	f7ff fef2 	bl	80081ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b098      	sub	sp, #96	@ 0x60
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	4613      	mov	r3, r2
 80083e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	88fa      	ldrh	r2, [r7, #6]
 80083ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2222      	movs	r2, #34	@ 0x22
 80083f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	4a3e      	ldr	r2, [pc, #248]	@ (80084fc <UART_Start_Receive_DMA+0x128>)
 8008402:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008408:	4a3d      	ldr	r2, [pc, #244]	@ (8008500 <UART_Start_Receive_DMA+0x12c>)
 800840a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	4a3c      	ldr	r2, [pc, #240]	@ (8008504 <UART_Start_Receive_DMA+0x130>)
 8008412:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008418:	2200      	movs	r2, #0
 800841a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800841c:	f107 0308 	add.w	r3, r7, #8
 8008420:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3304      	adds	r3, #4
 800842c:	4619      	mov	r1, r3
 800842e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	88fb      	ldrh	r3, [r7, #6]
 8008434:	f7fc fc86 	bl	8004d44 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008438:	2300      	movs	r3, #0
 800843a:	613b      	str	r3, [r7, #16]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	613b      	str	r3, [r7, #16]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	613b      	str	r3, [r7, #16]
 800844c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d019      	beq.n	800848a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	330c      	adds	r3, #12
 800845c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008468:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800846c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	330c      	adds	r3, #12
 8008474:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008476:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008478:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800847c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e5      	bne.n	8008456 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3314      	adds	r3, #20
 8008490:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800849a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849c:	f043 0301 	orr.w	r3, r3, #1
 80084a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3314      	adds	r3, #20
 80084a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80084aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80084ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80084b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	3314      	adds	r3, #20
 80084c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	e853 3f00 	ldrex	r3, [r3]
 80084cc:	617b      	str	r3, [r7, #20]
   return(result);
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3314      	adds	r3, #20
 80084dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084de:	627a      	str	r2, [r7, #36]	@ 0x24
 80084e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e2:	6a39      	ldr	r1, [r7, #32]
 80084e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084e6:	e841 2300 	strex	r3, r2, [r1]
 80084ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1e5      	bne.n	80084be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3760      	adds	r7, #96	@ 0x60
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	080081d7 	.word	0x080081d7
 8008500:	08008303 	.word	0x08008303
 8008504:	0800833f 	.word	0x0800833f

08008508 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008508:	b480      	push	{r7}
 800850a:	b089      	sub	sp, #36	@ 0x24
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	330c      	adds	r3, #12
 8008516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	e853 3f00 	ldrex	r3, [r3]
 800851e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008526:	61fb      	str	r3, [r7, #28]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	330c      	adds	r3, #12
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	61ba      	str	r2, [r7, #24]
 8008532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008534:	6979      	ldr	r1, [r7, #20]
 8008536:	69ba      	ldr	r2, [r7, #24]
 8008538:	e841 2300 	strex	r3, r2, [r1]
 800853c:	613b      	str	r3, [r7, #16]
   return(result);
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e5      	bne.n	8008510 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2220      	movs	r2, #32
 8008548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800854c:	bf00      	nop
 800854e:	3724      	adds	r7, #36	@ 0x24
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr

08008556 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008556:	b480      	push	{r7}
 8008558:	b095      	sub	sp, #84	@ 0x54
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	330c      	adds	r3, #12
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008568:	e853 3f00 	ldrex	r3, [r3]
 800856c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800856e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008570:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008574:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	330c      	adds	r3, #12
 800857c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800857e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008582:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008584:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008586:	e841 2300 	strex	r3, r2, [r1]
 800858a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800858c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800858e:	2b00      	cmp	r3, #0
 8008590:	d1e5      	bne.n	800855e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3314      	adds	r3, #20
 8008598:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	e853 3f00 	ldrex	r3, [r3]
 80085a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3314      	adds	r3, #20
 80085b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80085b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80085b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80085c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e5      	bne.n	8008592 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d119      	bne.n	8008602 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	330c      	adds	r3, #12
 80085d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	e853 3f00 	ldrex	r3, [r3]
 80085dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	f023 0310 	bic.w	r3, r3, #16
 80085e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085ee:	61ba      	str	r2, [r7, #24]
 80085f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f2:	6979      	ldr	r1, [r7, #20]
 80085f4:	69ba      	ldr	r2, [r7, #24]
 80085f6:	e841 2300 	strex	r3, r2, [r1]
 80085fa:	613b      	str	r3, [r7, #16]
   return(result);
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1e5      	bne.n	80085ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2220      	movs	r2, #32
 8008606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008610:	bf00      	nop
 8008612:	3754      	adds	r7, #84	@ 0x54
 8008614:	46bd      	mov	sp, r7
 8008616:	bc80      	pop	{r7}
 8008618:	4770      	bx	lr

0800861a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008626:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff fdba 	bl	80081ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800863a:	bf00      	nop
 800863c:	3710      	adds	r7, #16
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008642:	b480      	push	{r7}
 8008644:	b085      	sub	sp, #20
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b21      	cmp	r3, #33	@ 0x21
 8008654:	d13e      	bne.n	80086d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800865e:	d114      	bne.n	800868a <UART_Transmit_IT+0x48>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	691b      	ldr	r3, [r3, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d110      	bne.n	800868a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6a1b      	ldr	r3, [r3, #32]
 800866c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	881b      	ldrh	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800867c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	1c9a      	adds	r2, r3, #2
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	621a      	str	r2, [r3, #32]
 8008688:	e008      	b.n	800869c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6211      	str	r1, [r2, #32]
 8008694:	781a      	ldrb	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	3b01      	subs	r3, #1
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	4619      	mov	r1, r3
 80086aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10f      	bne.n	80086d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68da      	ldr	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e000      	b.n	80086d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086d4:	2302      	movs	r3, #2
  }
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2220      	movs	r2, #32
 80086fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f7ff fd39 	bl	8008178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3708      	adds	r7, #8
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08c      	sub	sp, #48	@ 0x30
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800871e:	b2db      	uxtb	r3, r3
 8008720:	2b22      	cmp	r3, #34	@ 0x22
 8008722:	f040 80ae 	bne.w	8008882 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800872e:	d117      	bne.n	8008760 <UART_Receive_IT+0x50>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d113      	bne.n	8008760 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008740:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	685b      	ldr	r3, [r3, #4]
 8008748:	b29b      	uxth	r3, r3
 800874a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800874e:	b29a      	uxth	r2, r3
 8008750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008752:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	1c9a      	adds	r2, r3, #2
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	629a      	str	r2, [r3, #40]	@ 0x28
 800875e:	e026      	b.n	80087ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008772:	d007      	beq.n	8008784 <UART_Receive_IT+0x74>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <UART_Receive_IT+0x82>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	b2da      	uxtb	r2, r3
 800878c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878e:	701a      	strb	r2, [r3, #0]
 8008790:	e008      	b.n	80087a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	4619      	mov	r1, r3
 80087bc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d15d      	bne.n	800887e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	68da      	ldr	r2, [r3, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0220 	bic.w	r2, r2, #32
 80087d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68da      	ldr	r2, [r3, #12]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0201 	bic.w	r2, r2, #1
 80087f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2220      	movs	r2, #32
 80087f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008804:	2b01      	cmp	r3, #1
 8008806:	d135      	bne.n	8008874 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	330c      	adds	r3, #12
 8008814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	e853 3f00 	ldrex	r3, [r3]
 800881c:	613b      	str	r3, [r7, #16]
   return(result);
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f023 0310 	bic.w	r3, r3, #16
 8008824:	627b      	str	r3, [r7, #36]	@ 0x24
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	330c      	adds	r3, #12
 800882c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882e:	623a      	str	r2, [r7, #32]
 8008830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	69f9      	ldr	r1, [r7, #28]
 8008834:	6a3a      	ldr	r2, [r7, #32]
 8008836:	e841 2300 	strex	r3, r2, [r1]
 800883a:	61bb      	str	r3, [r7, #24]
   return(result);
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1e5      	bne.n	800880e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	2b10      	cmp	r3, #16
 800884e:	d10a      	bne.n	8008866 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	60fb      	str	r3, [r7, #12]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	60fb      	str	r3, [r7, #12]
 8008864:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff fca7 	bl	80081c0 <HAL_UARTEx_RxEventCallback>
 8008872:	e002      	b.n	800887a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f7ff fc88 	bl	800818a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e002      	b.n	8008884 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	e000      	b.n	8008884 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008882:	2302      	movs	r3, #2
  }
}
 8008884:	4618      	mov	r0, r3
 8008886:	3730      	adds	r7, #48	@ 0x30
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	430a      	orrs	r2, r1
 80088a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689a      	ldr	r2, [r3, #8]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80088c6:	f023 030c 	bic.w	r3, r3, #12
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6812      	ldr	r2, [r2, #0]
 80088ce:	68b9      	ldr	r1, [r7, #8]
 80088d0:	430b      	orrs	r3, r1
 80088d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	699a      	ldr	r2, [r3, #24]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2c      	ldr	r2, [pc, #176]	@ (80089a0 <UART_SetConfig+0x114>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d103      	bne.n	80088fc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088f4:	f7fd ff28 	bl	8006748 <HAL_RCC_GetPCLK2Freq>
 80088f8:	60f8      	str	r0, [r7, #12]
 80088fa:	e002      	b.n	8008902 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088fc:	f7fd ff10 	bl	8006720 <HAL_RCC_GetPCLK1Freq>
 8008900:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	4613      	mov	r3, r2
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	4413      	add	r3, r2
 800890a:	009a      	lsls	r2, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	fbb2 f3f3 	udiv	r3, r2, r3
 8008918:	4a22      	ldr	r2, [pc, #136]	@ (80089a4 <UART_SetConfig+0x118>)
 800891a:	fba2 2303 	umull	r2, r3, r2, r3
 800891e:	095b      	lsrs	r3, r3, #5
 8008920:	0119      	lsls	r1, r3, #4
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009a      	lsls	r2, r3, #2
 800892c:	441a      	add	r2, r3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	fbb2 f2f3 	udiv	r2, r2, r3
 8008938:	4b1a      	ldr	r3, [pc, #104]	@ (80089a4 <UART_SetConfig+0x118>)
 800893a:	fba3 0302 	umull	r0, r3, r3, r2
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	2064      	movs	r0, #100	@ 0x64
 8008942:	fb00 f303 	mul.w	r3, r0, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	3332      	adds	r3, #50	@ 0x32
 800894c:	4a15      	ldr	r2, [pc, #84]	@ (80089a4 <UART_SetConfig+0x118>)
 800894e:	fba2 2303 	umull	r2, r3, r2, r3
 8008952:	095b      	lsrs	r3, r3, #5
 8008954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008958:	4419      	add	r1, r3
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4613      	mov	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	009a      	lsls	r2, r3, #2
 8008964:	441a      	add	r2, r3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008970:	4b0c      	ldr	r3, [pc, #48]	@ (80089a4 <UART_SetConfig+0x118>)
 8008972:	fba3 0302 	umull	r0, r3, r3, r2
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2064      	movs	r0, #100	@ 0x64
 800897a:	fb00 f303 	mul.w	r3, r0, r3
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	011b      	lsls	r3, r3, #4
 8008982:	3332      	adds	r3, #50	@ 0x32
 8008984:	4a07      	ldr	r2, [pc, #28]	@ (80089a4 <UART_SetConfig+0x118>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	f003 020f 	and.w	r2, r3, #15
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	440a      	add	r2, r1
 8008996:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008998:	bf00      	nop
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	40013800 	.word	0x40013800
 80089a4:	51eb851f 	.word	0x51eb851f

080089a8 <memset>:
 80089a8:	4603      	mov	r3, r0
 80089aa:	4402      	add	r2, r0
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d100      	bne.n	80089b2 <memset+0xa>
 80089b0:	4770      	bx	lr
 80089b2:	f803 1b01 	strb.w	r1, [r3], #1
 80089b6:	e7f9      	b.n	80089ac <memset+0x4>

080089b8 <__libc_init_array>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	2600      	movs	r6, #0
 80089bc:	4d0c      	ldr	r5, [pc, #48]	@ (80089f0 <__libc_init_array+0x38>)
 80089be:	4c0d      	ldr	r4, [pc, #52]	@ (80089f4 <__libc_init_array+0x3c>)
 80089c0:	1b64      	subs	r4, r4, r5
 80089c2:	10a4      	asrs	r4, r4, #2
 80089c4:	42a6      	cmp	r6, r4
 80089c6:	d109      	bne.n	80089dc <__libc_init_array+0x24>
 80089c8:	f000 f81a 	bl	8008a00 <_init>
 80089cc:	2600      	movs	r6, #0
 80089ce:	4d0a      	ldr	r5, [pc, #40]	@ (80089f8 <__libc_init_array+0x40>)
 80089d0:	4c0a      	ldr	r4, [pc, #40]	@ (80089fc <__libc_init_array+0x44>)
 80089d2:	1b64      	subs	r4, r4, r5
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	d105      	bne.n	80089e6 <__libc_init_array+0x2e>
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80089e0:	4798      	blx	r3
 80089e2:	3601      	adds	r6, #1
 80089e4:	e7ee      	b.n	80089c4 <__libc_init_array+0xc>
 80089e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80089ea:	4798      	blx	r3
 80089ec:	3601      	adds	r6, #1
 80089ee:	e7f2      	b.n	80089d6 <__libc_init_array+0x1e>
 80089f0:	08008fbc 	.word	0x08008fbc
 80089f4:	08008fbc 	.word	0x08008fbc
 80089f8:	08008fbc 	.word	0x08008fbc
 80089fc:	08008fc0 	.word	0x08008fc0

08008a00 <_init>:
 8008a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a02:	bf00      	nop
 8008a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a06:	bc08      	pop	{r3}
 8008a08:	469e      	mov	lr, r3
 8008a0a:	4770      	bx	lr

08008a0c <_fini>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	bf00      	nop
 8008a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a12:	bc08      	pop	{r3}
 8008a14:	469e      	mov	lr, r3
 8008a16:	4770      	bx	lr
