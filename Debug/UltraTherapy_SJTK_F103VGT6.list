
UltraTherapy_SJTK_F103VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009350  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08009538  08009538  0000a538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ae8  08009ae8  0000b194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009ae8  08009ae8  0000b194  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009ae8  08009ae8  0000b194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ae8  08009ae8  0000aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009aec  08009aec  0000aaec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08009af0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000198  08009c84  0000b198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  08009c84  0000b830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013559  00000000  00000000  0000b1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bf9  00000000  00000000  0001e716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00022310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1e  00000000  00000000  00023558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4fe  00000000  00000000  00024376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d59  00000000  00000000  00040874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a22f7  00000000  00000000  000595cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb8c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bbc  00000000  00000000  000fb908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001004c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000198 	.word	0x20000198
 8000204:	00000000 	.word	0x00000000
 8000208:	08009520 	.word	0x08009520

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000019c 	.word	0x2000019c
 8000224:	08009520 	.word	0x08009520

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2iz>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009cc:	d215      	bcs.n	80009fa <__aeabi_d2iz+0x36>
 80009ce:	d511      	bpl.n	80009f4 <__aeabi_d2iz+0x30>
 80009d0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d912      	bls.n	8000a00 <__aeabi_d2iz+0x3c>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ea:	fa23 f002 	lsr.w	r0, r3, r2
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d105      	bne.n	8000a0c <__aeabi_d2iz+0x48>
 8000a00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	bf08      	it	eq
 8000a06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a0a:	4770      	bx	lr
 8000a0c:	f04f 0000 	mov.w	r0, #0
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	@ 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	3a01      	subs	r2, #1
 8000b6e:	bf28      	it	cs
 8000b70:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b74:	d2ed      	bcs.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fmul>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d06f      	beq.n	8000dc8 <__aeabi_fmul+0xf8>
 8000ce8:	441a      	add	r2, r3
 8000cea:	ea80 0c01 	eor.w	ip, r0, r1
 8000cee:	0240      	lsls	r0, r0, #9
 8000cf0:	bf18      	it	ne
 8000cf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf6:	d01e      	beq.n	8000d36 <__aeabi_fmul+0x66>
 8000cf8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d04:	fba0 3101 	umull	r3, r1, r0, r1
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d0c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d10:	bf3e      	ittt	cc
 8000d12:	0049      	lslcc	r1, r1, #1
 8000d14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d18:	005b      	lslcc	r3, r3, #1
 8000d1a:	ea40 0001 	orr.w	r0, r0, r1
 8000d1e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d22:	2afd      	cmp	r2, #253	@ 0xfd
 8000d24:	d81d      	bhi.n	8000d62 <__aeabi_fmul+0x92>
 8000d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d3e:	bf08      	it	eq
 8000d40:	0249      	lsleq	r1, r1, #9
 8000d42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4a:	3a7f      	subs	r2, #127	@ 0x7f
 8000d4c:	bfc2      	ittt	gt
 8000d4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d56:	4770      	bxgt	lr
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	dc5d      	bgt.n	8000e20 <__aeabi_fmul+0x150>
 8000d64:	f112 0f19 	cmn.w	r2, #25
 8000d68:	bfdc      	itt	le
 8000d6a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d6e:	4770      	bxle	lr
 8000d70:	f1c2 0200 	rsb	r2, r2, #0
 8000d74:	0041      	lsls	r1, r0, #1
 8000d76:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7a:	f1c2 0220 	rsb	r2, r2, #32
 8000d7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d86:	f140 0000 	adc.w	r0, r0, #0
 8000d8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8e:	bf08      	it	eq
 8000d90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d94:	4770      	bx	lr
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0040      	lsleq	r0, r0, #1
 8000da2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000da6:	3a01      	subeq	r2, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xce>
 8000daa:	ea40 000c 	orr.w	r0, r0, ip
 8000dae:	f093 0f00 	teq	r3, #0
 8000db2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0049      	lsleq	r1, r1, #1
 8000dba:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dbe:	3b01      	subeq	r3, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xe6>
 8000dc2:	ea41 010c 	orr.w	r1, r1, ip
 8000dc6:	e78f      	b.n	8000ce8 <__aeabi_fmul+0x18>
 8000dc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dcc:	ea92 0f0c 	teq	r2, ip
 8000dd0:	bf18      	it	ne
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d00a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de2:	d1d8      	bne.n	8000d96 <__aeabi_fmul+0xc6>
 8000de4:	ea80 0001 	eor.w	r0, r0, r1
 8000de8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	bf17      	itett	ne
 8000df4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	f091 0f00 	teqne	r1, #0
 8000dfe:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e02:	d014      	beq.n	8000e2e <__aeabi_fmul+0x15e>
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	d101      	bne.n	8000e0e <__aeabi_fmul+0x13e>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d10f      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e0e:	ea93 0f0c 	teq	r3, ip
 8000e12:	d103      	bne.n	8000e1c <__aeabi_fmul+0x14c>
 8000e14:	024b      	lsls	r3, r1, #9
 8000e16:	bf18      	it	ne
 8000e18:	4608      	movne	r0, r1
 8000e1a:	d108      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e28:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e2c:	4770      	bx	lr
 8000e2e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e32:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fdiv>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d069      	beq.n	8000f24 <__aeabi_fdiv+0xec>
 8000e50:	eba2 0203 	sub.w	r2, r2, r3
 8000e54:	ea80 0c01 	eor.w	ip, r0, r1
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5e:	d037      	beq.n	8000ed0 <__aeabi_fdiv+0x98>
 8000e60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e6c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf38      	it	cc
 8000e74:	005b      	lslcc	r3, r3, #1
 8000e76:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	bf24      	itt	cs
 8000e82:	1a5b      	subcs	r3, r3, r1
 8000e84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9a:	bf24      	itt	cs
 8000e9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	bf18      	it	ne
 8000eb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eba:	d1e0      	bne.n	8000e7e <__aeabi_fdiv+0x46>
 8000ebc:	2afd      	cmp	r2, #253	@ 0xfd
 8000ebe:	f63f af50 	bhi.w	8000d62 <__aeabi_fmul+0x92>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed8:	327f      	adds	r2, #127	@ 0x7f
 8000eda:	bfc2      	ittt	gt
 8000edc:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee4:	4770      	bxgt	lr
 8000ee6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	e737      	b.n	8000d62 <__aeabi_fmul+0x92>
 8000ef2:	f092 0f00 	teq	r2, #0
 8000ef6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0040      	lsleq	r0, r0, #1
 8000efe:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f02:	3a01      	subeq	r2, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xc2>
 8000f06:	ea40 000c 	orr.w	r0, r0, ip
 8000f0a:	f093 0f00 	teq	r3, #0
 8000f0e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0049      	lsleq	r1, r1, #1
 8000f16:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1a:	3b01      	subeq	r3, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xda>
 8000f1e:	ea41 010c 	orr.w	r1, r1, ip
 8000f22:	e795      	b.n	8000e50 <__aeabi_fdiv+0x18>
 8000f24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d108      	bne.n	8000f40 <__aeabi_fdiv+0x108>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	f47f af7d 	bne.w	8000e2e <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	f47f af70 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e776      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	d104      	bne.n	8000f50 <__aeabi_fdiv+0x118>
 8000f46:	024b      	lsls	r3, r1, #9
 8000f48:	f43f af4c 	beq.w	8000de4 <__aeabi_fmul+0x114>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e76e      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f50:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f54:	bf18      	it	ne
 8000f56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5a:	d1ca      	bne.n	8000ef2 <__aeabi_fdiv+0xba>
 8000f5c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f60:	f47f af5c 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f64:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f68:	f47f af3c 	bne.w	8000de4 <__aeabi_fmul+0x114>
 8000f6c:	e75f      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f6e:	bf00      	nop

08000f70 <__gesf2>:
 8000f70:	f04f 3cff 	mov.w	ip, #4294967295
 8000f74:	e006      	b.n	8000f84 <__cmpsf2+0x4>
 8000f76:	bf00      	nop

08000f78 <__lesf2>:
 8000f78:	f04f 0c01 	mov.w	ip, #1
 8000f7c:	e002      	b.n	8000f84 <__cmpsf2+0x4>
 8000f7e:	bf00      	nop

08000f80 <__cmpsf2>:
 8000f80:	f04f 0c01 	mov.w	ip, #1
 8000f84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f88:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f8c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f90:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f94:	bf18      	it	ne
 8000f96:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9a:	d011      	beq.n	8000fc0 <__cmpsf2+0x40>
 8000f9c:	b001      	add	sp, #4
 8000f9e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa2:	bf18      	it	ne
 8000fa4:	ea90 0f01 	teqne	r0, r1
 8000fa8:	bf58      	it	pl
 8000faa:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fae:	bf88      	it	hi
 8000fb0:	17c8      	asrhi	r0, r1, #31
 8000fb2:	bf38      	it	cc
 8000fb4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fb8:	bf18      	it	ne
 8000fba:	f040 0001 	orrne.w	r0, r0, #1
 8000fbe:	4770      	bx	lr
 8000fc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc4:	d102      	bne.n	8000fcc <__cmpsf2+0x4c>
 8000fc6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fca:	d105      	bne.n	8000fd8 <__cmpsf2+0x58>
 8000fcc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd0:	d1e4      	bne.n	8000f9c <__cmpsf2+0x1c>
 8000fd2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fd6:	d0e1      	beq.n	8000f9c <__cmpsf2+0x1c>
 8000fd8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <__aeabi_cfrcmple>:
 8000fe0:	4684      	mov	ip, r0
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	4661      	mov	r1, ip
 8000fe6:	e7ff      	b.n	8000fe8 <__aeabi_cfcmpeq>

08000fe8 <__aeabi_cfcmpeq>:
 8000fe8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fea:	f7ff ffc9 	bl	8000f80 <__cmpsf2>
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	bf48      	it	mi
 8000ff2:	f110 0f00 	cmnmi.w	r0, #0
 8000ff6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ff8 <__aeabi_fcmpeq>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff fff4 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001000:	bf0c      	ite	eq
 8001002:	2001      	moveq	r0, #1
 8001004:	2000      	movne	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_fcmplt>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff ffea 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001014:	bf34      	ite	cc
 8001016:	2001      	movcc	r0, #1
 8001018:	2000      	movcs	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmple>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffe0 	bl	8000fe8 <__aeabi_cfcmpeq>
 8001028:	bf94      	ite	ls
 800102a:	2001      	movls	r0, #1
 800102c:	2000      	movhi	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmpge>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffd2 	bl	8000fe0 <__aeabi_cfrcmple>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpgt>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffc8 	bl	8000fe0 <__aeabi_cfrcmple>
 8001050:	bf34      	ite	cc
 8001052:	2001      	movcc	r0, #1
 8001054:	2000      	movcs	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800106c:	4b37      	ldr	r3, [pc, #220]	@ (800114c <MX_ADC1_Init+0xf0>)
 800106e:	4a38      	ldr	r2, [pc, #224]	@ (8001150 <MX_ADC1_Init+0xf4>)
 8001070:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001072:	4b36      	ldr	r3, [pc, #216]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001078:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107a:	4b34      	ldr	r3, [pc, #208]	@ (800114c <MX_ADC1_Init+0xf0>)
 800107c:	2201      	movs	r2, #1
 800107e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001080:	4b32      	ldr	r3, [pc, #200]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001082:	2200      	movs	r2, #0
 8001084:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001086:	4b31      	ldr	r3, [pc, #196]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001088:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800108c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800108e:	4b2f      	ldr	r3, [pc, #188]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001096:	2205      	movs	r2, #5
 8001098:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109a:	482c      	ldr	r0, [pc, #176]	@ (800114c <MX_ADC1_Init+0xf0>)
 800109c:	f003 fb6a 	bl	8004774 <HAL_ADC_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80010a6:	f000 faa5 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010aa:	230b      	movs	r3, #11
 80010ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4824      	ldr	r0, [pc, #144]	@ (800114c <MX_ADC1_Init+0xf0>)
 80010bc:	f003 fd3e 	bl	8004b3c <HAL_ADC_ConfigChannel>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010c6:	f000 fa95 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80010ca:	230c      	movs	r3, #12
 80010cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	481d      	ldr	r0, [pc, #116]	@ (800114c <MX_ADC1_Init+0xf0>)
 80010d8:	f003 fd30 	bl	8004b3c <HAL_ADC_ConfigChannel>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80010e2:	f000 fa87 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010e6:	230d      	movs	r3, #13
 80010e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010ea:	2303      	movs	r3, #3
 80010ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	4816      	ldr	r0, [pc, #88]	@ (800114c <MX_ADC1_Init+0xf0>)
 80010f4:	f003 fd22 	bl	8004b3c <HAL_ADC_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010fe:	f000 fa79 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001102:	2310      	movs	r3, #16
 8001104:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001106:	2304      	movs	r3, #4
 8001108:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 800110a:	2306      	movs	r3, #6
 800110c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110e:	1d3b      	adds	r3, r7, #4
 8001110:	4619      	mov	r1, r3
 8001112:	480e      	ldr	r0, [pc, #56]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001114:	f003 fd12 	bl	8004b3c <HAL_ADC_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800111e:	f000 fa69 	bl	80015f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001122:	2311      	movs	r3, #17
 8001124:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001126:	2305      	movs	r3, #5
 8001128:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800112a:	2307      	movs	r3, #7
 800112c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4806      	ldr	r0, [pc, #24]	@ (800114c <MX_ADC1_Init+0xf0>)
 8001134:	f003 fd02 	bl	8004b3c <HAL_ADC_ConfigChannel>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800113e:	f000 fa59 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200001b4 	.word	0x200001b4
 8001150:	40012400 	.word	0x40012400

08001154 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <HAL_ADC_MspInit+0xc0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d14a      	bne.n	800120a <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 800117a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800117e:	6193      	str	r3, [r2, #24]
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	4b1f      	ldr	r3, [pc, #124]	@ (8001218 <HAL_ADC_MspInit+0xc4>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Temp_Sample_Pin|Current_Front_Pin|Current_After_Pin;
 80011a4:	230e      	movs	r3, #14
 80011a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011a8:	2303      	movs	r3, #3
 80011aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	4619      	mov	r1, r3
 80011b2:	481a      	ldr	r0, [pc, #104]	@ (800121c <HAL_ADC_MspInit+0xc8>)
 80011b4:	f005 f866 	bl	8006284 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011ba:	4a1a      	ldr	r2, [pc, #104]	@ (8001224 <HAL_ADC_MspInit+0xd0>)
 80011bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011be:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d0:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480c      	ldr	r0, [pc, #48]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 80011f0:	f004 f85a 	bl	80052a8 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80011fa:	f000 f9fb 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 8001202:	621a      	str	r2, [r3, #32]
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_ADC_MspInit+0xcc>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012400 	.word	0x40012400
 8001218:	40021000 	.word	0x40021000
 800121c:	40011000 	.word	0x40011000
 8001220:	200001e4 	.word	0x200001e4
 8001224:	40020008 	.word	0x40020008

08001228 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122e:	4b14      	ldr	r3, [pc, #80]	@ (8001280 <MX_DMA_Init+0x58>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_DMA_Init+0x58>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6153      	str	r3, [r2, #20]
 800123a:	4b11      	ldr	r3, [pc, #68]	@ (8001280 <MX_DMA_Init+0x58>)
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	200b      	movs	r0, #11
 800124c:	f003 fff5 	bl	800523a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001250:	200b      	movs	r0, #11
 8001252:	f004 f80e 	bl	8005272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	200c      	movs	r0, #12
 800125c:	f003 ffed 	bl	800523a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001260:	200c      	movs	r0, #12
 8001262:	f004 f806 	bl	8005272 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2100      	movs	r1, #0
 800126a:	200d      	movs	r0, #13
 800126c:	f003 ffe5 	bl	800523a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001270:	200d      	movs	r0, #13
 8001272:	f003 fffe 	bl	8005272 <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000

08001284 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 0318 	add.w	r3, r7, #24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001298:	4b71      	ldr	r3, [pc, #452]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a70      	ldr	r2, [pc, #448]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 800129e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b6e      	ldr	r3, [pc, #440]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b68      	ldr	r3, [pc, #416]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b65      	ldr	r3, [pc, #404]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a64      	ldr	r2, [pc, #400]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012ce:	f043 0304 	orr.w	r3, r3, #4
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b62      	ldr	r3, [pc, #392]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a5e      	ldr	r2, [pc, #376]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012e6:	f043 0308 	orr.w	r3, r3, #8
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0308 	and.w	r3, r3, #8
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f8:	4b59      	ldr	r3, [pc, #356]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a58      	ldr	r2, [pc, #352]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 80012fe:	f043 0320 	orr.w	r3, r3, #32
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b56      	ldr	r3, [pc, #344]	@ (8001460 <MX_GPIO_Init+0x1dc>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0320 	and.w	r3, r3, #32
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin|V36CH1_4_EN_Pin|UltraEn_CH5_Pin
 8001310:	2200      	movs	r2, #0
 8001312:	f648 715e 	movw	r1, #36702	@ 0x8f5e
 8001316:	4853      	ldr	r0, [pc, #332]	@ (8001464 <MX_GPIO_Init+0x1e0>)
 8001318:	f005 f948 	bl	80065ac <HAL_GPIO_WritePin>
                          |UltraEn_CH1_Pin|UltraEn_CH2_Pin|UltraEn_CH3_Pin|UltraEn_CH4_Pin
                          |AD5160CH2_CS_Pin|AD5160CH1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 800131c:	2200      	movs	r2, #0
 800131e:	f249 71f0 	movw	r1, #38896	@ 0x97f0
 8001322:	4851      	ldr	r0, [pc, #324]	@ (8001468 <MX_GPIO_Init+0x1e4>)
 8001324:	f005 f942 	bl	80065ac <HAL_GPIO_WritePin>
                          |AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin|UltraEn_CH6_Pin
                          |V36CH5_8_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorEn_CH5_Pin|MotorEn_CH6_Pin|AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin
 8001328:	2200      	movs	r2, #0
 800132a:	f241 31b0 	movw	r1, #5040	@ 0x13b0
 800132e:	484f      	ldr	r0, [pc, #316]	@ (800146c <MX_GPIO_Init+0x1e8>)
 8001330:	f005 f93c 	bl	80065ac <HAL_GPIO_WritePin>
                          |AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorEn_CH7_Pin|MotorEn_CH8_Pin|AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin
 8001334:	2200      	movs	r2, #0
 8001336:	f247 415b 	movw	r1, #29787	@ 0x745b
 800133a:	484d      	ldr	r0, [pc, #308]	@ (8001470 <MX_GPIO_Init+0x1ec>)
 800133c:	f005 f936 	bl	80065ac <HAL_GPIO_WritePin>
                          |UltraEn_CH8_Pin|UltraEn_CH7_Pin|AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin
                          |AD9833CH1_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 8001340:	2200      	movs	r2, #0
 8001342:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 8001346:	484b      	ldr	r0, [pc, #300]	@ (8001474 <MX_GPIO_Init+0x1f0>)
 8001348:	f005 f930 	bl	80065ac <HAL_GPIO_WritePin>
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AD5160CH1_DATA_Pin AD5160CH1_CLK_Pin AD5160CH2_CS_Pin AD5160CH1_CS_Pin */
  GPIO_InitStruct.Pin = AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin|AD5160CH2_CS_Pin|AD5160CH1_CS_Pin;
 800134c:	f248 030e 	movw	r3, #32782	@ 0x800e
 8001350:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4619      	mov	r1, r3
 8001364:	483f      	ldr	r0, [pc, #252]	@ (8001464 <MX_GPIO_Init+0x1e0>)
 8001366:	f004 ff8d 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : V36CH1_4_EN_Pin UltraEn_CH5_Pin UltraEn_CH1_Pin UltraEn_CH2_Pin
                           UltraEn_CH3_Pin UltraEn_CH4_Pin */
  GPIO_InitStruct.Pin = V36CH1_4_EN_Pin|UltraEn_CH5_Pin|UltraEn_CH1_Pin|UltraEn_CH2_Pin
 800136a:	f44f 6375 	mov.w	r3, #3920	@ 0xf50
 800136e:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH3_Pin|UltraEn_CH4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001370:	2301      	movs	r3, #1
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2302      	movs	r3, #2
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137c:	f107 0318 	add.w	r3, r7, #24
 8001380:	4619      	mov	r1, r3
 8001382:	4838      	ldr	r0, [pc, #224]	@ (8001464 <MX_GPIO_Init+0x1e0>)
 8001384:	f004 ff7e 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH1_Pin MotorEn_CH2_Pin MotorEn_CH3_Pin MotorEn_CH4_Pin
                           UltraEn_CH6_Pin V36CH5_8_EN_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 8001388:	f249 03f0 	movw	r3, #37104	@ 0x90f0
 800138c:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH6_Pin|V36CH5_8_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138e:	2301      	movs	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001396:	2302      	movs	r3, #2
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0318 	add.w	r3, r7, #24
 800139e:	4619      	mov	r1, r3
 80013a0:	4831      	ldr	r0, [pc, #196]	@ (8001468 <MX_GPIO_Init+0x1e4>)
 80013a2:	f004 ff6f 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH5_Pin MotorEn_CH6_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH5_Pin|MotorEn_CH6_Pin;
 80013a6:	2330      	movs	r3, #48	@ 0x30
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2302      	movs	r3, #2
 80013b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0318 	add.w	r3, r7, #24
 80013ba:	4619      	mov	r1, r3
 80013bc:	482b      	ldr	r0, [pc, #172]	@ (800146c <MX_GPIO_Init+0x1e8>)
 80013be:	f004 ff61 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH7_Pin MotorEn_CH8_Pin UltraEn_CH8_Pin UltraEn_CH7_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH7_Pin|MotorEn_CH8_Pin|UltraEn_CH8_Pin|UltraEn_CH7_Pin;
 80013c2:	f246 0303 	movw	r3, #24579	@ 0x6003
 80013c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2302      	movs	r3, #2
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0318 	add.w	r3, r7, #24
 80013d8:	4619      	mov	r1, r3
 80013da:	4825      	ldr	r0, [pc, #148]	@ (8001470 <MX_GPIO_Init+0x1ec>)
 80013dc:	f004 ff52 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5160CH2_DATA_Pin AD5160CH2_CLK_Pin AD9833CH1_SCLK_Pin AD9833CH1_SDATA_Pin
                           AD9833CH1_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin|AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin
 80013e0:	f241 4358 	movw	r3, #5208	@ 0x1458
 80013e4:	61bb      	str	r3, [r7, #24]
                          |AD9833CH1_FSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ee:	2303      	movs	r3, #3
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4619      	mov	r1, r3
 80013f8:	481d      	ldr	r0, [pc, #116]	@ (8001470 <MX_GPIO_Init+0x1ec>)
 80013fa:	f004 ff43 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH8_SCLK_Pin AD9833CH8_SDATA_Pin AD9833CH8_FSYNC_Pin AD9833CH7_SCLK_Pin
                           AD9833CH7_SDATA_Pin AD9833CH7_FSYNC_Pin AD9833CH4_SDATA_Pin AD9833CH4_FSYNC_Pin
                           AD9833CH3_SCLK_Pin AD9833CH3_SDATA_Pin AD9833CH3_FSYNC_Pin AD9833CH2_SCLK_Pin
                           AD9833CH2_SDATA_Pin AD9833CH2_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 80013fe:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8001402:	61bb      	str	r3, [r7, #24]
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	4817      	ldr	r0, [pc, #92]	@ (8001474 <MX_GPIO_Init+0x1f0>)
 8001418:	f004 ff34 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH6_SCLK_Pin AD9833CH6_SDATA_Pin AD9833CH6_FSYNC_Pin AD9833CH4_SCLK_Pin */
  GPIO_InitStruct.Pin = AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin|AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin;
 800141c:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142a:	2303      	movs	r3, #3
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	4619      	mov	r1, r3
 8001434:	480d      	ldr	r0, [pc, #52]	@ (800146c <MX_GPIO_Init+0x1e8>)
 8001436:	f004 ff25 	bl	8006284 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH5_SCLK_Pin AD9833CH5_SDATA_Pin AD9833CH5_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin;
 800143a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	4805      	ldr	r0, [pc, #20]	@ (8001468 <MX_GPIO_Init+0x1e4>)
 8001454:	f004 ff16 	bl	8006284 <HAL_GPIO_Init>

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	@ 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40021000 	.word	0x40021000
 8001464:	40011800 	.word	0x40011800
 8001468:	40010800 	.word	0x40010800
 800146c:	40011000 	.word	0x40011000
 8001470:	40010c00 	.word	0x40010c00
 8001474:	40011400 	.word	0x40011400

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147c:	f003 f8f4 	bl	8004668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001480:	f000 f83c 	bl	80014fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001484:	f7ff fefe 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 8001488:	f7ff fece 	bl	8001228 <MX_DMA_Init>
  MX_ADC1_Init();
 800148c:	f7ff fde6 	bl	800105c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001490:	f001 f87c 	bl	800258c <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001494:	f000 f94c 	bl	8001730 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001498:	f000 f9e8 	bl	800186c <MX_TIM2_Init>
  MX_TIM3_Init();
 800149c:	f000 fa5c 	bl	8001958 <MX_TIM3_Init>
  MX_TIM4_Init();
 80014a0:	f000 fad0 	bl	8001a44 <MX_TIM4_Init>
  MX_TIM8_Init();
 80014a4:	f000 fbee 	bl	8001c84 <MX_TIM8_Init>
  MX_TIM9_Init();
 80014a8:	f000 fc8c 	bl	8001dc4 <MX_TIM9_Init>
  MX_TIM10_Init();
 80014ac:	f000 fcec 	bl	8001e88 <MX_TIM10_Init>
  MX_TIM11_Init();
 80014b0:	f000 fd38 	bl	8001f24 <MX_TIM11_Init>
  MX_TIM12_Init();
 80014b4:	f000 fd84 	bl	8001fc0 <MX_TIM12_Init>
  MX_TIM5_Init();
 80014b8:	f000 fb3a 	bl	8001b30 <MX_TIM5_Init>
  MX_TIM6_Init();
 80014bc:	f000 fbae 	bl	8001c1c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DevSystem_Init();
 80014c0:	f001 f972 	bl	80027a8 <DevSystem_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80014c4:	480b      	ldr	r0, [pc, #44]	@ (80014f4 <main+0x7c>)
 80014c6:	f005 ff03 	bl	80072d0 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80014ca:	200a      	movs	r0, #10
 80014cc:	f003 f92e 	bl	800472c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TaskCount > 100)
 80014d0:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <main+0x80>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b64      	cmp	r3, #100	@ 0x64
 80014d6:	d909      	bls.n	80014ec <main+0x74>
	  {
		  DevAD5160Func_Main();
 80014d8:	f001 fc68 	bl	8002dac <DevAD5160Func_Main>
		  DevAD9833Set_Main();
 80014dc:	f001 febc 	bl	8003258 <DevAD9833Set_Main>
		  DevADC1Func_Main();
 80014e0:	f001 ffde 	bl	80034a0 <DevADC1Func_Main>
		  DevFlashWrite_Main();
 80014e4:	f002 fafc 	bl	8003ae0 <DevFlashWrite_Main>
		  DevPwmFunc_Main();
 80014e8:	f002 fbea 	bl	8003cc0 <DevPwmFunc_Main>
	  }
	  AppMainFunc();
 80014ec:	f001 f97c 	bl	80027e8 <AppMainFunc>
	  if(TaskCount > 100)
 80014f0:	e7ee      	b.n	80014d0 <main+0x58>
 80014f2:	bf00      	nop
 80014f4:	20000394 	.word	0x20000394
 80014f8:	20000228 	.word	0x20000228

080014fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b096      	sub	sp, #88	@ 0x58
 8001500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001502:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001506:	2228      	movs	r2, #40	@ 0x28
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 ffdc 	bl	80094c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
 800152e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001530:	2301      	movs	r3, #1
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001538:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800153a:	2300      	movs	r3, #0
 800153c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800153e:	2301      	movs	r3, #1
 8001540:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001542:	2302      	movs	r3, #2
 8001544:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001546:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800154a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800154c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001550:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001552:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001556:	4618      	mov	r0, r3
 8001558:	f005 f840 	bl	80065dc <HAL_RCC_OscConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8001562:	f000 f847 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001566:	230f      	movs	r3, #15
 8001568:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156a:	2302      	movs	r3, #2
 800156c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001572:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f005 faab 	bl	8006ae0 <HAL_RCC_ClockConfig>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001590:	f000 f830 	bl	80015f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001594:	2302      	movs	r3, #2
 8001596:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001598:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800159c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800159e:	1d3b      	adds	r3, r7, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f005 fc2b 	bl	8006dfc <HAL_RCCEx_PeriphCLKConfig>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80015ac:	f000 f822 	bl	80015f4 <Error_Handler>
  }
}
 80015b0:	bf00      	nop
 80015b2:	3758      	adds	r7, #88	@ 0x58
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
	//100us
	if(htim->Instance == TIM6)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a08      	ldr	r2, [pc, #32]	@ (80015e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d109      	bne.n	80015de <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		UltraWorkTime++;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015d2:	6013      	str	r3, [r2, #0]
		TaskCount++;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015dc:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40001000 	.word	0x40001000
 80015ec:	20000618 	.word	0x20000618
 80015f0:	20000228 	.word	0x20000228

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <Error_Handler+0x8>

08001600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <HAL_MspInit+0x5c>)
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	4a14      	ldr	r2, [pc, #80]	@ (800165c <HAL_MspInit+0x5c>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6193      	str	r3, [r2, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_MspInit+0x5c>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_MspInit+0x5c>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_MspInit+0x5c>)
 8001624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001628:	61d3      	str	r3, [r2, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_MspInit+0x5c>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001636:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <HAL_MspInit+0x60>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	4a04      	ldr	r2, [pc, #16]	@ (8001660 <HAL_MspInit+0x60>)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <NMI_Handler+0x4>

0800166c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <MemManage_Handler+0x4>

0800167c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <UsageFault_Handler+0x4>

0800168c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f003 f81e 	bl	80046f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c0:	4802      	ldr	r0, [pc, #8]	@ (80016cc <DMA1_Channel1_IRQHandler+0x10>)
 80016c2:	f004 f80b 	bl	80056dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200001e4 	.word	0x200001e4

080016d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016d4:	4802      	ldr	r0, [pc, #8]	@ (80016e0 <DMA1_Channel2_IRQHandler+0x10>)
 80016d6:	f004 f801 	bl	80056dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	200005d0 	.word	0x200005d0

080016e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016e8:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <DMA1_Channel3_IRQHandler+0x10>)
 80016ea:	f003 fff7 	bl	80056dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000058c 	.word	0x2000058c

080016f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016fc:	4803      	ldr	r0, [pc, #12]	@ (800170c <USART3_IRQHandler+0x14>)
 80016fe:	f006 ffd5 	bl	80086ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_IdleCallback(&huart3);
 8001702:	4802      	ldr	r0, [pc, #8]	@ (800170c <USART3_IRQHandler+0x14>)
 8001704:	f002 fe9c 	bl	8004440 <HAL_UART_IdleCallback>
  /* USER CODE END USART3_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000544 	.word	0x20000544

08001710 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <TIM6_IRQHandler+0x10>)
 8001716:	f005 ffd9 	bl	80076cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000394 	.word	0x20000394

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b096      	sub	sp, #88	@ 0x58
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001736:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001744:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]
 800175e:	615a      	str	r2, [r3, #20]
 8001760:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2220      	movs	r2, #32
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f007 fead 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800176e:	4b3d      	ldr	r3, [pc, #244]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001770:	4a3d      	ldr	r2, [pc, #244]	@ (8001868 <MX_TIM1_Init+0x138>)
 8001772:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001774:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001776:	2247      	movs	r2, #71	@ 0x47
 8001778:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177a:	4b3a      	ldr	r3, [pc, #232]	@ (8001864 <MX_TIM1_Init+0x134>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001780:	4b38      	ldr	r3, [pc, #224]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001782:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001786:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001788:	4b36      	ldr	r3, [pc, #216]	@ (8001864 <MX_TIM1_Init+0x134>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800178e:	4b35      	ldr	r3, [pc, #212]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001794:	4b33      	ldr	r3, [pc, #204]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800179a:	4832      	ldr	r0, [pc, #200]	@ (8001864 <MX_TIM1_Init+0x134>)
 800179c:	f005 fcbc 	bl	8007118 <HAL_TIM_Base_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017a6:	f7ff ff25 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017b4:	4619      	mov	r1, r3
 80017b6:	482b      	ldr	r0, [pc, #172]	@ (8001864 <MX_TIM1_Init+0x134>)
 80017b8:	f006 f93a 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017c2:	f7ff ff17 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017c6:	4827      	ldr	r0, [pc, #156]	@ (8001864 <MX_TIM1_Init+0x134>)
 80017c8:	f005 fdf0 	bl	80073ac <HAL_TIM_PWM_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017d2:	f7ff ff0f 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d6:	2300      	movs	r3, #0
 80017d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017e2:	4619      	mov	r1, r3
 80017e4:	481f      	ldr	r0, [pc, #124]	@ (8001864 <MX_TIM1_Init+0x134>)
 80017e6:	f006 fd1f 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017f0:	f7ff ff00 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f4:	2360      	movs	r3, #96	@ 0x60
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001808:	2300      	movs	r3, #0
 800180a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	220c      	movs	r2, #12
 8001812:	4619      	mov	r1, r3
 8001814:	4813      	ldr	r0, [pc, #76]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001816:	f006 f849 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001820:	f7ff fee8 	bl	80015f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001824:	2300      	movs	r3, #0
 8001826:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001848:	f006 fd68 	bl	800831c <HAL_TIMEx_ConfigBreakDeadTime>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001852:	f7ff fecf 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001856:	4803      	ldr	r0, [pc, #12]	@ (8001864 <MX_TIM1_Init+0x134>)
 8001858:	f000 fd00 	bl	800225c <HAL_TIM_MspPostInit>

}
 800185c:	bf00      	nop
 800185e:	3758      	adds	r7, #88	@ 0x58
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000022c 	.word	0x2000022c
 8001868:	40012c00 	.word	0x40012c00

0800186c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08e      	sub	sp, #56	@ 0x38
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	f107 0320 	add.w	r3, r7, #32
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188a:	1d3b      	adds	r3, r7, #4
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]
 8001898:	615a      	str	r2, [r3, #20]
 800189a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800189c:	4b2d      	ldr	r3, [pc, #180]	@ (8001954 <MX_TIM2_Init+0xe8>)
 800189e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80018a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018a6:	2247      	movs	r2, #71	@ 0x47
 80018a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80018b0:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80018b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b8:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018be:	4b25      	ldr	r3, [pc, #148]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018c4:	4823      	ldr	r0, [pc, #140]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018c6:	f005 fc27 	bl	8007118 <HAL_TIM_Base_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018d0:	f7ff fe90 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018de:	4619      	mov	r1, r3
 80018e0:	481c      	ldr	r0, [pc, #112]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018e2:	f006 f8a5 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018ec:	f7ff fe82 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018f0:	4818      	ldr	r0, [pc, #96]	@ (8001954 <MX_TIM2_Init+0xe8>)
 80018f2:	f005 fd5b 	bl	80073ac <HAL_TIM_PWM_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018fc:	f7ff fe7a 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	4619      	mov	r1, r3
 800190e:	4811      	ldr	r0, [pc, #68]	@ (8001954 <MX_TIM2_Init+0xe8>)
 8001910:	f006 fc8a 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800191a:	f7ff fe6b 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191e:	2360      	movs	r3, #96	@ 0x60
 8001920:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	220c      	movs	r2, #12
 8001932:	4619      	mov	r1, r3
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <MX_TIM2_Init+0xe8>)
 8001936:	f005 ffb9 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001940:	f7ff fe58 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001944:	4803      	ldr	r0, [pc, #12]	@ (8001954 <MX_TIM2_Init+0xe8>)
 8001946:	f000 fc89 	bl	800225c <HAL_TIM_MspPostInit>

}
 800194a:	bf00      	nop
 800194c:	3738      	adds	r7, #56	@ 0x38
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000274 	.word	0x20000274

08001958 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08e      	sub	sp, #56	@ 0x38
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	615a      	str	r2, [r3, #20]
 8001986:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001988:	4b2c      	ldr	r3, [pc, #176]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 800198a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a40 <MX_TIM3_Init+0xe8>)
 800198c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800198e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 8001990:	2247      	movs	r2, #71	@ 0x47
 8001992:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001994:	4b29      	ldr	r3, [pc, #164]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800199a:	4b28      	ldr	r3, [pc, #160]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 800199c:	f242 7210 	movw	r2, #10000	@ 0x2710
 80019a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a2:	4b26      	ldr	r3, [pc, #152]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a8:	4b24      	ldr	r3, [pc, #144]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019ae:	4823      	ldr	r0, [pc, #140]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019b0:	f005 fbb2 	bl	8007118 <HAL_TIM_Base_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019ba:	f7ff fe1b 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019c8:	4619      	mov	r1, r3
 80019ca:	481c      	ldr	r0, [pc, #112]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019cc:	f006 f830 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019d6:	f7ff fe0d 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019da:	4818      	ldr	r0, [pc, #96]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019dc:	f005 fce6 	bl	80073ac <HAL_TIM_PWM_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019e6:	f7ff fe05 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f2:	f107 0320 	add.w	r3, r7, #32
 80019f6:	4619      	mov	r1, r3
 80019f8:	4810      	ldr	r0, [pc, #64]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 80019fa:	f006 fc15 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a04:	f7ff fdf6 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a08:	2360      	movs	r3, #96	@ 0x60
 8001a0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 8001a20:	f005 ff44 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a2a:	f7ff fde3 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a2e:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <MX_TIM3_Init+0xe4>)
 8001a30:	f000 fc14 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001a34:	bf00      	nop
 8001a36:	3738      	adds	r7, #56	@ 0x38
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200002bc 	.word	0x200002bc
 8001a40:	40000400 	.word	0x40000400

08001a44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08e      	sub	sp, #56	@ 0x38
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
 8001a70:	615a      	str	r2, [r3, #20]
 8001a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a74:	4b2c      	ldr	r3, [pc, #176]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a76:	4a2d      	ldr	r2, [pc, #180]	@ (8001b2c <MX_TIM4_Init+0xe8>)
 8001a78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a7c:	2247      	movs	r2, #71	@ 0x47
 8001a7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a80:	4b29      	ldr	r3, [pc, #164]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a88:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a94:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a9a:	4823      	ldr	r0, [pc, #140]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001a9c:	f005 fb3c 	bl	8007118 <HAL_TIM_Base_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001aa6:	f7ff fda5 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aae:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ab0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	481c      	ldr	r0, [pc, #112]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ab8:	f005 ffba 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ac2:	f7ff fd97 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ac6:	4818      	ldr	r0, [pc, #96]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ac8:	f005 fc70 	bl	80073ac <HAL_TIM_PWM_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ad2:	f7ff fd8f 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ade:	f107 0320 	add.w	r3, r7, #32
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4810      	ldr	r0, [pc, #64]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001ae6:	f006 fb9f 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001af0:	f7ff fd80 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001af4:	2360      	movs	r3, #96	@ 0x60
 8001af6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2204      	movs	r2, #4
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4807      	ldr	r0, [pc, #28]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001b0c:	f005 fece 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b16:	f7ff fd6d 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b1a:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <MX_TIM4_Init+0xe4>)
 8001b1c:	f000 fb9e 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001b20:	bf00      	nop
 8001b22:	3738      	adds	r7, #56	@ 0x38
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000304 	.word	0x20000304
 8001b2c:	40000800 	.word	0x40000800

08001b30 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08e      	sub	sp, #56	@ 0x38
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	f107 0320 	add.w	r3, r7, #32
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
 8001b5c:	615a      	str	r2, [r3, #20]
 8001b5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b60:	4b2c      	ldr	r3, [pc, #176]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b62:	4a2d      	ldr	r2, [pc, #180]	@ (8001c18 <MX_TIM5_Init+0xe8>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8001b66:	4b2b      	ldr	r3, [pc, #172]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b68:	2247      	movs	r2, #71	@ 0x47
 8001b6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6c:	4b29      	ldr	r3, [pc, #164]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001b72:	4b28      	ldr	r3, [pc, #160]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b74:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7a:	4b26      	ldr	r3, [pc, #152]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b24      	ldr	r3, [pc, #144]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b86:	4823      	ldr	r0, [pc, #140]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001b88:	f005 fac6 	bl	8007118 <HAL_TIM_Base_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b92:	f7ff fd2f 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b9c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481c      	ldr	r0, [pc, #112]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001ba4:	f005 ff44 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001bae:	f7ff fd21 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bb2:	4818      	ldr	r0, [pc, #96]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001bb4:	f005 fbfa 	bl	80073ac <HAL_TIM_PWM_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001bbe:	f7ff fd19 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bca:	f107 0320 	add.w	r3, r7, #32
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4810      	ldr	r0, [pc, #64]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001bd2:	f006 fb29 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001bdc:	f7ff fd0a 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be0:	2360      	movs	r3, #96	@ 0x60
 8001be2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4807      	ldr	r0, [pc, #28]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001bf8:	f005 fe58 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001c02:	f7ff fcf7 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c06:	4803      	ldr	r0, [pc, #12]	@ (8001c14 <MX_TIM5_Init+0xe4>)
 8001c08:	f000 fb28 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001c0c:	bf00      	nop
 8001c0e:	3738      	adds	r7, #56	@ 0x38
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000034c 	.word	0x2000034c
 8001c18:	40000c00 	.word	0x40000c00

08001c1c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c22:	463b      	mov	r3, r7
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c2a:	4b14      	ldr	r3, [pc, #80]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c2c:	4a14      	ldr	r2, [pc, #80]	@ (8001c80 <MX_TIM6_Init+0x64>)
 8001c2e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8001c30:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c32:	2247      	movs	r2, #71	@ 0x47
 8001c34:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c3e:	2263      	movs	r2, #99	@ 0x63
 8001c40:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c48:	480c      	ldr	r0, [pc, #48]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c4a:	f005 fa65 	bl	8007118 <HAL_TIM_Base_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001c54:	f7ff fcce 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	@ (8001c7c <MX_TIM6_Init+0x60>)
 8001c66:	f006 fadf 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001c70:	f7ff fcc0 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000394 	.word	0x20000394
 8001c80:	40001000 	.word	0x40001000

08001c84 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b096      	sub	sp, #88	@ 0x58
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]
 8001cb2:	615a      	str	r2, [r3, #20]
 8001cb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	2220      	movs	r2, #32
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f007 fc03 	bl	80094c8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc0 <MX_TIM8_Init+0x13c>)
 8001cc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8001cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cca:	2247      	movs	r2, #71	@ 0x47
 8001ccc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cce:	4b3b      	ldr	r3, [pc, #236]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001cd4:	4b39      	ldr	r3, [pc, #228]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cdc:	4b37      	ldr	r3, [pc, #220]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ce2:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce8:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cee:	4833      	ldr	r0, [pc, #204]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001cf0:	f005 fa12 	bl	8007118 <HAL_TIM_Base_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001cfa:	f7ff fc7b 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cfe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d08:	4619      	mov	r1, r3
 8001d0a:	482c      	ldr	r0, [pc, #176]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001d0c:	f005 fe90 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001d16:	f7ff fc6d 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d1a:	4828      	ldr	r0, [pc, #160]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001d1c:	f005 fb46 	bl	80073ac <HAL_TIM_PWM_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d26:	f7ff fc65 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d36:	4619      	mov	r1, r3
 8001d38:	4820      	ldr	r0, [pc, #128]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001d3a:	f006 fa75 	bl	8008228 <HAL_TIMEx_MasterConfigSynchronization>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d44:	f7ff fc56 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d48:	2360      	movs	r3, #96	@ 0x60
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d54:	2300      	movs	r3, #0
 8001d56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d60:	2300      	movs	r3, #0
 8001d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d68:	2200      	movs	r2, #0
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4813      	ldr	r0, [pc, #76]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001d6e:	f005 fd9d 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d78:	f7ff fc3c 	bl	80015f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d84:	2300      	movs	r3, #0
 8001d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001da0:	f006 fabc 	bl	800831c <HAL_TIMEx_ConfigBreakDeadTime>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001daa:	f7ff fc23 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <MX_TIM8_Init+0x138>)
 8001db0:	f000 fa54 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3758      	adds	r7, #88	@ 0x58
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200003dc 	.word	0x200003dc
 8001dc0:	40013400 	.word	0x40013400

08001dc4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08c      	sub	sp, #48	@ 0x30
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
 8001dd6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
 8001de4:	611a      	str	r2, [r3, #16]
 8001de6:	615a      	str	r2, [r3, #20]
 8001de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001dea:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001dec:	4a25      	ldr	r2, [pc, #148]	@ (8001e84 <MX_TIM9_Init+0xc0>)
 8001dee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72-1;
 8001df0:	4b23      	ldr	r3, [pc, #140]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001df2:	2247      	movs	r2, #71	@ 0x47
 8001df4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4255;
 8001dfc:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001dfe:	f241 029f 	movw	r2, #4255	@ 0x109f
 8001e02:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e10:	481b      	ldr	r0, [pc, #108]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e12:	f005 f981 	bl	8007118 <HAL_TIM_Base_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001e1c:	f7ff fbea 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e24:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4814      	ldr	r0, [pc, #80]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e2e:	f005 fdff 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e38:	f7ff fbdc 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e3c:	4810      	ldr	r0, [pc, #64]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e3e:	f005 fab5 	bl	80073ac <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e48:	f7ff fbd4 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e4c:	2360      	movs	r3, #96	@ 0x60
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e64:	f005 fd22 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e6e:	f7ff fbc1 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <MX_TIM9_Init+0xbc>)
 8001e74:	f000 f9f2 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001e78:	bf00      	nop
 8001e7a:	3730      	adds	r7, #48	@ 0x30
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000424 	.word	0x20000424
 8001e84:	40014c00 	.word	0x40014c00

08001e88 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e8e:	1d3b      	adds	r3, r7, #4
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
 8001e9c:	615a      	str	r2, [r3, #20]
 8001e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ea0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f20 <MX_TIM10_Init+0x98>)
 8001ea4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ea8:	2247      	movs	r2, #71	@ 0x47
 8001eaa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001eb4:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001eb8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eba:	4b18      	ldr	r3, [pc, #96]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001ec6:	4815      	ldr	r0, [pc, #84]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ec8:	f005 f926 	bl	8007118 <HAL_TIM_Base_Init>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001ed2:	f7ff fb8f 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001ed6:	4811      	ldr	r0, [pc, #68]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001ed8:	f005 fa68 	bl	80073ac <HAL_TIM_PWM_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001ee2:	f7ff fb87 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ee6:	2360      	movs	r3, #96	@ 0x60
 8001ee8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	4619      	mov	r1, r3
 8001efc:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001efe:	f005 fcd5 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001f08:	f7ff fb74 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001f0c:	4803      	ldr	r0, [pc, #12]	@ (8001f1c <MX_TIM10_Init+0x94>)
 8001f0e:	f000 f9a5 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001f12:	bf00      	nop
 8001f14:	3720      	adds	r7, #32
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000046c 	.word	0x2000046c
 8001f20:	40015000 	.word	0x40015000

08001f24 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]
 8001f38:	615a      	str	r2, [r3, #20]
 8001f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8001fbc <MX_TIM11_Init+0x98>)
 8001f40:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 72-1;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f44:	2247      	movs	r2, #71	@ 0x47
 8001f46:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f48:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f50:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f54:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5c:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f62:	4815      	ldr	r0, [pc, #84]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f64:	f005 f8d8 	bl	8007118 <HAL_TIM_Base_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001f6e:	f7ff fb41 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001f72:	4811      	ldr	r0, [pc, #68]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f74:	f005 fa1a 	bl	80073ac <HAL_TIM_PWM_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001f7e:	f7ff fb39 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f82:	2360      	movs	r3, #96	@ 0x60
 8001f84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f92:	1d3b      	adds	r3, r7, #4
 8001f94:	2200      	movs	r2, #0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001f9a:	f005 fc87 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001fa4:	f7ff fb26 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001fa8:	4803      	ldr	r0, [pc, #12]	@ (8001fb8 <MX_TIM11_Init+0x94>)
 8001faa:	f000 f957 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001fae:	bf00      	nop
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200004b4 	.word	0x200004b4
 8001fbc:	40015400 	.word	0x40015400

08001fc0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b08c      	sub	sp, #48	@ 0x30
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
 8001fce:	605a      	str	r2, [r3, #4]
 8001fd0:	609a      	str	r2, [r3, #8]
 8001fd2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fe6:	4b25      	ldr	r3, [pc, #148]	@ (800207c <MX_TIM12_Init+0xbc>)
 8001fe8:	4a25      	ldr	r2, [pc, #148]	@ (8002080 <MX_TIM12_Init+0xc0>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 8001fec:	4b23      	ldr	r3, [pc, #140]	@ (800207c <MX_TIM12_Init+0xbc>)
 8001fee:	2247      	movs	r2, #71	@ 0x47
 8001ff0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_TIM12_Init+0xbc>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000;
 8001ff8:	4b20      	ldr	r3, [pc, #128]	@ (800207c <MX_TIM12_Init+0xbc>)
 8001ffa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ffe:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002000:	4b1e      	ldr	r3, [pc, #120]	@ (800207c <MX_TIM12_Init+0xbc>)
 8002002:	2200      	movs	r2, #0
 8002004:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_TIM12_Init+0xbc>)
 8002008:	2200      	movs	r2, #0
 800200a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800200c:	481b      	ldr	r0, [pc, #108]	@ (800207c <MX_TIM12_Init+0xbc>)
 800200e:	f005 f883 	bl	8007118 <HAL_TIM_Base_Init>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002018:	f7ff faec 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800201c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002020:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	4619      	mov	r1, r3
 8002028:	4814      	ldr	r0, [pc, #80]	@ (800207c <MX_TIM12_Init+0xbc>)
 800202a:	f005 fd01 	bl	8007a30 <HAL_TIM_ConfigClockSource>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8002034:	f7ff fade 	bl	80015f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002038:	4810      	ldr	r0, [pc, #64]	@ (800207c <MX_TIM12_Init+0xbc>)
 800203a:	f005 f9b7 	bl	80073ac <HAL_TIM_PWM_Init>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8002044:	f7ff fad6 	bl	80015f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002048:	2360      	movs	r3, #96	@ 0x60
 800204a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2204      	movs	r2, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_TIM12_Init+0xbc>)
 8002060:	f005 fc24 	bl	80078ac <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800206a:	f7ff fac3 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800206e:	4803      	ldr	r0, [pc, #12]	@ (800207c <MX_TIM12_Init+0xbc>)
 8002070:	f000 f8f4 	bl	800225c <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3730      	adds	r7, #48	@ 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200004fc 	.word	0x200004fc
 8002080:	40001800 	.word	0x40001800

08002084 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08e      	sub	sp, #56	@ 0x38
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a67      	ldr	r2, [pc, #412]	@ (8002230 <HAL_TIM_Base_MspInit+0x1ac>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10c      	bne.n	80020b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002096:	4b67      	ldr	r3, [pc, #412]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	4a66      	ldr	r2, [pc, #408]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 800209c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020a0:	6193      	str	r3, [r2, #24]
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80020ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 80020ae:	e0ba      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM2)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b8:	d10c      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a5d      	ldr	r2, [pc, #372]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80020d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80020d2:	e0a8      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a57      	ldr	r2, [pc, #348]	@ (8002238 <HAL_TIM_Base_MspInit+0x1b4>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10c      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a54      	ldr	r2, [pc, #336]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020e4:	f043 0302 	orr.w	r3, r3, #2
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b52      	ldr	r3, [pc, #328]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020f6:	e096      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM4)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a4f      	ldr	r2, [pc, #316]	@ (800223c <HAL_TIM_Base_MspInit+0x1b8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10c      	bne.n	800211c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002102:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	61d3      	str	r3, [r2, #28]
 800210e:	4b49      	ldr	r3, [pc, #292]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800211a:	e084      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM5)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a47      	ldr	r2, [pc, #284]	@ (8002240 <HAL_TIM_Base_MspInit+0x1bc>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10c      	bne.n	8002140 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002126:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a42      	ldr	r2, [pc, #264]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
 800213c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800213e:	e072      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM6)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a3f      	ldr	r2, [pc, #252]	@ (8002244 <HAL_TIM_Base_MspInit+0x1c0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d114      	bne.n	8002174 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800214a:	4b3a      	ldr	r3, [pc, #232]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	4a39      	ldr	r2, [pc, #228]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002150:	f043 0310 	orr.w	r3, r3, #16
 8002154:	61d3      	str	r3, [r2, #28]
 8002156:	4b37      	ldr	r3, [pc, #220]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002162:	2200      	movs	r2, #0
 8002164:	2100      	movs	r1, #0
 8002166:	2036      	movs	r0, #54	@ 0x36
 8002168:	f003 f867 	bl	800523a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800216c:	2036      	movs	r0, #54	@ 0x36
 800216e:	f003 f880 	bl	8005272 <HAL_NVIC_EnableIRQ>
}
 8002172:	e058      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM8)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a33      	ldr	r2, [pc, #204]	@ (8002248 <HAL_TIM_Base_MspInit+0x1c4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d10c      	bne.n	8002198 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800217e:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	4a2c      	ldr	r2, [pc, #176]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002184:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002188:	6193      	str	r3, [r2, #24]
 800218a:	4b2a      	ldr	r3, [pc, #168]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
}
 8002196:	e046      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM9)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <HAL_TIM_Base_MspInit+0x1c8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10c      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80021a2:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021ac:	6193      	str	r3, [r2, #24]
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
}
 80021ba:	e034      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM10)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <HAL_TIM_Base_MspInit+0x1cc>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d10c      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
}
 80021de:	e022      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM11)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <HAL_TIM_Base_MspInit+0x1d0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d10c      	bne.n	8002204 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a11      	ldr	r2, [pc, #68]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
}
 8002202:	e010      	b.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM12)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <HAL_TIM_Base_MspInit+0x1d4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d10b      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 8002214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <HAL_TIM_Base_MspInit+0x1b0>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]
}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	@ 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40012c00 	.word	0x40012c00
 8002234:	40021000 	.word	0x40021000
 8002238:	40000400 	.word	0x40000400
 800223c:	40000800 	.word	0x40000800
 8002240:	40000c00 	.word	0x40000c00
 8002244:	40001000 	.word	0x40001000
 8002248:	40013400 	.word	0x40013400
 800224c:	40014c00 	.word	0x40014c00
 8002250:	40015000 	.word	0x40015000
 8002254:	40015400 	.word	0x40015400
 8002258:	40001800 	.word	0x40001800

0800225c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b094      	sub	sp, #80	@ 0x50
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a93      	ldr	r2, [pc, #588]	@ (80024c4 <HAL_TIM_MspPostInit+0x268>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d12b      	bne.n	80022d4 <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800227c:	4b92      	ldr	r3, [pc, #584]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a91      	ldr	r2, [pc, #580]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002290:	633b      	str	r3, [r7, #48]	@ 0x30
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002294:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002298:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229e:	2302      	movs	r3, #2
 80022a0:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022a6:	4619      	mov	r1, r3
 80022a8:	4888      	ldr	r0, [pc, #544]	@ (80024cc <HAL_TIM_MspPostInit+0x270>)
 80022aa:	f003 ffeb 	bl	8006284 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 80022ae:	4b88      	ldr	r3, [pc, #544]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80022bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022be:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80022c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80022cc:	4a80      	ldr	r2, [pc, #512]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 80022ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022d2:	e14e      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM2)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022dc:	d12b      	bne.n	8002336 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	4b7a      	ldr	r3, [pc, #488]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	4a79      	ldr	r2, [pc, #484]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6193      	str	r3, [r2, #24]
 80022ea:	4b77      	ldr	r3, [pc, #476]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022fa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2302      	movs	r3, #2
 8002302:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002308:	4619      	mov	r1, r3
 800230a:	4872      	ldr	r0, [pc, #456]	@ (80024d4 <HAL_TIM_MspPostInit+0x278>)
 800230c:	f003 ffba 	bl	8006284 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8002310:	4b6f      	ldr	r3, [pc, #444]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002318:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800231e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002320:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002324:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002328:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800232c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800232e:	4a68      	ldr	r2, [pc, #416]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 8002330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002332:	6053      	str	r3, [r2, #4]
}
 8002334:	e11d      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM3)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a67      	ldr	r2, [pc, #412]	@ (80024d8 <HAL_TIM_MspPostInit+0x27c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d12a      	bne.n	8002396 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002340:	4b61      	ldr	r3, [pc, #388]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	4a60      	ldr	r2, [pc, #384]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6193      	str	r3, [r2, #24]
 800234c:	4b5e      	ldr	r3, [pc, #376]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	f003 0308 	and.w	r3, r3, #8
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002358:	2320      	movs	r3, #32
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2302      	movs	r3, #2
 8002362:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002368:	4619      	mov	r1, r3
 800236a:	485a      	ldr	r0, [pc, #360]	@ (80024d4 <HAL_TIM_MspPostInit+0x278>)
 800236c:	f003 ff8a 	bl	8006284 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002370:	4b57      	ldr	r3, [pc, #348]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002378:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800237c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800237e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002380:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002388:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800238c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800238e:	4a50      	ldr	r2, [pc, #320]	@ (80024d0 <HAL_TIM_MspPostInit+0x274>)
 8002390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002392:	6053      	str	r3, [r2, #4]
}
 8002394:	e0ed      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM4)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a50      	ldr	r2, [pc, #320]	@ (80024dc <HAL_TIM_MspPostInit+0x280>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d118      	bne.n	80023d2 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	4b49      	ldr	r3, [pc, #292]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023a6:	f043 0308 	orr.w	r3, r3, #8
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b46      	ldr	r3, [pc, #280]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2302      	movs	r3, #2
 80023c2:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023c8:	4619      	mov	r1, r3
 80023ca:	4842      	ldr	r0, [pc, #264]	@ (80024d4 <HAL_TIM_MspPostInit+0x278>)
 80023cc:	f003 ff5a 	bl	8006284 <HAL_GPIO_Init>
}
 80023d0:	e0cf      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM5)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a42      	ldr	r2, [pc, #264]	@ (80024e0 <HAL_TIM_MspPostInit+0x284>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d118      	bne.n	800240e <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023dc:	4b3a      	ldr	r3, [pc, #232]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	4a39      	ldr	r2, [pc, #228]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023e2:	f043 0304 	orr.w	r3, r3, #4
 80023e6:	6193      	str	r3, [r2, #24]
 80023e8:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023f4:	2304      	movs	r3, #4
 80023f6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f8:	2302      	movs	r3, #2
 80023fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fc:	2302      	movs	r3, #2
 80023fe:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002400:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002404:	4619      	mov	r1, r3
 8002406:	4837      	ldr	r0, [pc, #220]	@ (80024e4 <HAL_TIM_MspPostInit+0x288>)
 8002408:	f003 ff3c 	bl	8006284 <HAL_GPIO_Init>
}
 800240c:	e0b1      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM8)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a35      	ldr	r2, [pc, #212]	@ (80024e8 <HAL_TIM_MspPostInit+0x28c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d118      	bne.n	800244a <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002418:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4a2a      	ldr	r2, [pc, #168]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	6193      	str	r3, [r2, #24]
 8002424:	4b28      	ldr	r3, [pc, #160]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002430:	2340      	movs	r3, #64	@ 0x40
 8002432:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2302      	movs	r3, #2
 800243a:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800243c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002440:	4619      	mov	r1, r3
 8002442:	482a      	ldr	r0, [pc, #168]	@ (80024ec <HAL_TIM_MspPostInit+0x290>)
 8002444:	f003 ff1e 	bl	8006284 <HAL_GPIO_Init>
}
 8002448:	e093      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM9)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a28      	ldr	r2, [pc, #160]	@ (80024f0 <HAL_TIM_MspPostInit+0x294>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d118      	bne.n	8002486 <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b1c      	ldr	r3, [pc, #112]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800245a:	f043 0304 	orr.w	r3, r3, #4
 800245e:	6193      	str	r3, [r2, #24]
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800246c:	2308      	movs	r3, #8
 800246e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2302      	movs	r3, #2
 8002476:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002478:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800247c:	4619      	mov	r1, r3
 800247e:	4819      	ldr	r0, [pc, #100]	@ (80024e4 <HAL_TIM_MspPostInit+0x288>)
 8002480:	f003 ff00 	bl	8006284 <HAL_GPIO_Init>
}
 8002484:	e075      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM10)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1a      	ldr	r2, [pc, #104]	@ (80024f4 <HAL_TIM_MspPostInit+0x298>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d133      	bne.n	80024f8 <HAL_TIM_MspPostInit+0x29c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b0d      	ldr	r3, [pc, #52]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a0c      	ldr	r2, [pc, #48]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 8002496:	f043 0308 	orr.w	r3, r3, #8
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_TIM_MspPostInit+0x26c>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80024a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024ac:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2302      	movs	r3, #2
 80024b4:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024ba:	4619      	mov	r1, r3
 80024bc:	4805      	ldr	r0, [pc, #20]	@ (80024d4 <HAL_TIM_MspPostInit+0x278>)
 80024be:	f003 fee1 	bl	8006284 <HAL_GPIO_Init>
}
 80024c2:	e056      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
 80024c4:	40012c00 	.word	0x40012c00
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40011800 	.word	0x40011800
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40010c00 	.word	0x40010c00
 80024d8:	40000400 	.word	0x40000400
 80024dc:	40000800 	.word	0x40000800
 80024e0:	40000c00 	.word	0x40000c00
 80024e4:	40010800 	.word	0x40010800
 80024e8:	40013400 	.word	0x40013400
 80024ec:	40011000 	.word	0x40011000
 80024f0:	40014c00 	.word	0x40014c00
 80024f4:	40015000 	.word	0x40015000
  else if(timHandle->Instance==TIM11)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1f      	ldr	r2, [pc, #124]	@ (800257c <HAL_TIM_MspPostInit+0x320>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d119      	bne.n	8002536 <HAL_TIM_MspPostInit+0x2da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	4a1e      	ldr	r2, [pc, #120]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 8002508:	f043 0308 	orr.w	r3, r3, #8
 800250c:	6193      	str	r3, [r2, #24]
 800250e:	4b1c      	ldr	r3, [pc, #112]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800251a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800251e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002520:	2302      	movs	r3, #2
 8002522:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002524:	2302      	movs	r3, #2
 8002526:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002528:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800252c:	4619      	mov	r1, r3
 800252e:	4815      	ldr	r0, [pc, #84]	@ (8002584 <HAL_TIM_MspPostInit+0x328>)
 8002530:	f003 fea8 	bl	8006284 <HAL_GPIO_Init>
}
 8002534:	e01d      	b.n	8002572 <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM12)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a13      	ldr	r2, [pc, #76]	@ (8002588 <HAL_TIM_MspPostInit+0x32c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d118      	bne.n	8002572 <HAL_TIM_MspPostInit+0x316>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002540:	4b0f      	ldr	r3, [pc, #60]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a0e      	ldr	r2, [pc, #56]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 8002546:	f043 0308 	orr.w	r3, r3, #8
 800254a:	6193      	str	r3, [r2, #24]
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <HAL_TIM_MspPostInit+0x324>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002558:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800255c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2302      	movs	r3, #2
 8002564:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002566:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	@ (8002584 <HAL_TIM_MspPostInit+0x328>)
 800256e:	f003 fe89 	bl	8006284 <HAL_GPIO_Init>
}
 8002572:	bf00      	nop
 8002574:	3750      	adds	r7, #80	@ 0x50
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40015400 	.word	0x40015400
 8002580:	40021000 	.word	0x40021000
 8002584:	40010c00 	.word	0x40010c00
 8002588:	40001800 	.word	0x40001800

0800258c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002590:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 8002592:	4a12      	ldr	r2, [pc, #72]	@ (80025dc <MX_USART3_UART_Init+0x50>)
 8002594:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 8002598:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800259c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025b0:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025b2:	220c      	movs	r2, #12
 80025b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025b6:	4b08      	ldr	r3, [pc, #32]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025c2:	4805      	ldr	r0, [pc, #20]	@ (80025d8 <MX_USART3_UART_Init+0x4c>)
 80025c4:	f005 ff0d 	bl	80083e2 <HAL_UART_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025ce:	f7ff f811 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000544 	.word	0x20000544
 80025dc:	40004800 	.word	0x40004800

080025e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a50      	ldr	r2, [pc, #320]	@ (800273c <HAL_UART_MspInit+0x15c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	f040 8098 	bne.w	8002732 <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002602:	4b4f      	ldr	r3, [pc, #316]	@ (8002740 <HAL_UART_MspInit+0x160>)
 8002604:	69db      	ldr	r3, [r3, #28]
 8002606:	4a4e      	ldr	r2, [pc, #312]	@ (8002740 <HAL_UART_MspInit+0x160>)
 8002608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800260c:	61d3      	str	r3, [r2, #28]
 800260e:	4b4c      	ldr	r3, [pc, #304]	@ (8002740 <HAL_UART_MspInit+0x160>)
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261a:	4b49      	ldr	r3, [pc, #292]	@ (8002740 <HAL_UART_MspInit+0x160>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	4a48      	ldr	r2, [pc, #288]	@ (8002740 <HAL_UART_MspInit+0x160>)
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	6193      	str	r3, [r2, #24]
 8002626:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_UART_MspInit+0x160>)
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002632:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263c:	2303      	movs	r3, #3
 800263e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	4619      	mov	r1, r3
 8002646:	483f      	ldr	r0, [pc, #252]	@ (8002744 <HAL_UART_MspInit+0x164>)
 8002648:	f003 fe1c 	bl	8006284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800264c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	4619      	mov	r1, r3
 8002660:	4838      	ldr	r0, [pc, #224]	@ (8002744 <HAL_UART_MspInit+0x164>)
 8002662:	f003 fe0f 	bl	8006284 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002666:	4b38      	ldr	r3, [pc, #224]	@ (8002748 <HAL_UART_MspInit+0x168>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002676:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	f043 0310 	orr.w	r3, r3, #16
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	4a30      	ldr	r2, [pc, #192]	@ (8002748 <HAL_UART_MspInit+0x168>)
 8002686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002688:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800268a:	4b30      	ldr	r3, [pc, #192]	@ (800274c <HAL_UART_MspInit+0x16c>)
 800268c:	4a30      	ldr	r2, [pc, #192]	@ (8002750 <HAL_UART_MspInit+0x170>)
 800268e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002690:	4b2e      	ldr	r3, [pc, #184]	@ (800274c <HAL_UART_MspInit+0x16c>)
 8002692:	2200      	movs	r2, #0
 8002694:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002696:	4b2d      	ldr	r3, [pc, #180]	@ (800274c <HAL_UART_MspInit+0x16c>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800269c:	4b2b      	ldr	r3, [pc, #172]	@ (800274c <HAL_UART_MspInit+0x16c>)
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026a2:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026a8:	4b28      	ldr	r3, [pc, #160]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80026ae:	4b27      	ldr	r3, [pc, #156]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026b4:	4b25      	ldr	r3, [pc, #148]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026ba:	4824      	ldr	r0, [pc, #144]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026bc:	f002 fdf4 	bl	80052a8 <HAL_DMA_Init>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80026c6:	f7fe ff95 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a1f      	ldr	r2, [pc, #124]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026d0:	4a1e      	ldr	r2, [pc, #120]	@ (800274c <HAL_UART_MspInit+0x16c>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80026d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_UART_MspInit+0x178>)
 80026da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026de:	2210      	movs	r2, #16
 80026e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ee:	4b19      	ldr	r3, [pc, #100]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026fa:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <HAL_UART_MspInit+0x174>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_UART_MspInit+0x174>)
 8002702:	2200      	movs	r2, #0
 8002704:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002706:	4813      	ldr	r0, [pc, #76]	@ (8002754 <HAL_UART_MspInit+0x174>)
 8002708:	f002 fdce 	bl	80052a8 <HAL_DMA_Init>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 8002712:	f7fe ff6f 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a0e      	ldr	r2, [pc, #56]	@ (8002754 <HAL_UART_MspInit+0x174>)
 800271a:	639a      	str	r2, [r3, #56]	@ 0x38
 800271c:	4a0d      	ldr	r2, [pc, #52]	@ (8002754 <HAL_UART_MspInit+0x174>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2100      	movs	r1, #0
 8002726:	2027      	movs	r0, #39	@ 0x27
 8002728:	f002 fd87 	bl	800523a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800272c:	2027      	movs	r0, #39	@ 0x27
 800272e:	f002 fda0 	bl	8005272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	@ 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004800 	.word	0x40004800
 8002740:	40021000 	.word	0x40021000
 8002744:	40011000 	.word	0x40011000
 8002748:	40010000 	.word	0x40010000
 800274c:	2000058c 	.word	0x2000058c
 8002750:	40020030 	.word	0x40020030
 8002754:	200005d0 	.word	0x200005d0
 8002758:	4002001c 	.word	0x4002001c

0800275c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800275c:	f7fe ffe2 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002760:	480b      	ldr	r0, [pc, #44]	@ (8002790 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002762:	490c      	ldr	r1, [pc, #48]	@ (8002794 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002764:	4a0c      	ldr	r2, [pc, #48]	@ (8002798 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002768:	e002      	b.n	8002770 <LoopCopyDataInit>

0800276a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800276a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800276c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276e:	3304      	adds	r3, #4

08002770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002774:	d3f9      	bcc.n	800276a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002776:	4a09      	ldr	r2, [pc, #36]	@ (800279c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002778:	4c09      	ldr	r4, [pc, #36]	@ (80027a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800277a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800277c:	e001      	b.n	8002782 <LoopFillZerobss>

0800277e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002780:	3204      	adds	r2, #4

08002782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002784:	d3fb      	bcc.n	800277e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002786:	f006 fea7 	bl	80094d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800278a:	f7fe fe75 	bl	8001478 <main>
  bx lr
 800278e:	4770      	bx	lr
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8002798:	08009af0 	.word	0x08009af0
  ldr r2, =_sbss
 800279c:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 80027a0:	20000830 	.word	0x20000830

080027a4 <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>
	...

080027a8 <DevSystem_Init>:
static void UltraWorkModule_CycleMode(void);
static void UltraWorkModule_AlternateMode2(void);

/*系统初始化*/
void DevSystem_Init(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	DevParam_Init();
 80027ac:	f001 f8e2 	bl	8003974 <DevParam_Init>
	DevAD9833Set_Init();
 80027b0:	f000 fcd2 	bl	8003158 <DevAD9833Set_Init>
	DevAD5160Func_Init();
 80027b4:	f000 fac8 	bl	8002d48 <DevAD5160Func_Init>
	DevADC1Func_Init();
 80027b8:	f000 fe62 	bl	8003480 <DevADC1Func_Init>
	DevUart_Init();
 80027bc:	f001 fe28 	bl	8004410 <DevUart_Init>
	DevPwmFunc_Init();
 80027c0:	f001 fa0c 	bl	8003bdc <DevPwmFunc_Init>

	HAL_GPIO_WritePin(V36CH1_4_EN_GPIO_Port, V36CH1_4_EN_Pin, GPIO_PIN_SET);
 80027c4:	2201      	movs	r2, #1
 80027c6:	2110      	movs	r1, #16
 80027c8:	4805      	ldr	r0, [pc, #20]	@ (80027e0 <DevSystem_Init+0x38>)
 80027ca:	f003 feef 	bl	80065ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V36CH5_8_EN_GPIO_Port, V36CH5_8_EN_Pin, GPIO_PIN_SET);
 80027ce:	2201      	movs	r2, #1
 80027d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <DevSystem_Init+0x3c>)
 80027d6:	f003 fee9 	bl	80065ac <HAL_GPIO_WritePin>
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40011800 	.word	0x40011800
 80027e4:	40010800 	.word	0x40010800

080027e8 <AppMainFunc>:

void AppMainFunc(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80027ee:	2300      	movs	r3, #0
 80027f0:	71fb      	strb	r3, [r7, #7]
	uint8_t mode = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	71bb      	strb	r3, [r7, #6]

	if(WorkSta == DEVWORKSTART)
 80027f6:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <AppMainFunc+0x9c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d118      	bne.n	8002830 <AppMainFunc+0x48>
		{
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], UltraEnFlg[tag_i]);
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
		}
#else
		mode = WorkModule;
 80027fe:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <AppMainFunc+0xa0>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	71bb      	strb	r3, [r7, #6]

		switch(mode)
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	3b01      	subs	r3, #1
 8002808:	2b03      	cmp	r3, #3
 800280a:	d80e      	bhi.n	800282a <AppMainFunc+0x42>
 800280c:	a201      	add	r2, pc, #4	@ (adr r2, 8002814 <AppMainFunc+0x2c>)
 800280e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002812:	bf00      	nop
 8002814:	08002875 	.word	0x08002875
 8002818:	08002825 	.word	0x08002825
 800281c:	08002875 	.word	0x08002875
 8002820:	08002875 	.word	0x08002875
//			UltraWorkModule_SyncMode();
			break;

		case ALTERMODE:
			/*交替模式 四探头为一组，两两交替*/
			UltraWorkModule_AlternateMode();
 8002824:	f000 f880 	bl	8002928 <UltraWorkModule_AlternateMode>
			break;
 8002828:	e025      	b.n	8002876 <AppMainFunc+0x8e>
			/*交替模式2 2探头为一组，交替运行*/
//			UltraWorkModule_AlternateMode2();
			break;

		default:
			UltraWorkModule_AlternateMode();
 800282a:	f000 f87d 	bl	8002928 <UltraWorkModule_AlternateMode>
			break;
 800282e:	e022      	b.n	8002876 <AppMainFunc+0x8e>
		}
#endif
	}else
	{
		/*震动马达、超声复位*/
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002830:	2300      	movs	r3, #0
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	e01a      	b.n	800286c <AppMainFunc+0x84>
		{
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <AppMainFunc+0xa4>)
 800283a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	4a13      	ldr	r2, [pc, #76]	@ (8002890 <AppMainFunc+0xa8>)
 8002842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002846:	2200      	movs	r2, #0
 8002848:	4619      	mov	r1, r3
 800284a:	f003 feaf 	bl	80065ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	4a10      	ldr	r2, [pc, #64]	@ (8002894 <AppMainFunc+0xac>)
 8002852:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4a0f      	ldr	r2, [pc, #60]	@ (8002898 <AppMainFunc+0xb0>)
 800285a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800285e:	2200      	movs	r2, #0
 8002860:	4619      	mov	r1, r3
 8002862:	f003 fea3 	bl	80065ac <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	3301      	adds	r3, #1
 800286a:	71fb      	strb	r3, [r7, #7]
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b07      	cmp	r3, #7
 8002870:	d9e1      	bls.n	8002836 <AppMainFunc+0x4e>
 8002872:	e000      	b.n	8002876 <AppMainFunc+0x8e>
			break;
 8002874:	bf00      	nop
		}
	}

	UltraParamReload();			//超声参数装载
 8002876:	f000 f811 	bl	800289c <UltraParamReload>
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	20000614 	.word	0x20000614
 8002888:	20000004 	.word	0x20000004
 800288c:	20000038 	.word	0x20000038
 8002890:	20000068 	.word	0x20000068
 8002894:	20000018 	.word	0x20000018
 8002898:	20000058 	.word	0x20000058

0800289c <UltraParamReload>:

void UltraParamReload(void)
{
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	71fb      	strb	r3, [r7, #7]

	/*参数修改后进行刷新*/
	if(ParamRefresh == 1)
 80028a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <UltraParamReload+0x74>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d12c      	bne.n	8002908 <UltraParamReload+0x6c>
	{
		MotorEnableFlg = DevMotor_StaGet();
 80028ae:	f001 fe55 	bl	800455c <DevMotor_StaGet>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b17      	ldr	r3, [pc, #92]	@ (8002914 <UltraParamReload+0x78>)
 80028b8:	701a      	strb	r2, [r3, #0]
		StimuTime = DevWork_StimuTimeGet();
 80028ba:	f001 fe69 	bl	8004590 <DevWork_StimuTimeGet>
 80028be:	4603      	mov	r3, r0
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <UltraParamReload+0x7c>)
 80028c4:	801a      	strh	r2, [r3, #0]
		IdleTime = DevWork_IdleTimeGet();
 80028c6:	f001 fe7d 	bl	80045c4 <DevWork_IdleTimeGet>
 80028ca:	4603      	mov	r3, r0
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b13      	ldr	r3, [pc, #76]	@ (800291c <UltraParamReload+0x80>)
 80028d0:	801a      	strh	r2, [r3, #0]
		WorkModule =  DevWork_ModuleGet();
 80028d2:	f001 fe91 	bl	80045f8 <DevWork_ModuleGet>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <UltraParamReload+0x84>)
 80028dc:	701a      	strb	r2, [r3, #0]

		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
 80028e2:	e00b      	b.n	80028fc <UltraParamReload+0x60>
		{
			UltraEnFlg[tag_i] = DevUltra_StatGet(tag_i);
 80028e4:	79fc      	ldrb	r4, [r7, #7]
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f001 fea1 	bl	8004630 <DevUltra_StatGet>
 80028ee:	4603      	mov	r3, r0
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002924 <UltraParamReload+0x88>)
 80028f4:	551a      	strb	r2, [r3, r4]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	3301      	adds	r3, #1
 80028fa:	71fb      	strb	r3, [r7, #7]
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	2b07      	cmp	r3, #7
 8002900:	d9f0      	bls.n	80028e4 <UltraParamReload+0x48>
		}

		ParamRefresh = 0;
 8002902:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <UltraParamReload+0x74>)
 8002904:	2200      	movs	r2, #0
 8002906:	701a      	strb	r2, [r3, #0]
	}
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bd90      	pop	{r4, r7, pc}
 8002910:	20000615 	.word	0x20000615
 8002914:	20000010 	.word	0x20000010
 8002918:	20000012 	.word	0x20000012
 800291c:	20000014 	.word	0x20000014
 8002920:	20000004 	.word	0x20000004
 8002924:	20000008 	.word	0x20000008

08002928 <UltraWorkModule_AlternateMode>:
 *			8探头两组交替工作模式(4个为一组)
 *
 */

static void UltraWorkModule_AlternateMode(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	71fb      	strb	r3, [r7, #7]

	if(UltraWorkTime < (StimuTime * 10))
 8002932:	4b98      	ldr	r3, [pc, #608]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	4613      	mov	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	4413      	add	r3, r2
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	461a      	mov	r2, r3
 8002942:	4b95      	ldr	r3, [pc, #596]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d938      	bls.n	80029bc <UltraWorkModule_AlternateMode+0x94>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800294a:	2300      	movs	r3, #0
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	e031      	b.n	80029b4 <UltraWorkModule_AlternateMode+0x8c>
		{
			if((tag_i % 2) == 0)
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b00      	cmp	r3, #0
 800295a:	d110      	bne.n	800297e <UltraWorkModule_AlternateMode+0x56>
			{
//				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
				if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 800295c:	4b8f      	ldr	r3, [pc, #572]	@ (8002b9c <UltraWorkModule_AlternateMode+0x274>)
 800295e:	8b5b      	ldrh	r3, [r3, #26]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d124      	bne.n	80029ae <UltraWorkModule_AlternateMode+0x86>
				{
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	4a8e      	ldr	r2, [pc, #568]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 8002968:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800296c:	79fb      	ldrb	r3, [r7, #7]
 800296e:	4a8d      	ldr	r2, [pc, #564]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 8002970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002974:	2201      	movs	r2, #1
 8002976:	4619      	mov	r1, r3
 8002978:	f003 fe18 	bl	80065ac <HAL_GPIO_WritePin>
 800297c:	e017      	b.n	80029ae <UltraWorkModule_AlternateMode+0x86>
				}
			}else
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a87      	ldr	r2, [pc, #540]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 8002982:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002986:	79fb      	ldrb	r3, [r7, #7]
 8002988:	4a86      	ldr	r2, [pc, #536]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 800298a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800298e:	2200      	movs	r2, #0
 8002990:	4619      	mov	r1, r3
 8002992:	f003 fe0b 	bl	80065ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a83      	ldr	r2, [pc, #524]	@ (8002ba8 <UltraWorkModule_AlternateMode+0x280>)
 800299a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	4a82      	ldr	r2, [pc, #520]	@ (8002bac <UltraWorkModule_AlternateMode+0x284>)
 80029a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a6:	2200      	movs	r2, #0
 80029a8:	4619      	mov	r1, r3
 80029aa:	f003 fdff 	bl	80065ac <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	3301      	adds	r3, #1
 80029b2:	71fb      	strb	r3, [r7, #7]
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d9ca      	bls.n	8002950 <UltraWorkModule_AlternateMode+0x28>
		}
	}else
	{
		UltraWorkTime = 0;
	}
}
 80029ba:	e0e7      	b.n	8002b8c <UltraWorkModule_AlternateMode+0x264>
	}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 80029bc:	4b75      	ldr	r3, [pc, #468]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b72      	ldr	r3, [pc, #456]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d833      	bhi.n	8002a3c <UltraWorkModule_AlternateMode+0x114>
 80029d4:	4b76      	ldr	r3, [pc, #472]	@ (8002bb0 <UltraWorkModule_AlternateMode+0x288>)
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	4b6e      	ldr	r3, [pc, #440]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	441a      	add	r2, r3
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	461a      	mov	r2, r3
 80029e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d925      	bls.n	8002a3c <UltraWorkModule_AlternateMode+0x114>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	71fb      	strb	r3, [r7, #7]
 80029f4:	e01e      	b.n	8002a34 <UltraWorkModule_AlternateMode+0x10c>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2], Motor_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 80029f6:	79fb      	ldrb	r3, [r7, #7]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4a69      	ldr	r2, [pc, #420]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 80029fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	4a67      	ldr	r2, [pc, #412]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 8002a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	f003 fdcd 	bl	80065ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2], Ultra_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	4a64      	ldr	r2, [pc, #400]	@ (8002ba8 <UltraWorkModule_AlternateMode+0x280>)
 8002a18:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	4a62      	ldr	r2, [pc, #392]	@ (8002bac <UltraWorkModule_AlternateMode+0x284>)
 8002a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f003 fdbf 	bl	80065ac <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	3301      	adds	r3, #1
 8002a32:	71fb      	strb	r3, [r7, #7]
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d9dd      	bls.n	80029f6 <UltraWorkModule_AlternateMode+0xce>
	}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 8002a3a:	e0a7      	b.n	8002b8c <UltraWorkModule_AlternateMode+0x264>
	}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 8002a3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002bb0 <UltraWorkModule_AlternateMode+0x288>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	461a      	mov	r2, r3
 8002a42:	4b54      	ldr	r3, [pc, #336]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	441a      	add	r2, r3
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b51      	ldr	r3, [pc, #324]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d84a      	bhi.n	8002aee <UltraWorkModule_AlternateMode+0x1c6>
 8002a58:	4b4e      	ldr	r3, [pc, #312]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4613      	mov	r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	1a9a      	subs	r2, r3, r2
 8002a64:	4b52      	ldr	r3, [pc, #328]	@ (8002bb0 <UltraWorkModule_AlternateMode+0x288>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	4413      	add	r3, r2
 8002a72:	461a      	mov	r2, r3
 8002a74:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d938      	bls.n	8002aee <UltraWorkModule_AlternateMode+0x1c6>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	71fb      	strb	r3, [r7, #7]
 8002a80:	e031      	b.n	8002ae6 <UltraWorkModule_AlternateMode+0x1be>
			if((tag_i % 2) == 1)
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <UltraWorkModule_AlternateMode+0x188>
				if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 8002a8e:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <UltraWorkModule_AlternateMode+0x274>)
 8002a90:	8b5b      	ldrh	r3, [r3, #26]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d124      	bne.n	8002ae0 <UltraWorkModule_AlternateMode+0x1b8>
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	4a41      	ldr	r2, [pc, #260]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 8002a9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4a40      	ldr	r2, [pc, #256]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 8002aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f003 fd7f 	bl	80065ac <HAL_GPIO_WritePin>
 8002aae:	e017      	b.n	8002ae0 <UltraWorkModule_AlternateMode+0x1b8>
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4a3b      	ldr	r2, [pc, #236]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 8002ab4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4a3a      	ldr	r2, [pc, #232]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 8002abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f003 fd72 	bl	80065ac <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4a37      	ldr	r2, [pc, #220]	@ (8002ba8 <UltraWorkModule_AlternateMode+0x280>)
 8002acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	4a36      	ldr	r2, [pc, #216]	@ (8002bac <UltraWorkModule_AlternateMode+0x284>)
 8002ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4619      	mov	r1, r3
 8002adc:	f003 fd66 	bl	80065ac <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	71fb      	strb	r3, [r7, #7]
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b07      	cmp	r3, #7
 8002aea:	d9ca      	bls.n	8002a82 <UltraWorkModule_AlternateMode+0x15a>
	}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 8002aec:	e04e      	b.n	8002b8c <UltraWorkModule_AlternateMode+0x264>
	}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 8002aee:	4b29      	ldr	r3, [pc, #164]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9a      	subs	r2, r3, r2
 8002afa:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb0 <UltraWorkModule_AlternateMode+0x288>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	460b      	mov	r3, r1
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	4413      	add	r3, r2
 8002b08:	461a      	mov	r2, r3
 8002b0a:	4b23      	ldr	r3, [pc, #140]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d838      	bhi.n	8002b84 <UltraWorkModule_AlternateMode+0x25c>
 8002b12:	4b20      	ldr	r3, [pc, #128]	@ (8002b94 <UltraWorkModule_AlternateMode+0x26c>)
 8002b14:	881b      	ldrh	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <UltraWorkModule_AlternateMode+0x288>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	441a      	add	r2, r3
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b1b      	ldr	r3, [pc, #108]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d929      	bls.n	8002b84 <UltraWorkModule_AlternateMode+0x25c>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002b30:	2300      	movs	r3, #0
 8002b32:	71fb      	strb	r3, [r7, #7]
 8002b34:	e022      	b.n	8002b7c <UltraWorkModule_AlternateMode+0x254>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2 + 1], Motor_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <UltraWorkModule_AlternateMode+0x278>)
 8002b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	3301      	adds	r3, #1
 8002b48:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <UltraWorkModule_AlternateMode+0x27c>)
 8002b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	4619      	mov	r1, r3
 8002b52:	f003 fd2b 	bl	80065ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2 + 1], Ultra_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <UltraWorkModule_AlternateMode+0x280>)
 8002b5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a10      	ldr	r2, [pc, #64]	@ (8002bac <UltraWorkModule_AlternateMode+0x284>)
 8002b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	4619      	mov	r1, r3
 8002b72:	f003 fd1b 	bl	80065ac <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d9d9      	bls.n	8002b36 <UltraWorkModule_AlternateMode+0x20e>
	}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 8002b82:	e003      	b.n	8002b8c <UltraWorkModule_AlternateMode+0x264>
		UltraWorkTime = 0;
 8002b84:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <UltraWorkModule_AlternateMode+0x270>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
}
 8002b8a:	e7ff      	b.n	8002b8c <UltraWorkModule_AlternateMode+0x264>
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000012 	.word	0x20000012
 8002b98:	20000618 	.word	0x20000618
 8002b9c:	2000061c 	.word	0x2000061c
 8002ba0:	20000038 	.word	0x20000038
 8002ba4:	20000068 	.word	0x20000068
 8002ba8:	20000018 	.word	0x20000018
 8002bac:	20000058 	.word	0x20000058
 8002bb0:	20000014 	.word	0x20000014

08002bb4 <AD5160_Delay>:

static uint8_t PowerLevel = 1;
static uint8_t PowerLevel_old = 1;

static void AD5160_Delay(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
	uint8_t i = 30;
 8002bba:	231e      	movs	r3, #30
 8002bbc:	71fb      	strb	r3, [r7, #7]

	while(i--);
 8002bbe:	bf00      	nop
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	1e5a      	subs	r2, r3, #1
 8002bc4:	71fa      	strb	r2, [r7, #7]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1fa      	bne.n	8002bc0 <AD5160_Delay+0xc>
}
 8002bca:	bf00      	nop
 8002bcc:	bf00      	nop
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bc80      	pop	{r7}
 8002bd4:	4770      	bx	lr
	...

08002bd8 <AD5160_CSSet>:

static void AD5160_CSSet(uint8_t ch,GPIO_PinState PinState)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	460a      	mov	r2, r1
 8002be2:	71fb      	strb	r3, [r7, #7]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_CS_PORT[ch], AD5160_CS_GPIO[ch], PinState);
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	4a07      	ldr	r2, [pc, #28]	@ (8002c08 <AD5160_CSSet+0x30>)
 8002bec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	4a06      	ldr	r2, [pc, #24]	@ (8002c0c <AD5160_CSSet+0x34>)
 8002bf4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002bf8:	79ba      	ldrb	r2, [r7, #6]
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	f003 fcd6 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	2000008c 	.word	0x2000008c
 8002c0c:	20000080 	.word	0x20000080

08002c10 <AD5160_CLKSet>:

static void AD5160_CLKSet(uint8_t ch,GPIO_PinState PinState)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b082      	sub	sp, #8
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	460a      	mov	r2, r1
 8002c1a:	71fb      	strb	r3, [r7, #7]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_CLK_PORT[ch], AD5160_CLK_GPIO[ch], PinState);
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4a07      	ldr	r2, [pc, #28]	@ (8002c40 <AD5160_CLKSet+0x30>)
 8002c24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	4a06      	ldr	r2, [pc, #24]	@ (8002c44 <AD5160_CLKSet+0x34>)
 8002c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c30:	79ba      	ldrb	r2, [r7, #6]
 8002c32:	4619      	mov	r1, r3
 8002c34:	f003 fcba 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	2000009c 	.word	0x2000009c
 8002c44:	20000088 	.word	0x20000088

08002c48 <AD5160_DATASet>:

static void AD5160_DATASet(uint8_t ch,GPIO_PinState PinState)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	4603      	mov	r3, r0
 8002c50:	460a      	mov	r2, r1
 8002c52:	71fb      	strb	r3, [r7, #7]
 8002c54:	4613      	mov	r3, r2
 8002c56:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_DATA_PORT[ch], AD5160_DATA_GPIO[ch], PinState);
 8002c58:	79fb      	ldrb	r3, [r7, #7]
 8002c5a:	4a07      	ldr	r2, [pc, #28]	@ (8002c78 <AD5160_DATASet+0x30>)
 8002c5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	4a06      	ldr	r2, [pc, #24]	@ (8002c7c <AD5160_DATASet+0x34>)
 8002c64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c68:	79ba      	ldrb	r2, [r7, #6]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	f003 fc9e 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	20000094 	.word	0x20000094
 8002c7c:	20000084 	.word	0x20000084

08002c80 <AD5160_SendData>:

static void AD5160_SendData(uint8_t ch,uint8_t data)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	71fb      	strb	r3, [r7, #7]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i = 0;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]

	AD5160_CSSet(ch,GPIO_PIN_SET);
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	2101      	movs	r1, #1
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff ff9d 	bl	8002bd8 <AD5160_CSSet>
	AD5160_CLKSet(ch,GPIO_PIN_RESET);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff ffb4 	bl	8002c10 <AD5160_CLKSet>
	AD5160_CSSet(ch, GPIO_PIN_RESET);
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	2100      	movs	r1, #0
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff93 	bl	8002bd8 <AD5160_CSSet>

	for(tag_i = 0;tag_i < 8;tag_i++)
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e023      	b.n	8002d00 <AD5160_SendData+0x80>
	{
		AD5160_CLKSet(ch,GPIO_PIN_RESET);
 8002cb8:	79fb      	ldrb	r3, [r7, #7]
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ffa7 	bl	8002c10 <AD5160_CLKSet>
		if((data << tag_i) & 0x80)
 8002cc2:	79ba      	ldrb	r2, [r7, #6]
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <AD5160_SendData+0x5e>
		{
			AD5160_DATASet(ch,GPIO_PIN_SET);
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	2101      	movs	r1, #1
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ffb6 	bl	8002c48 <AD5160_DATASet>
 8002cdc:	e004      	b.n	8002ce8 <AD5160_SendData+0x68>
		}else
		{
			AD5160_DATASet(ch,GPIO_PIN_RESET);
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ffb0 	bl	8002c48 <AD5160_DATASet>
		}
		AD5160_Delay();
 8002ce8:	f7ff ff64 	bl	8002bb4 <AD5160_Delay>
		AD5160_CLKSet(ch,GPIO_PIN_SET);
 8002cec:	79fb      	ldrb	r3, [r7, #7]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff8d 	bl	8002c10 <AD5160_CLKSet>
		AD5160_Delay();
 8002cf6:	f7ff ff5d 	bl	8002bb4 <AD5160_Delay>
	for(tag_i = 0;tag_i < 8;tag_i++)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b07      	cmp	r3, #7
 8002d04:	d9d8      	bls.n	8002cb8 <AD5160_SendData+0x38>
	}

	AD5160_CSSet(ch, GPIO_PIN_SET);
 8002d06:	79fb      	ldrb	r3, [r7, #7]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff64 	bl	8002bd8 <AD5160_CSSet>
	AD5160_CLKSet(ch,GPIO_PIN_RESET);
 8002d10:	79fb      	ldrb	r3, [r7, #7]
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff7b 	bl	8002c10 <AD5160_CLKSet>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <DevAD5160_ValueLoad>:

void DevAD5160_ValueLoad(uint8_t power_level)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
	if(power_level < POWERLEVELNUM)
 8002d2e:	79fb      	ldrb	r3, [r7, #7]
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d802      	bhi.n	8002d3a <DevAD5160_ValueLoad+0x16>
	{
		PowerLevel = power_level;
 8002d34:	4a03      	ldr	r2, [pc, #12]	@ (8002d44 <DevAD5160_ValueLoad+0x20>)
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	7013      	strb	r3, [r2, #0]
	}
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr
 8002d44:	200000a4 	.word	0x200000a4

08002d48 <DevAD5160Func_Init>:

void DevAD5160Func_Init(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
	uint8_t res_data = 165;
 8002d4e:	23a5      	movs	r3, #165	@ 0xa5
 8002d50:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	71fb      	strb	r3, [r7, #7]

	PowerLevel = DevParamRead.UltraParam.UltraPowerLevel;
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <DevAD5160Func_Init+0x54>)
 8002d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <DevAD5160Func_Init+0x58>)
 8002d60:	701a      	strb	r2, [r3, #0]
	res_data = ResistCode[PowerLevel];
 8002d62:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <DevAD5160Func_Init+0x58>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	4b0e      	ldr	r3, [pc, #56]	@ (8002da4 <DevAD5160Func_Init+0x5c>)
 8002d6a:	5c9b      	ldrb	r3, [r3, r2]
 8002d6c:	71bb      	strb	r3, [r7, #6]
	for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	71fb      	strb	r3, [r7, #7]
 8002d72:	e008      	b.n	8002d86 <DevAD5160Func_Init+0x3e>
	{
		AD5160_SendData(tag_i,res_data);
 8002d74:	79ba      	ldrb	r2, [r7, #6]
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff80 	bl	8002c80 <AD5160_SendData>
	for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	3301      	adds	r3, #1
 8002d84:	71fb      	strb	r3, [r7, #7]
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d9f3      	bls.n	8002d74 <DevAD5160Func_Init+0x2c>
	}
	PowerLevel_old = PowerLevel;
 8002d8c:	4b04      	ldr	r3, [pc, #16]	@ (8002da0 <DevAD5160Func_Init+0x58>)
 8002d8e:	781a      	ldrb	r2, [r3, #0]
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <DevAD5160Func_Init+0x60>)
 8002d92:	701a      	strb	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	2000061c 	.word	0x2000061c
 8002da0:	200000a4 	.word	0x200000a4
 8002da4:	20000078 	.word	0x20000078
 8002da8:	200000a5 	.word	0x200000a5

08002dac <DevAD5160Func_Main>:

void DevAD5160Func_Main(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
	uint8_t res_data = 255;
 8002db2:	23ff      	movs	r3, #255	@ 0xff
 8002db4:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i;

	if(PowerLevel != PowerLevel_old)
 8002db6:	4b11      	ldr	r3, [pc, #68]	@ (8002dfc <DevAD5160Func_Main+0x50>)
 8002db8:	781a      	ldrb	r2, [r3, #0]
 8002dba:	4b11      	ldr	r3, [pc, #68]	@ (8002e00 <DevAD5160Func_Main+0x54>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d018      	beq.n	8002df4 <DevAD5160Func_Main+0x48>
	{
		res_data = ResistCode[PowerLevel];
 8002dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <DevAD5160Func_Main+0x50>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <DevAD5160Func_Main+0x58>)
 8002dca:	5c9b      	ldrb	r3, [r3, r2]
 8002dcc:	71bb      	strb	r3, [r7, #6]
		for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e008      	b.n	8002de6 <DevAD5160Func_Main+0x3a>
		{
			AD5160_SendData(tag_i,res_data);
 8002dd4:	79ba      	ldrb	r2, [r7, #6]
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff50 	bl	8002c80 <AD5160_SendData>
		for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 8002de0:	79fb      	ldrb	r3, [r7, #7]
 8002de2:	3301      	adds	r3, #1
 8002de4:	71fb      	strb	r3, [r7, #7]
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d9f3      	bls.n	8002dd4 <DevAD5160Func_Main+0x28>
		}
		PowerLevel_old = PowerLevel;
 8002dec:	4b03      	ldr	r3, [pc, #12]	@ (8002dfc <DevAD5160Func_Main+0x50>)
 8002dee:	781a      	ldrb	r2, [r3, #0]
 8002df0:	4b03      	ldr	r3, [pc, #12]	@ (8002e00 <DevAD5160Func_Main+0x54>)
 8002df2:	701a      	strb	r2, [r3, #0]
	}
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200000a4 	.word	0x200000a4
 8002e00:	200000a5 	.word	0x200000a5
 8002e04:	20000078 	.word	0x20000078

08002e08 <AD9833_Delay>:


static uint16_t UltraParam_Old[ULTRACHNUM] = {0};

static void AD9833_Delay(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
	uint8_t i = 2;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	71fb      	strb	r3, [r7, #7]
	while(i--);
 8002e12:	bf00      	nop
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	1e5a      	subs	r2, r3, #1
 8002e18:	71fa      	strb	r2, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1fa      	bne.n	8002e14 <AD9833_Delay+0xc>
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
	...

08002e2c <AD9833_FSYNCSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833FSYNC脚的电平信号
 */
static void AD9833_FSYNCSet(uint8_t ch,GPIO_PinState PinState)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_FSYNC_PORT[ch], AD9833_FSYNC_GPIO[ch], PinState);
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <AD9833_FSYNCSet+0x30>)
 8002e40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <AD9833_FSYNCSet+0x34>)
 8002e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e4c:	79ba      	ldrb	r2, [r7, #6]
 8002e4e:	4619      	mov	r1, r3
 8002e50:	f003 fbac 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	200000d8 	.word	0x200000d8
 8002e60:	200000a8 	.word	0x200000a8

08002e64 <AD9833_SCLKSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SCLK脚的电平信号
 */
static void AD9833_SCLKSet(uint8_t ch,GPIO_PinState PinState)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460a      	mov	r2, r1
 8002e6e:	71fb      	strb	r3, [r7, #7]
 8002e70:	4613      	mov	r3, r2
 8002e72:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SCLK_PORT[ch], AD9833_SCLK_GPIO[ch], PinState);
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a07      	ldr	r2, [pc, #28]	@ (8002e94 <AD9833_SCLKSet+0x30>)
 8002e78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	4a06      	ldr	r2, [pc, #24]	@ (8002e98 <AD9833_SCLKSet+0x34>)
 8002e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e84:	79ba      	ldrb	r2, [r7, #6]
 8002e86:	4619      	mov	r1, r3
 8002e88:	f003 fb90 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002e8c:	bf00      	nop
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000118 	.word	0x20000118
 8002e98:	200000c8 	.word	0x200000c8

08002e9c <AD9833_SDATASet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SDATA脚的电平信号
 */
static void AD9833_SDATASet(uint8_t ch,GPIO_PinState PinState)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	460a      	mov	r2, r1
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SDATA_PORT[ch], AD9833_SDATA_GPIO[ch], PinState);
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	4a07      	ldr	r2, [pc, #28]	@ (8002ecc <AD9833_SDATASet+0x30>)
 8002eb0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002eb4:	79fb      	ldrb	r3, [r7, #7]
 8002eb6:	4a06      	ldr	r2, [pc, #24]	@ (8002ed0 <AD9833_SDATASet+0x34>)
 8002eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ebc:	79ba      	ldrb	r2, [r7, #6]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f003 fb74 	bl	80065ac <HAL_GPIO_WritePin>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200000f8 	.word	0x200000f8
 8002ed0:	200000b8 	.word	0x200000b8

08002ed4 <AD9833_SendData>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendData(uint8_t ch,uint32_t txdata)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
	uint8_t tag_i = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]

	/*发送指令之前AD9833的SCLK引脚使能，FSYNC引脚复位*/
	AD9833_SCLKSet(ch,SET);
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ffbb 	bl	8002e64 <AD9833_SCLKSet>
	AD9833_FSYNCSet(ch,SET);
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff ff9a 	bl	8002e2c <AD9833_FSYNCSet>
	AD9833_FSYNCSet(ch,RESET);
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff95 	bl	8002e2c <AD9833_FSYNCSet>

	for(tag_i=0;tag_i<16;tag_i++){
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]
 8002f06:	e023      	b.n	8002f50 <AD9833_SendData+0x7c>
		if (txdata & 0x8000){
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <AD9833_SendData+0x4a>
			AD9833_SDATASet(ch,SET);
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2101      	movs	r1, #1
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff ffc0 	bl	8002e9c <AD9833_SDATASet>
 8002f1c:	e004      	b.n	8002f28 <AD9833_SendData+0x54>
		}
		else{
			AD9833_SDATASet(ch,RESET);
 8002f1e:	79fb      	ldrb	r3, [r7, #7]
 8002f20:	2100      	movs	r1, #0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff ffba 	bl	8002e9c <AD9833_SDATASet>
		}
		AD9833_Delay();
 8002f28:	f7ff ff6e 	bl	8002e08 <AD9833_Delay>
		AD9833_SCLKSet(ch,RESET);
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff97 	bl	8002e64 <AD9833_SCLKSet>
		AD9833_Delay();
 8002f36:	f7ff ff67 	bl	8002e08 <AD9833_Delay>
		AD9833_SCLKSet(ch,SET);
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff ff90 	bl	8002e64 <AD9833_SCLKSet>
		txdata<<=1;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	603b      	str	r3, [r7, #0]
	for(tag_i=0;tag_i<16;tag_i++){
 8002f4a:	7bfb      	ldrb	r3, [r7, #15]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b0f      	cmp	r3, #15
 8002f54:	d9d8      	bls.n	8002f08 <AD9833_SendData+0x34>
	}
	AD9833_FSYNCSet(ch,SET);
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	2101      	movs	r1, #1
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff ff66 	bl	8002e2c <AD9833_FSYNCSet>
}
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <AD9833_SendPhase>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendPhase(uint8_t ch,uint16_t reg, uint16_t val)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	71fb      	strb	r3, [r7, #7]
 8002f72:	460b      	mov	r3, r1
 8002f74:	80bb      	strh	r3, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	807b      	strh	r3, [r7, #2]
    uint16_t phase = reg;
 8002f7a:	88bb      	ldrh	r3, [r7, #4]
 8002f7c:	81fb      	strh	r3, [r7, #14]
    phase |= val;
 8002f7e:	89fa      	ldrh	r2, [r7, #14]
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	81fb      	strh	r3, [r7, #14]
    AD9833_SendData(ch,phase);
 8002f86:	89fa      	ldrh	r2, [r7, #14]
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	4611      	mov	r1, r2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ffa1 	bl	8002ed4 <AD9833_SendData>
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <AD9833_SendWave>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送波形输出指令
 */
static void AD9833_SendWave(uint8_t ch,uint32_t WaveMode,uint32_t Freq_SFR,uint32_t Phase_SFR)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	73fb      	strb	r3, [r7, #15]
    uint32_t val = 0;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
    val = (val | WaveMode | Freq_SFR | Phase_SFR);
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    AD9833_SendData(ch,val);
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	6979      	ldr	r1, [r7, #20]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ff86 	bl	8002ed4 <AD9833_SendData>
}
 8002fc8:	bf00      	nop
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <AD9833_SendFrequency>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendFrequency(uint8_t ch,unsigned short reg, double fout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08c      	sub	sp, #48	@ 0x30
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	e9c7 2300 	strd	r2, r3, [r7]
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	81bb      	strh	r3, [r7, #12]
	int frequence_LSB,frequence_MSB;
	double   frequence_mid,frequence_DATA;
	long int frequence_hex;
	//Fout = Fmclk / 2^28 * FREQREG
	frequence_mid=268435456/11.059;
 8002fe2:	a327      	add	r3, pc, #156	@ (adr r3, 8003080 <AD9833_SendFrequency+0xb0>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	frequence_DATA=fout;
 8002fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA/1000000;
 8002ff4:	a324      	add	r3, pc, #144	@ (adr r3, 8003088 <AD9833_SendFrequency+0xb8>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ffe:	f7fd fbf9 	bl	80007f4 <__aeabi_ddiv>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_DATA=frequence_DATA*frequence_mid;
 800300a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800300e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003012:	f7fd fac5 	bl	80005a0 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	frequence_hex=frequence_DATA;
 800301e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003022:	f7fd fccf 	bl	80009c4 <__aeabi_d2iz>
 8003026:	4603      	mov	r3, r0
 8003028:	61fb      	str	r3, [r7, #28]
	frequence_LSB=frequence_hex;
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	61bb      	str	r3, [r7, #24]
	frequence_LSB=frequence_LSB&0x3fff;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003034:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_hex>>14;
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	139b      	asrs	r3, r3, #14
 800303a:	617b      	str	r3, [r7, #20]
	frequence_MSB=frequence_MSB&0x3fff;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003042:	617b      	str	r3, [r7, #20]
	frequence_LSB=frequence_LSB|reg;
 8003044:	89bb      	ldrh	r3, [r7, #12]
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
	frequence_MSB=frequence_MSB|reg;
 800304c:	89bb      	ldrh	r3, [r7, #12]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	4313      	orrs	r3, r2
 8003052:	617b      	str	r3, [r7, #20]
	AD9833_SendData(ch,0x2100);
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff3a 	bl	8002ed4 <AD9833_SendData>
	//设置频率是需要连续写入两次寄存器的值
    //第一次写入包含14个LSB
	//第二次写入包含14个MSB
	AD9833_SendData(ch,frequence_LSB);
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff ff34 	bl	8002ed4 <AD9833_SendData>
	AD9833_SendData(ch,frequence_MSB);
 800306c:	697a      	ldr	r2, [r7, #20]
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff2e 	bl	8002ed4 <AD9833_SendData>
}
 8003078:	bf00      	nop
 800307a:	3730      	adds	r7, #48	@ 0x30
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	78ed98ce 	.word	0x78ed98ce
 8003084:	41772608 	.word	0x41772608
 8003088:	00000000 	.word	0x00000000
 800308c:	412e8480 	.word	0x412e8480

08003090 <DevAD9833_Reset>:
 * @param   ch:超声驱动的通道号
 * @retval  none
 * @func	初始化AD9833
 */
static void DevAD9833_Reset(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	71fb      	strb	r3, [r7, #7]

	for(ch = 0; ch < AD9833_MaxCh;ch++)
 800309a:	2300      	movs	r3, #0
 800309c:	71fb      	strb	r3, [r7, #7]
 800309e:	e011      	b.n	80030c4 <DevAD9833_Reset+0x34>
	{
		AD9833_FSYNCSet(ch,GPIO_PIN_SET);
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2101      	movs	r1, #1
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff fec1 	bl	8002e2c <AD9833_FSYNCSet>
		AD9833_SCLKSet(ch,GPIO_PIN_SET);
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	2101      	movs	r1, #1
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fed8 	bl	8002e64 <AD9833_SCLKSet>
		AD9833_SDATASet(ch,GPIO_PIN_SET);
 80030b4:	79fb      	ldrb	r3, [r7, #7]
 80030b6:	2101      	movs	r1, #1
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff feef 	bl	8002e9c <AD9833_SDATASet>
	for(ch = 0; ch < AD9833_MaxCh;ch++)
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	3301      	adds	r3, #1
 80030c2:	71fb      	strb	r3, [r7, #7]
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	2b07      	cmp	r3, #7
 80030c8:	d9ea      	bls.n	80030a0 <DevAD9833_Reset+0x10>
	}
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <DevAD9833_SetPara>:
 * @param	WaveMode:波形类型
 * @retval  none
 * @func	向AD9833发送参数指令
 */
static void DevAD9833_SetPara(uint8_t ch,uint32_t Freq_SFR,double Freq,uint32_t Phase_SFR,uint32_t Phase,uint32_t WaveMode)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	e9c7 2300 	strd	r2, r3, [r7]
 80030e0:	4603      	mov	r3, r0
 80030e2:	73fb      	strb	r3, [r7, #15]
	unsigned int Fsel,Psel;
	//第一次设置数据时要先复位
	AD9833_SendData(ch,0x0100);
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff fef2 	bl	8002ed4 <AD9833_SendData>
	AD9833_SendData(ch,0x2100);
 80030f0:	7bfb      	ldrb	r3, [r7, #15]
 80030f2:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7ff feec 	bl	8002ed4 <AD9833_SendData>
	AD9833_SendFrequency(ch,Freq_SFR,Freq);
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	b299      	uxth	r1, r3
 8003100:	7bf8      	ldrb	r0, [r7, #15]
 8003102:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003106:	f7ff ff63 	bl	8002fd0 <AD9833_SendFrequency>
	AD9833_SendPhase(ch,Phase_SFR,Phase);
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	b299      	uxth	r1, r3
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	b29a      	uxth	r2, r3
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff27 	bl	8002f68 <AD9833_SendPhase>
	if(Freq_SFR == AD9833_REG_FREQ0)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003120:	d102      	bne.n	8003128 <DevAD9833_SetPara+0x54>
	{
		Fsel = AD9833_FSEL0;
 8003122:	2300      	movs	r3, #0
 8003124:	617b      	str	r3, [r7, #20]
 8003126:	e002      	b.n	800312e <DevAD9833_SetPara+0x5a>
	}
	else
	{
		Fsel = AD9833_FSEL1;
 8003128:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800312c:	617b      	str	r3, [r7, #20]
	}
	if(Phase_SFR == AD9833_REG_PHASE0)
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003134:	d102      	bne.n	800313c <DevAD9833_SetPara+0x68>
	{
		Psel = AD9833_PSEL0;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e002      	b.n	8003142 <DevAD9833_SetPara+0x6e>
	}
	else
	{
		Psel = AD9833_PSEL1;
 800313c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003140:	613b      	str	r3, [r7, #16]
	}
	AD9833_SendWave(ch,WaveMode,Fsel,Psel);
 8003142:	7bf8      	ldrb	r0, [r7, #15]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800314a:	f7ff ff26 	bl	8002f9a <AD9833_SendWave>
}
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <DevAD9833Set_Init>:

void DevAD9833Set_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af04      	add	r7, sp, #16
	uint8_t tag_i = 0;
 800315e:	2300      	movs	r3, #0
 8003160:	71fb      	strb	r3, [r7, #7]
	uint16_t ultra_param = 625;
 8003162:	f240 2371 	movw	r3, #625	@ 0x271
 8003166:	80bb      	strh	r3, [r7, #4]
	uint32_t freq = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	603b      	str	r3, [r7, #0]

	DevAD9833_Reset();
 800316c:	f7ff ff90 	bl	8003090 <DevAD9833_Reset>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 8003170:	4b37      	ldr	r3, [pc, #220]	@ (8003250 <DevAD9833Set_Init+0xf8>)
 8003172:	889b      	ldrh	r3, [r3, #4]
 8003174:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8003178:	4293      	cmp	r3, r2
 800317a:	d13d      	bne.n	80031f8 <DevAD9833Set_Init+0xa0>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 800317c:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <DevAD9833Set_Init+0xf8>)
 800317e:	88db      	ldrh	r3, [r3, #6]
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 8003180:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003184:	4293      	cmp	r3, r2
 8003186:	d137      	bne.n	80031f8 <DevAD9833Set_Init+0xa0>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[2] == 0xffff))
 8003188:	4b31      	ldr	r3, [pc, #196]	@ (8003250 <DevAD9833Set_Init+0xf8>)
 800318a:	891b      	ldrh	r3, [r3, #8]
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 800318c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003190:	4293      	cmp	r3, r2
 8003192:	d131      	bne.n	80031f8 <DevAD9833Set_Init+0xa0>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003194:	2300      	movs	r3, #0
 8003196:	71fb      	strb	r3, [r7, #7]
 8003198:	e02a      	b.n	80031f0 <DevAD9833Set_Init+0x98>
		{
			freq = AD9833STEP * DevParamRead.UltraParam.Freq_Param[tag_i];
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	4a2c      	ldr	r2, [pc, #176]	@ (8003250 <DevAD9833Set_Init+0xf8>)
 800319e:	3304      	adds	r3, #4
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	885b      	ldrh	r3, [r3, #2]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	79fa      	ldrb	r2, [r7, #7]
 80031b6:	4926      	ldr	r1, [pc, #152]	@ (8003250 <DevAD9833Set_Init+0xf8>)
 80031b8:	3304      	adds	r3, #4
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	440b      	add	r3, r1
 80031be:	8859      	ldrh	r1, [r3, #2]
 80031c0:	4b24      	ldr	r3, [pc, #144]	@ (8003254 <DevAD9833Set_Init+0xfc>)
 80031c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f7fd f970 	bl	80004ac <__aeabi_ui2d>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	79f8      	ldrb	r0, [r7, #7]
 80031d2:	2102      	movs	r1, #2
 80031d4:	9102      	str	r1, [sp, #8]
 80031d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80031da:	9101      	str	r1, [sp, #4]
 80031dc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80031e0:	9100      	str	r1, [sp, #0]
 80031e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80031e6:	f7ff ff75 	bl	80030d4 <DevAD9833_SetPara>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	3301      	adds	r3, #1
 80031ee:	71fb      	strb	r3, [r7, #7]
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b07      	cmp	r3, #7
 80031f4:	d9d1      	bls.n	800319a <DevAD9833Set_Init+0x42>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 80031f6:	e026      	b.n	8003246 <DevAD9833Set_Init+0xee>
		}
	}else
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	71fb      	strb	r3, [r7, #7]
 80031fc:	e01f      	b.n	800323e <DevAD9833Set_Init+0xe6>
		{
			freq = AD9833STEP * ultra_param;
 80031fe:	88bb      	ldrh	r3, [r7, #4]
 8003200:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8003204:	fb02 f303 	mul.w	r3, r2, r3
 8003208:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = ultra_param;
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	4911      	ldr	r1, [pc, #68]	@ (8003254 <DevAD9833Set_Init+0xfc>)
 800320e:	88ba      	ldrh	r2, [r7, #4]
 8003210:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 8003214:	6838      	ldr	r0, [r7, #0]
 8003216:	f7fd f949 	bl	80004ac <__aeabi_ui2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	79f8      	ldrb	r0, [r7, #7]
 8003220:	2102      	movs	r1, #2
 8003222:	9102      	str	r1, [sp, #8]
 8003224:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003228:	9101      	str	r1, [sp, #4]
 800322a:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800322e:	9100      	str	r1, [sp, #0]
 8003230:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003234:	f7ff ff4e 	bl	80030d4 <DevAD9833_SetPara>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	3301      	adds	r3, #1
 800323c:	71fb      	strb	r3, [r7, #7]
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b07      	cmp	r3, #7
 8003242:	d9dc      	bls.n	80031fe <DevAD9833Set_Init+0xa6>
		}
	}
}
 8003244:	bf00      	nop
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	2000061c 	.word	0x2000061c
 8003254:	2000066c 	.word	0x2000066c

08003258 <DevAD9833Set_Main>:

void DevAD9833Set_Main(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af04      	add	r7, sp, #16
	uint8_t tag_i = 0;
 800325e:	2300      	movs	r3, #0
 8003260:	71fb      	strb	r3, [r7, #7]
	uint32_t freq = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003266:	2300      	movs	r3, #0
 8003268:	71fb      	strb	r3, [r7, #7]
 800326a:	e036      	b.n	80032da <DevAD9833Set_Main+0x82>
	{
		if(UltraParam_Old[tag_i] != DevParamRead.UltraParam.Freq_Param[tag_i])
 800326c:	79fb      	ldrb	r3, [r7, #7]
 800326e:	4a1f      	ldr	r2, [pc, #124]	@ (80032ec <DevAD9833Set_Main+0x94>)
 8003270:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	491e      	ldr	r1, [pc, #120]	@ (80032f0 <DevAD9833Set_Main+0x98>)
 8003278:	3304      	adds	r3, #4
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	440b      	add	r3, r1
 800327e:	885b      	ldrh	r3, [r3, #2]
 8003280:	429a      	cmp	r2, r3
 8003282:	d027      	beq.n	80032d4 <DevAD9833Set_Main+0x7c>
		{
			freq = DevParamRead.UltraParam.Freq_Param[tag_i] * AD9833STEP;
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <DevAD9833Set_Main+0x98>)
 8003288:	3304      	adds	r3, #4
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	885b      	ldrh	r3, [r3, #2]
 8003290:	461a      	mov	r2, r3
 8003292:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	79fa      	ldrb	r2, [r7, #7]
 80032a0:	4913      	ldr	r1, [pc, #76]	@ (80032f0 <DevAD9833Set_Main+0x98>)
 80032a2:	3304      	adds	r3, #4
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	440b      	add	r3, r1
 80032a8:	8859      	ldrh	r1, [r3, #2]
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <DevAD9833Set_Main+0x94>)
 80032ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			DevAD9833_SetPara(tag_i,AD9833_REG_FREQ0,freq,AD9833_REG_PHASE1,2048,AD9833_OUT_TRIANGLE);
 80032b0:	6838      	ldr	r0, [r7, #0]
 80032b2:	f7fd f8fb 	bl	80004ac <__aeabi_ui2d>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	79f8      	ldrb	r0, [r7, #7]
 80032bc:	2102      	movs	r1, #2
 80032be:	9102      	str	r1, [sp, #8]
 80032c0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80032c4:	9101      	str	r1, [sp, #4]
 80032c6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80032ca:	9100      	str	r1, [sp, #0]
 80032cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032d0:	f7ff ff00 	bl	80030d4 <DevAD9833_SetPara>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	3301      	adds	r3, #1
 80032d8:	71fb      	strb	r3, [r7, #7]
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	2b07      	cmp	r3, #7
 80032de:	d9c5      	bls.n	800326c <DevAD9833Set_Main+0x14>
		}else
		{
		}
	}
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	2000066c 	.word	0x2000066c
 80032f0:	2000061c 	.word	0x2000061c

080032f4 <look1_iflf_binlxpw>:
float CoreTempture;

static float SampleVolFilter(float* buff,uint8_t len);

float look1_iflf_binlxpw(float u0, const float bp0[], const float table[], uint32_t maxIndex)
{
 80032f4:	b590      	push	{r4, r7, lr}
 80032f6:	b089      	sub	sp, #36	@ 0x24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  float frac;
  uint32_t iRght;
  uint32_t iLeft;
  uint32_t bpIdx;

  if (u0 <= bp0[0U])
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f7fd fe89 	bl	8001020 <__aeabi_fcmple>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01a      	beq.n	800334a <look1_iflf_binlxpw+0x56>
  {
    iLeft = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4619      	mov	r1, r3
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f7fd fbcc 	bl	8000abc <__aeabi_fsub>
 8003324:	4603      	mov	r3, r0
 8003326:	461c      	mov	r4, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3304      	adds	r3, #4
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	4610      	mov	r0, r2
 8003336:	f7fd fbc1 	bl	8000abc <__aeabi_fsub>
 800333a:	4603      	mov	r3, r0
 800333c:	4619      	mov	r1, r3
 800333e:	4620      	mov	r0, r4
 8003340:	f7fd fd7a 	bl	8000e38 <__aeabi_fdiv>
 8003344:	4603      	mov	r3, r0
 8003346:	61fb      	str	r3, [r7, #28]
 8003348:	e077      	b.n	800343a <look1_iflf_binlxpw+0x146>
  }
  else if (u0 < bp0[maxIndex])
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f7fd fe58 	bl	800100c <__aeabi_fcmplt>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d043      	beq.n	80033ea <look1_iflf_binlxpw+0xf6>
  {
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	613b      	str	r3, [r7, #16]
    iLeft = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
    iRght = maxIndex;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U)
 8003370:	e015      	b.n	800339e <look1_iflf_binlxpw+0xaa>
    {
      if (u0 < bp0[bpIdx])
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	4413      	add	r3, r2
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4619      	mov	r1, r3
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f7fd fe44 	bl	800100c <__aeabi_fcmplt>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <look1_iflf_binlxpw+0x9c>
      {
        iRght = bpIdx;
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e001      	b.n	8003394 <look1_iflf_binlxpw+0xa0>
      }
      else
      {
        iLeft = bpIdx;
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	617b      	str	r3, [r7, #20]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4413      	add	r3, r2
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	613b      	str	r3, [r7, #16]
    while (iRght - iLeft > 1U)
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d8e4      	bhi.n	8003372 <look1_iflf_binlxpw+0x7e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4619      	mov	r1, r3
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7fd fb81 	bl	8000abc <__aeabi_fsub>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461c      	mov	r4, r3
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	3301      	adds	r3, #1
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4413      	add	r3, r2
 80033c8:	6818      	ldr	r0, [r3, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fb71 	bl	8000abc <__aeabi_fsub>
 80033da:	4603      	mov	r3, r0
 80033dc:	4619      	mov	r1, r3
 80033de:	4620      	mov	r0, r4
 80033e0:	f7fd fd2a 	bl	8000e38 <__aeabi_fdiv>
 80033e4:	4603      	mov	r3, r0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e027      	b.n	800343a <look1_iflf_binlxpw+0x146>
  }
  else
  {
    iLeft = maxIndex - 1U;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3b01      	subs	r3, #1
 80033ee:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033f6:	3b01      	subs	r3, #1
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	4413      	add	r3, r2
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4619      	mov	r1, r3
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f7fd fb5a 	bl	8000abc <__aeabi_fsub>
 8003408:	4603      	mov	r3, r0
 800340a:	461c      	mov	r4, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	4413      	add	r3, r2
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800341c:	3b01      	subs	r3, #1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	4413      	add	r3, r2
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	f7fd fb48 	bl	8000abc <__aeabi_fsub>
 800342c:	4603      	mov	r3, r0
 800342e:	4619      	mov	r1, r3
 8003430:	4620      	mov	r0, r4
 8003432:	f7fd fd01 	bl	8000e38 <__aeabi_fdiv>
 8003436:	4603      	mov	r3, r0
 8003438:	61fb      	str	r3, [r7, #28]
  }

  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	3301      	adds	r3, #1
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fb33 	bl	8000abc <__aeabi_fsub>
 8003456:	4603      	mov	r3, r0
 8003458:	69f9      	ldr	r1, [r7, #28]
 800345a:	4618      	mov	r0, r3
 800345c:	f7fd fc38 	bl	8000cd0 <__aeabi_fmul>
 8003460:	4603      	mov	r3, r0
 8003462:	4618      	mov	r0, r3
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	4413      	add	r3, r2
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4619      	mov	r1, r3
 8003470:	f7fd fb26 	bl	8000ac0 <__addsf3>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3724      	adds	r7, #36	@ 0x24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd90      	pop	{r4, r7, pc}
	...

08003480 <DevADC1Func_Init>:

void DevADC1Func_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8003484:	4804      	ldr	r0, [pc, #16]	@ (8003498 <DevADC1Func_Init+0x18>)
 8003486:	f001 fd53 	bl	8004f30 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1SampleVal, DEV_LEN);
 800348a:	2205      	movs	r2, #5
 800348c:	4903      	ldr	r1, [pc, #12]	@ (800349c <DevADC1Func_Init+0x1c>)
 800348e:	4802      	ldr	r0, [pc, #8]	@ (8003498 <DevADC1Func_Init+0x18>)
 8003490:	f001 fa5a 	bl	8004948 <HAL_ADC_Start_DMA>
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	200001b4 	.word	0x200001b4
 800349c:	200006f4 	.word	0x200006f4

080034a0 <DevADC1Func_Main>:

void DevADC1Func_Main(void)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
	float gain = 1.0f;
 80034a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034aa:	617b      	str	r3, [r7, #20]
	float TemptureVol,CurrentFrontVol,CurrentAfterVol,CoreVol_Temp,TemptureRes;
	static uint8_t sCount = 0;
	static uint8_t sTempOver = 0;

	gain = ADC1SampleVal[4] * 3.3 / 4095 / 1.2;
 80034ac:	4ba8      	ldr	r3, [pc, #672]	@ (8003750 <DevADC1Func_Main+0x2b0>)
 80034ae:	891b      	ldrh	r3, [r3, #8]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f80b 	bl	80004cc <__aeabi_i2d>
 80034b6:	a39c      	add	r3, pc, #624	@ (adr r3, 8003728 <DevADC1Func_Main+0x288>)
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f7fd f870 	bl	80005a0 <__aeabi_dmul>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4610      	mov	r0, r2
 80034c6:	4619      	mov	r1, r3
 80034c8:	a399      	add	r3, pc, #612	@ (adr r3, 8003730 <DevADC1Func_Main+0x290>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f7fd f991 	bl	80007f4 <__aeabi_ddiv>
 80034d2:	4602      	mov	r2, r0
 80034d4:	460b      	mov	r3, r1
 80034d6:	4610      	mov	r0, r2
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 80034de:	4b9d      	ldr	r3, [pc, #628]	@ (8003754 <DevADC1Func_Main+0x2b4>)
 80034e0:	f7fd f988 	bl	80007f4 <__aeabi_ddiv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	460b      	mov	r3, r1
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	f7fd fa92 	bl	8000a14 <__aeabi_d2f>
 80034f0:	4603      	mov	r3, r0
 80034f2:	617b      	str	r3, [r7, #20]
	TemptureVol_Temp[sCount] = (float)ADC1SampleVal[0] * 3.3f / 4095.0f;
 80034f4:	4b96      	ldr	r3, [pc, #600]	@ (8003750 <DevADC1Func_Main+0x2b0>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fb91 	bl	8000c20 <__aeabi_ui2f>
 80034fe:	4603      	mov	r3, r0
 8003500:	4995      	ldr	r1, [pc, #596]	@ (8003758 <DevADC1Func_Main+0x2b8>)
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd fbe4 	bl	8000cd0 <__aeabi_fmul>
 8003508:	4603      	mov	r3, r0
 800350a:	461a      	mov	r2, r3
 800350c:	4b93      	ldr	r3, [pc, #588]	@ (800375c <DevADC1Func_Main+0x2bc>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	461c      	mov	r4, r3
 8003512:	4993      	ldr	r1, [pc, #588]	@ (8003760 <DevADC1Func_Main+0x2c0>)
 8003514:	4610      	mov	r0, r2
 8003516:	f7fd fc8f 	bl	8000e38 <__aeabi_fdiv>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	4b91      	ldr	r3, [pc, #580]	@ (8003764 <DevADC1Func_Main+0x2c4>)
 8003520:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentFrontVol_Temp[sCount] = (float)ADC1SampleVal[1] * 3.3f / 4095.0f  / gain;
 8003524:	4b8a      	ldr	r3, [pc, #552]	@ (8003750 <DevADC1Func_Main+0x2b0>)
 8003526:	885b      	ldrh	r3, [r3, #2]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fb79 	bl	8000c20 <__aeabi_ui2f>
 800352e:	4603      	mov	r3, r0
 8003530:	4989      	ldr	r1, [pc, #548]	@ (8003758 <DevADC1Func_Main+0x2b8>)
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fbcc 	bl	8000cd0 <__aeabi_fmul>
 8003538:	4603      	mov	r3, r0
 800353a:	4989      	ldr	r1, [pc, #548]	@ (8003760 <DevADC1Func_Main+0x2c0>)
 800353c:	4618      	mov	r0, r3
 800353e:	f7fd fc7b 	bl	8000e38 <__aeabi_fdiv>
 8003542:	4603      	mov	r3, r0
 8003544:	461a      	mov	r2, r3
 8003546:	4b85      	ldr	r3, [pc, #532]	@ (800375c <DevADC1Func_Main+0x2bc>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461c      	mov	r4, r3
 800354c:	6979      	ldr	r1, [r7, #20]
 800354e:	4610      	mov	r0, r2
 8003550:	f7fd fc72 	bl	8000e38 <__aeabi_fdiv>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	4b83      	ldr	r3, [pc, #524]	@ (8003768 <DevADC1Func_Main+0x2c8>)
 800355a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentAfterVol_Temp[sCount] = (float)ADC1SampleVal[2] * 3.3f / 4095.0f  / gain;
 800355e:	4b7c      	ldr	r3, [pc, #496]	@ (8003750 <DevADC1Func_Main+0x2b0>)
 8003560:	889b      	ldrh	r3, [r3, #4]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fb5c 	bl	8000c20 <__aeabi_ui2f>
 8003568:	4603      	mov	r3, r0
 800356a:	497b      	ldr	r1, [pc, #492]	@ (8003758 <DevADC1Func_Main+0x2b8>)
 800356c:	4618      	mov	r0, r3
 800356e:	f7fd fbaf 	bl	8000cd0 <__aeabi_fmul>
 8003572:	4603      	mov	r3, r0
 8003574:	497a      	ldr	r1, [pc, #488]	@ (8003760 <DevADC1Func_Main+0x2c0>)
 8003576:	4618      	mov	r0, r3
 8003578:	f7fd fc5e 	bl	8000e38 <__aeabi_fdiv>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	4b76      	ldr	r3, [pc, #472]	@ (800375c <DevADC1Func_Main+0x2bc>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	461c      	mov	r4, r3
 8003586:	6979      	ldr	r1, [r7, #20]
 8003588:	4610      	mov	r0, r2
 800358a:	f7fd fc55 	bl	8000e38 <__aeabi_fdiv>
 800358e:	4603      	mov	r3, r0
 8003590:	461a      	mov	r2, r3
 8003592:	4b76      	ldr	r3, [pc, #472]	@ (800376c <DevADC1Func_Main+0x2cc>)
 8003594:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CoreVol_Temp =  (float)ADC1SampleVal[3] * 3.3f / 4095.0f / gain;
 8003598:	4b6d      	ldr	r3, [pc, #436]	@ (8003750 <DevADC1Func_Main+0x2b0>)
 800359a:	88db      	ldrh	r3, [r3, #6]
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd fb3f 	bl	8000c20 <__aeabi_ui2f>
 80035a2:	4603      	mov	r3, r0
 80035a4:	496c      	ldr	r1, [pc, #432]	@ (8003758 <DevADC1Func_Main+0x2b8>)
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd fb92 	bl	8000cd0 <__aeabi_fmul>
 80035ac:	4603      	mov	r3, r0
 80035ae:	496c      	ldr	r1, [pc, #432]	@ (8003760 <DevADC1Func_Main+0x2c0>)
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fd fc41 	bl	8000e38 <__aeabi_fdiv>
 80035b6:	4603      	mov	r3, r0
 80035b8:	6979      	ldr	r1, [r7, #20]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fc3c 	bl	8000e38 <__aeabi_fdiv>
 80035c0:	4603      	mov	r3, r0
 80035c2:	613b      	str	r3, [r7, #16]

	sCount++;
 80035c4:	4b65      	ldr	r3, [pc, #404]	@ (800375c <DevADC1Func_Main+0x2bc>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3301      	adds	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b63      	ldr	r3, [pc, #396]	@ (800375c <DevADC1Func_Main+0x2bc>)
 80035ce:	701a      	strb	r2, [r3, #0]
	if(sCount >= 15)
 80035d0:	4b62      	ldr	r3, [pc, #392]	@ (800375c <DevADC1Func_Main+0x2bc>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b0e      	cmp	r3, #14
 80035d6:	d902      	bls.n	80035de <DevADC1Func_Main+0x13e>
	{
		sCount = 0;
 80035d8:	4b60      	ldr	r3, [pc, #384]	@ (800375c <DevADC1Func_Main+0x2bc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	701a      	strb	r2, [r3, #0]
	}

	TemptureVol = SampleVolFilter(TemptureVol_Temp,FILTERNUM);
 80035de:	210f      	movs	r1, #15
 80035e0:	4860      	ldr	r0, [pc, #384]	@ (8003764 <DevADC1Func_Main+0x2c4>)
 80035e2:	f000 f8f9 	bl	80037d8 <SampleVolFilter>
 80035e6:	60f8      	str	r0, [r7, #12]
	CurrentFrontVol = SampleVolFilter(CurrentFrontVol_Temp,FILTERNUM);
 80035e8:	210f      	movs	r1, #15
 80035ea:	485f      	ldr	r0, [pc, #380]	@ (8003768 <DevADC1Func_Main+0x2c8>)
 80035ec:	f000 f8f4 	bl	80037d8 <SampleVolFilter>
 80035f0:	60b8      	str	r0, [r7, #8]
	CurrentAfterVol = SampleVolFilter(CurrentAfterVol_Temp,FILTERNUM);
 80035f2:	210f      	movs	r1, #15
 80035f4:	485d      	ldr	r0, [pc, #372]	@ (800376c <DevADC1Func_Main+0x2cc>)
 80035f6:	f000 f8ef 	bl	80037d8 <SampleVolFilter>
 80035fa:	6078      	str	r0, [r7, #4]
	TemptureRes = (10000.0f * TemptureVol) / (3.3f - TemptureVol);
 80035fc:	495c      	ldr	r1, [pc, #368]	@ (8003770 <DevADC1Func_Main+0x2d0>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7fd fb66 	bl	8000cd0 <__aeabi_fmul>
 8003604:	4603      	mov	r3, r0
 8003606:	461c      	mov	r4, r3
 8003608:	68f9      	ldr	r1, [r7, #12]
 800360a:	4853      	ldr	r0, [pc, #332]	@ (8003758 <DevADC1Func_Main+0x2b8>)
 800360c:	f7fd fa56 	bl	8000abc <__aeabi_fsub>
 8003610:	4603      	mov	r3, r0
 8003612:	4619      	mov	r1, r3
 8003614:	4620      	mov	r0, r4
 8003616:	f7fd fc0f 	bl	8000e38 <__aeabi_fdiv>
 800361a:	4603      	mov	r3, r0
 800361c:	603b      	str	r3, [r7, #0]

	SampleTemp = look1_iflf_binlxpw(TemptureRes,INP_HWTemp_R,OUT_HWTemp_T,TEMPTURENUM - 1);
 800361e:	23a0      	movs	r3, #160	@ 0xa0
 8003620:	4a54      	ldr	r2, [pc, #336]	@ (8003774 <DevADC1Func_Main+0x2d4>)
 8003622:	4955      	ldr	r1, [pc, #340]	@ (8003778 <DevADC1Func_Main+0x2d8>)
 8003624:	6838      	ldr	r0, [r7, #0]
 8003626:	f7ff fe65 	bl	80032f4 <look1_iflf_binlxpw>
 800362a:	4603      	mov	r3, r0
 800362c:	4a53      	ldr	r2, [pc, #332]	@ (800377c <DevADC1Func_Main+0x2dc>)
 800362e:	6013      	str	r3, [r2, #0]
	CurrentFront = (CurrentFrontVol - 1.14) / 50.0f * 100.0f;			//CurrentFrontVol * GAIN(50) / 10mΩ(0.01);
 8003630:	68b8      	ldr	r0, [r7, #8]
 8003632:	f7fc ff5d 	bl	80004f0 <__aeabi_f2d>
 8003636:	a340      	add	r3, pc, #256	@ (adr r3, 8003738 <DevADC1Func_Main+0x298>)
 8003638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363c:	f7fc fdf8 	bl	8000230 <__aeabi_dsub>
 8003640:	4602      	mov	r2, r0
 8003642:	460b      	mov	r3, r1
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	4b4c      	ldr	r3, [pc, #304]	@ (8003780 <DevADC1Func_Main+0x2e0>)
 800364e:	f7fd f8d1 	bl	80007f4 <__aeabi_ddiv>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	4b49      	ldr	r3, [pc, #292]	@ (8003784 <DevADC1Func_Main+0x2e4>)
 8003660:	f7fc ff9e 	bl	80005a0 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	f7fd f9d2 	bl	8000a14 <__aeabi_d2f>
 8003670:	4603      	mov	r3, r0
 8003672:	4a45      	ldr	r2, [pc, #276]	@ (8003788 <DevADC1Func_Main+0x2e8>)
 8003674:	6013      	str	r3, [r2, #0]
	CurrentAfter = CurrentAfterVol / 4.7f * 50.0f * 100.0f;
 8003676:	4945      	ldr	r1, [pc, #276]	@ (800378c <DevADC1Func_Main+0x2ec>)
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7fd fbdd 	bl	8000e38 <__aeabi_fdiv>
 800367e:	4603      	mov	r3, r0
 8003680:	4943      	ldr	r1, [pc, #268]	@ (8003790 <DevADC1Func_Main+0x2f0>)
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fb24 	bl	8000cd0 <__aeabi_fmul>
 8003688:	4603      	mov	r3, r0
 800368a:	4942      	ldr	r1, [pc, #264]	@ (8003794 <DevADC1Func_Main+0x2f4>)
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fb1f 	bl	8000cd0 <__aeabi_fmul>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4b40      	ldr	r3, [pc, #256]	@ (8003798 <DevADC1Func_Main+0x2f8>)
 8003698:	601a      	str	r2, [r3, #0]
	CoreTempture = (1.43 - CoreVol_Temp) / 0.0043f + 25.0f;
 800369a:	6938      	ldr	r0, [r7, #16]
 800369c:	f7fc ff28 	bl	80004f0 <__aeabi_f2d>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	a126      	add	r1, pc, #152	@ (adr r1, 8003740 <DevADC1Func_Main+0x2a0>)
 80036a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036aa:	f7fc fdc1 	bl	8000230 <__aeabi_dsub>
 80036ae:	4602      	mov	r2, r0
 80036b0:	460b      	mov	r3, r1
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	a324      	add	r3, pc, #144	@ (adr r3, 8003748 <DevADC1Func_Main+0x2a8>)
 80036b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036bc:	f7fd f89a 	bl	80007f4 <__aeabi_ddiv>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4610      	mov	r0, r2
 80036c6:	4619      	mov	r1, r3
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <DevADC1Func_Main+0x2fc>)
 80036ce:	f7fc fdb1 	bl	8000234 <__adddf3>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4610      	mov	r0, r2
 80036d8:	4619      	mov	r1, r3
 80036da:	f7fd f99b 	bl	8000a14 <__aeabi_d2f>
 80036de:	4603      	mov	r3, r0
 80036e0:	4a2f      	ldr	r2, [pc, #188]	@ (80037a0 <DevADC1Func_Main+0x300>)
 80036e2:	6013      	str	r3, [r2, #0]

	/*过温检测，超过80℃屏幕提示报警*/
	if((SampleTemp > 80.0f) && (sTempOver == 0))
 80036e4:	4b25      	ldr	r3, [pc, #148]	@ (800377c <DevADC1Func_Main+0x2dc>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	492e      	ldr	r1, [pc, #184]	@ (80037a4 <DevADC1Func_Main+0x304>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7fd fcac 	bl	8001048 <__aeabi_fcmpgt>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <DevADC1Func_Main+0x272>
 80036f6:	4b2c      	ldr	r3, [pc, #176]	@ (80037a8 <DevADC1Func_Main+0x308>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d109      	bne.n	8003712 <DevADC1Func_Main+0x272>
	{
		sTempOver = 1;
 80036fe:	4b2a      	ldr	r3, [pc, #168]	@ (80037a8 <DevADC1Func_Main+0x308>)
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
		DevScreenSendData(0x30,sTempOver);
 8003704:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <DevADC1Func_Main+0x308>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	2030      	movs	r0, #48	@ 0x30
 800370c:	f000 ff0a 	bl	8004524 <DevScreenSendData>
	}else if((SampleTemp < 75.0f) && (sTempOver == 1))
	{
		sTempOver = 0;
		DevScreenSendData(0x30,sTempOver);
	}
}
 8003710:	e05b      	b.n	80037ca <DevADC1Func_Main+0x32a>
	}else if((SampleTemp < 75.0f) && (sTempOver == 1))
 8003712:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <DevADC1Func_Main+0x2dc>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4925      	ldr	r1, [pc, #148]	@ (80037ac <DevADC1Func_Main+0x30c>)
 8003718:	4618      	mov	r0, r3
 800371a:	f7fd fc77 	bl	800100c <__aeabi_fcmplt>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d145      	bne.n	80037b0 <DevADC1Func_Main+0x310>
}
 8003724:	e051      	b.n	80037ca <DevADC1Func_Main+0x32a>
 8003726:	bf00      	nop
 8003728:	66666666 	.word	0x66666666
 800372c:	400a6666 	.word	0x400a6666
 8003730:	00000000 	.word	0x00000000
 8003734:	40affe00 	.word	0x40affe00
 8003738:	a3d70a3d 	.word	0xa3d70a3d
 800373c:	3ff23d70 	.word	0x3ff23d70
 8003740:	ae147ae1 	.word	0xae147ae1
 8003744:	3ff6e147 	.word	0x3ff6e147
 8003748:	80000000 	.word	0x80000000
 800374c:	3f719ce0 	.word	0x3f719ce0
 8003750:	200006f4 	.word	0x200006f4
 8003754:	3ff33333 	.word	0x3ff33333
 8003758:	40533333 	.word	0x40533333
 800375c:	20000710 	.word	0x20000710
 8003760:	457ff000 	.word	0x457ff000
 8003764:	20000138 	.word	0x20000138
 8003768:	2000067c 	.word	0x2000067c
 800376c:	200006b8 	.word	0x200006b8
 8003770:	461c4000 	.word	0x461c4000
 8003774:	080097d4 	.word	0x080097d4
 8003778:	08009550 	.word	0x08009550
 800377c:	20000700 	.word	0x20000700
 8003780:	40490000 	.word	0x40490000
 8003784:	40590000 	.word	0x40590000
 8003788:	20000704 	.word	0x20000704
 800378c:	40966666 	.word	0x40966666
 8003790:	42480000 	.word	0x42480000
 8003794:	42c80000 	.word	0x42c80000
 8003798:	20000708 	.word	0x20000708
 800379c:	40390000 	.word	0x40390000
 80037a0:	2000070c 	.word	0x2000070c
 80037a4:	42a00000 	.word	0x42a00000
 80037a8:	20000711 	.word	0x20000711
 80037ac:	42960000 	.word	0x42960000
	}else if((SampleTemp < 75.0f) && (sTempOver == 1))
 80037b0:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <DevADC1Func_Main+0x334>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d108      	bne.n	80037ca <DevADC1Func_Main+0x32a>
		sTempOver = 0;
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <DevADC1Func_Main+0x334>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
		DevScreenSendData(0x30,sTempOver);
 80037be:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <DevADC1Func_Main+0x334>)
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	4619      	mov	r1, r3
 80037c4:	2030      	movs	r0, #48	@ 0x30
 80037c6:	f000 fead 	bl	8004524 <DevScreenSendData>
}
 80037ca:	bf00      	nop
 80037cc:	371c      	adds	r7, #28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd90      	pop	{r4, r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000711 	.word	0x20000711

080037d8 <SampleVolFilter>:

static float SampleVolFilter(float* buff,uint8_t len)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	70fb      	strb	r3, [r7, #3]
	float vol_max,vol_min;
	float vol_sum = 0;
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
	uint8_t tag_i = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	72fb      	strb	r3, [r7, #11]

	vol_max = buff[0];
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	617b      	str	r3, [r7, #20]
	vol_min = buff[0];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	613b      	str	r3, [r7, #16]

	for(tag_i = 0;tag_i < len;tag_i++)
 80037fa:	2300      	movs	r3, #0
 80037fc:	72fb      	strb	r3, [r7, #11]
 80037fe:	e032      	b.n	8003866 <SampleVolFilter+0x8e>
	{
		if(buff[tag_i] < vol_min)
 8003800:	7afb      	ldrb	r3, [r7, #11]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4619      	mov	r1, r3
 800380c:	6938      	ldr	r0, [r7, #16]
 800380e:	f7fd fc1b 	bl	8001048 <__aeabi_fcmpgt>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d006      	beq.n	8003826 <SampleVolFilter+0x4e>
		{
			vol_min = buff[tag_i];
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	e011      	b.n	800384a <SampleVolFilter+0x72>
		}else if(buff[tag_i] > vol_max)
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4619      	mov	r1, r3
 8003832:	6978      	ldr	r0, [r7, #20]
 8003834:	f7fd fbea 	bl	800100c <__aeabi_fcmplt>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d005      	beq.n	800384a <SampleVolFilter+0x72>
		{
			vol_max = buff[tag_i];
 800383e:	7afb      	ldrb	r3, [r7, #11]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	4413      	add	r3, r2
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	617b      	str	r3, [r7, #20]
		}

		vol_sum += buff[tag_i];
 800384a:	7afb      	ldrb	r3, [r7, #11]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4619      	mov	r1, r3
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7fd f932 	bl	8000ac0 <__addsf3>
 800385c:	4603      	mov	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003860:	7afb      	ldrb	r3, [r7, #11]
 8003862:	3301      	adds	r3, #1
 8003864:	72fb      	strb	r3, [r7, #11]
 8003866:	7afa      	ldrb	r2, [r7, #11]
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3c8      	bcc.n	8003800 <SampleVolFilter+0x28>
	}

	return (vol_sum - vol_max - vol_min) / (len -2);
 800386e:	6979      	ldr	r1, [r7, #20]
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f7fd f923 	bl	8000abc <__aeabi_fsub>
 8003876:	4603      	mov	r3, r0
 8003878:	6939      	ldr	r1, [r7, #16]
 800387a:	4618      	mov	r0, r3
 800387c:	f7fd f91e 	bl	8000abc <__aeabi_fsub>
 8003880:	4603      	mov	r3, r0
 8003882:	461c      	mov	r4, r3
 8003884:	78fb      	ldrb	r3, [r7, #3]
 8003886:	3b02      	subs	r3, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f7fd f9cd 	bl	8000c28 <__aeabi_i2f>
 800388e:	4603      	mov	r3, r0
 8003890:	4619      	mov	r1, r3
 8003892:	4620      	mov	r0, r4
 8003894:	f7fd fad0 	bl	8000e38 <__aeabi_fdiv>
 8003898:	4603      	mov	r3, r0
}
 800389a:	4618      	mov	r0, r3
 800389c:	371c      	adds	r7, #28
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd90      	pop	{r4, r7, pc}

080038a2 <DevFlash_Write>:
static uint32_t FlashOffset = 0;

extern Device_Param DevParamRead;

HAL_StatusTypeDef DevFlash_Write(uint32_t addr,uint16_t *buff,uint8_t len)
{
 80038a2:	b5b0      	push	{r4, r5, r7, lr}
 80038a4:	b088      	sub	sp, #32
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	60f8      	str	r0, [r7, #12]
 80038aa:	60b9      	str	r1, [r7, #8]
 80038ac:	4613      	mov	r3, r2
 80038ae:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	77fb      	strb	r3, [r7, #31]
	uint8_t tag_i= 0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	77bb      	strb	r3, [r7, #30]
	uint16_t writedata = 0;
 80038b8:	2300      	movs	r3, #0
 80038ba:	82fb      	strh	r3, [r7, #22]
	uint32_t writeaddr = addr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 80038c0:	f002 fa04 	bl	8005ccc <HAL_FLASH_Unlock>

	for(tag_i = 0;tag_i < len;tag_i++)
 80038c4:	2300      	movs	r3, #0
 80038c6:	77bb      	strb	r3, [r7, #30]
 80038c8:	e01e      	b.n	8003908 <DevFlash_Write+0x66>
	{
		writedata = buff[tag_i];
 80038ca:	7fbb      	ldrb	r3, [r7, #30]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	4413      	add	r3, r2
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	82fb      	strh	r3, [r7, #22]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, writeaddr, (uint64_t)writedata);
 80038d6:	8afb      	ldrh	r3, [r7, #22]
 80038d8:	2200      	movs	r2, #0
 80038da:	461c      	mov	r4, r3
 80038dc:	4615      	mov	r5, r2
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	69b9      	ldr	r1, [r7, #24]
 80038e4:	2001      	movs	r0, #1
 80038e6:	f002 f963 	bl	8005bb0 <HAL_FLASH_Program>
 80038ea:	4603      	mov	r3, r0
 80038ec:	77fb      	strb	r3, [r7, #31]
		if(status != HAL_OK)
 80038ee:	7ffb      	ldrb	r3, [r7, #31]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <DevFlash_Write+0x5a>
		{
			HAL_FLASH_Lock();
 80038f4:	f002 fa24 	bl	8005d40 <HAL_FLASH_Lock>
			return status;
 80038f8:	7ffb      	ldrb	r3, [r7, #31]
 80038fa:	e00c      	b.n	8003916 <DevFlash_Write+0x74>
		}else
		{
			writeaddr += 2;
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	3302      	adds	r3, #2
 8003900:	61bb      	str	r3, [r7, #24]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003902:	7fbb      	ldrb	r3, [r7, #30]
 8003904:	3301      	adds	r3, #1
 8003906:	77bb      	strb	r3, [r7, #30]
 8003908:	7fba      	ldrb	r2, [r7, #30]
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d3dc      	bcc.n	80038ca <DevFlash_Write+0x28>
		}
	}
	HAL_FLASH_Lock();
 8003910:	f002 fa16 	bl	8005d40 <HAL_FLASH_Lock>

	return status;
 8003914:	7ffb      	ldrb	r3, [r7, #31]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bdb0      	pop	{r4, r5, r7, pc}

0800391e <DevFlash_Read>:

void DevFlash_Read(uint32_t addr,uint16_t* buff,uint16_t len)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b086      	sub	sp, #24
 8003922:	af00      	add	r7, sp, #0
 8003924:	60f8      	str	r0, [r7, #12]
 8003926:	60b9      	str	r1, [r7, #8]
 8003928:	4613      	mov	r3, r2
 800392a:	80fb      	strh	r3, [r7, #6]
	uint8_t tag_i = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]
	uint32_t readaddr = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8003934:	f002 f9ca 	bl	8005ccc <HAL_FLASH_Unlock>

	readaddr = addr;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 800393c:	2300      	movs	r3, #0
 800393e:	75fb      	strb	r3, [r7, #23]
 8003940:	e00d      	b.n	800395e <DevFlash_Read+0x40>
	{
		*(buff + tag_i) = *(volatile uint32_t *)readaddr;
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	4413      	add	r3, r2
 800394e:	b28a      	uxth	r2, r1
 8003950:	801a      	strh	r2, [r3, #0]
		readaddr += 2;
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	3302      	adds	r3, #2
 8003956:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003958:	7dfb      	ldrb	r3, [r7, #23]
 800395a:	3301      	adds	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	b29b      	uxth	r3, r3
 8003962:	88fa      	ldrh	r2, [r7, #6]
 8003964:	429a      	cmp	r2, r3
 8003966:	d8ec      	bhi.n	8003942 <DevFlash_Read+0x24>
	}

	HAL_FLASH_Lock();
 8003968:	f002 f9ea 	bl	8005d40 <HAL_FLASH_Lock>
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <DevParam_Init>:

void DevParam_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	71fb      	strb	r3, [r7, #7]
	uint32_t read_addr = FLASH_SLAVE_ULTRAPARAM;
 800397e:	4b54      	ldr	r3, [pc, #336]	@ (8003ad0 <DevParam_Init+0x15c>)
 8003980:	603b      	str	r3, [r7, #0]

	while(read_addr <= (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003982:	e030      	b.n	80039e6 <DevParam_Init+0x72>
	{
		DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003984:	2228      	movs	r2, #40	@ 0x28
 8003986:	4953      	ldr	r1, [pc, #332]	@ (8003ad4 <DevParam_Init+0x160>)
 8003988:	6838      	ldr	r0, [r7, #0]
 800398a:	f7ff ffc8 	bl	800391e <DevFlash_Read>
		if(DevParamRead.UltraParam.WriteCount != 0xFFFFFFFF)
 800398e:	4b51      	ldr	r3, [pc, #324]	@ (8003ad4 <DevParam_Init+0x160>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003996:	d00c      	beq.n	80039b2 <DevParam_Init+0x3e>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 8003998:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad8 <DevParam_Init+0x164>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3350      	adds	r3, #80	@ 0x50
 800399e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ad8 <DevParam_Init+0x164>)
 80039a0:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 80039a2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ad8 <DevParam_Init+0x164>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80039aa:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	e019      	b.n	80039e6 <DevParam_Init+0x72>
		}else
		{
			if(read_addr == FLASH_SLAVE_ULTRAPARAM)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	4a46      	ldr	r2, [pc, #280]	@ (8003ad0 <DevParam_Init+0x15c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d103      	bne.n	80039c2 <DevParam_Init+0x4e>
			{
				DevParamRead.UltraParam.WriteCount = 0;
 80039ba:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <DevParam_Init+0x160>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
				break;
 80039c0:	e015      	b.n	80039ee <DevParam_Init+0x7a>
			}

			FlashOffset -= (ULTRAPARAMSIZE * 2);
 80039c2:	4b45      	ldr	r3, [pc, #276]	@ (8003ad8 <DevParam_Init+0x164>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3b50      	subs	r3, #80	@ 0x50
 80039c8:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <DevParam_Init+0x164>)
 80039ca:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 80039cc:	4b42      	ldr	r3, [pc, #264]	@ (8003ad8 <DevParam_Init+0x164>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80039d4:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 80039d8:	603b      	str	r3, [r7, #0]
			DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 80039da:	2228      	movs	r2, #40	@ 0x28
 80039dc:	493d      	ldr	r1, [pc, #244]	@ (8003ad4 <DevParam_Init+0x160>)
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f7ff ff9d 	bl	800391e <DevFlash_Read>
			break;
 80039e4:	e003      	b.n	80039ee <DevParam_Init+0x7a>
	while(read_addr <= (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	4a3c      	ldr	r2, [pc, #240]	@ (8003adc <DevParam_Init+0x168>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d9ca      	bls.n	8003984 <DevParam_Init+0x10>
		}
	}

	if(DevParamRead.UltraParam.VibraEnableFlg == 0xFFFF)
 80039ee:	4b39      	ldr	r3, [pc, #228]	@ (8003ad4 <DevParam_Init+0x160>)
 80039f0:	8b5b      	ldrh	r3, [r3, #26]
 80039f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d105      	bne.n	8003a06 <DevParam_Init+0x92>
	{
		DevParamRead.UltraParam.VibraEnableFlg = 1;
 80039fa:	4b36      	ldr	r3, [pc, #216]	@ (8003ad4 <DevParam_Init+0x160>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	835a      	strh	r2, [r3, #26]
		DevParamRead.UltraParam.Vibra_Param = 0x0A;
 8003a00:	4b34      	ldr	r3, [pc, #208]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a02:	220a      	movs	r2, #10
 8003a04:	839a      	strh	r2, [r3, #28]
	}

	if(DevParamRead.UltraParam.PlusePeriod[0] == 0xFFFF)
 8003a06:	4b33      	ldr	r3, [pc, #204]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d10f      	bne.n	8003a32 <DevParam_Init+0xbe>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	71fb      	strb	r3, [r7, #7]
 8003a16:	e009      	b.n	8003a2c <DevParam_Init+0xb8>
		{
			DevParamRead.UltraParam.PlusePeriod[tag_i] = 100;
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	2264      	movs	r2, #100	@ 0x64
 8003a24:	80da      	strh	r2, [r3, #6]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	71fb      	strb	r3, [r7, #7]
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	2b07      	cmp	r3, #7
 8003a30:	d9f2      	bls.n	8003a18 <DevParam_Init+0xa4>
		}
	}

	if(DevParamRead.UltraParam.PluseDuty[0] == 0xFF)
 8003a32:	4b28      	ldr	r3, [pc, #160]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a34:	7f9b      	ldrb	r3, [r3, #30]
 8003a36:	2bff      	cmp	r3, #255	@ 0xff
 8003a38:	d10d      	bne.n	8003a56 <DevParam_Init+0xe2>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	71fb      	strb	r3, [r7, #7]
 8003a3e:	e007      	b.n	8003a50 <DevParam_Init+0xdc>
		{
			DevParamRead.UltraParam.PluseDuty[tag_i] = 50;
 8003a40:	79fb      	ldrb	r3, [r7, #7]
 8003a42:	4a24      	ldr	r2, [pc, #144]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a44:	4413      	add	r3, r2
 8003a46:	2232      	movs	r2, #50	@ 0x32
 8003a48:	779a      	strb	r2, [r3, #30]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a4a:	79fb      	ldrb	r3, [r7, #7]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	71fb      	strb	r3, [r7, #7]
 8003a50:	79fb      	ldrb	r3, [r7, #7]
 8003a52:	2b07      	cmp	r3, #7
 8003a54:	d9f4      	bls.n	8003a40 <DevParam_Init+0xcc>
		}
	}

	if(DevParamRead.UltraParam.StimuTime == 0xFFFF)
 8003a56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d107      	bne.n	8003a72 <DevParam_Init+0xfe>
	{
		DevParamRead.UltraParam.StimuTime = 1000;
 8003a62:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a68:	86da      	strh	r2, [r3, #54]	@ 0x36
		DevParamRead.UltraParam.IdleTime = 1000;
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a70:	871a      	strh	r2, [r3, #56]	@ 0x38
	}

	if(DevParamRead.UltraParam.UltraEn[0] == 0xFF)
 8003a72:	4b18      	ldr	r3, [pc, #96]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a74:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003a78:	2bff      	cmp	r3, #255	@ 0xff
 8003a7a:	d10e      	bne.n	8003a9a <DevParam_Init+0x126>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	71fb      	strb	r3, [r7, #7]
 8003a80:	e008      	b.n	8003a94 <DevParam_Init+0x120>
		{
			DevParamRead.UltraParam.UltraEn[tag_i] = 1;
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	4a13      	ldr	r2, [pc, #76]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a86:	4413      	add	r3, r2
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	3301      	adds	r3, #1
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b07      	cmp	r3, #7
 8003a98:	d9f3      	bls.n	8003a82 <DevParam_Init+0x10e>
		}
	}

	if(DevParamRead.UltraParam.UltraWorkModule == 0xFFFF)
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <DevParam_Init+0x160>)
 8003a9c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d103      	bne.n	8003ab0 <DevParam_Init+0x13c>
	{
		DevParamRead.UltraParam.UltraWorkModule = 2;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <DevParam_Init+0x160>)
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}

	if(DevParamRead.UltraParam.UltraPowerLevel == 0xFFFF)
 8003ab0:	4b08      	ldr	r3, [pc, #32]	@ (8003ad4 <DevParam_Init+0x160>)
 8003ab2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ab6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d103      	bne.n	8003ac6 <DevParam_Init+0x152>
	{
		DevParamRead.UltraParam.UltraPowerLevel = 0;
 8003abe:	4b05      	ldr	r3, [pc, #20]	@ (8003ad4 <DevParam_Init+0x160>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
}
 8003ac6:	bf00      	nop
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	08080000 	.word	0x08080000
 8003ad4:	2000061c 	.word	0x2000061c
 8003ad8:	20000714 	.word	0x20000714
 8003adc:	08081000 	.word	0x08081000

08003ae0 <DevFlashWrite_Main>:

void DevFlashWrite_Main(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
	uint32_t sectorError = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	613b      	str	r3, [r7, #16]
	uint32_t write_addr = FLASH_SLAVE_ULTRAPARAM;
 8003aea:	4b20      	ldr	r3, [pc, #128]	@ (8003b6c <DevFlashWrite_Main+0x8c>)
 8003aec:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef eraseInitStruct;

	if(FlashSaveFlg == 1)
 8003aee:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <DevFlashWrite_Main+0x90>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d135      	bne.n	8003b62 <DevFlashWrite_Main+0x82>
	{
		DevParamRead.UltraParam.WriteCount += 1;
 8003af6:	4b1f      	ldr	r3, [pc, #124]	@ (8003b74 <DevFlashWrite_Main+0x94>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	3301      	adds	r3, #1
 8003afc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <DevFlashWrite_Main+0x94>)
 8003afe:	6013      	str	r3, [r2, #0]

		if(DevParamRead.UltraParam.WriteCount != 1)
 8003b00:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <DevFlashWrite_Main+0x94>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d009      	beq.n	8003b1c <DevFlashWrite_Main+0x3c>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 8003b08:	4b1b      	ldr	r3, [pc, #108]	@ (8003b78 <DevFlashWrite_Main+0x98>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3350      	adds	r3, #80	@ 0x50
 8003b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b78 <DevFlashWrite_Main+0x98>)
 8003b10:	6013      	str	r3, [r2, #0]
			write_addr += FlashOffset;
 8003b12:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <DevFlashWrite_Main+0x98>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4413      	add	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
		}
		if((write_addr + ULTRAPARAMSIZE * 2) > (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3350      	adds	r3, #80	@ 0x50
 8003b20:	4a16      	ldr	r2, [pc, #88]	@ (8003b7c <DevFlashWrite_Main+0x9c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d915      	bls.n	8003b52 <DevFlashWrite_Main+0x72>
		{
			HAL_FLASH_Unlock();
 8003b26:	f002 f8d1 	bl	8005ccc <HAL_FLASH_Unlock>

			eraseInitStruct.Banks = FLASH_BANK_2;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	607b      	str	r3, [r7, #4]
			eraseInitStruct.NbPages = 2;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	60fb      	str	r3, [r7, #12]
			eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003b32:	2300      	movs	r3, #0
 8003b34:	603b      	str	r3, [r7, #0]
			eraseInitStruct.PageAddress = FLASH_SLAVE_ULTRAPARAM;
 8003b36:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <DevFlashWrite_Main+0x8c>)
 8003b38:	60bb      	str	r3, [r7, #8]

			HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 8003b3a:	f107 0210 	add.w	r2, r7, #16
 8003b3e:	463b      	mov	r3, r7
 8003b40:	4611      	mov	r1, r2
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 fa2a 	bl	8005f9c <HAL_FLASHEx_Erase>

			write_addr = FLASH_SLAVE_ULTRAPARAM;
 8003b48:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <DevFlashWrite_Main+0x8c>)
 8003b4a:	617b      	str	r3, [r7, #20]
			FlashOffset = 0;
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b78 <DevFlashWrite_Main+0x98>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
		}

		DevFlash_Write(write_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003b52:	2228      	movs	r2, #40	@ 0x28
 8003b54:	4907      	ldr	r1, [pc, #28]	@ (8003b74 <DevFlashWrite_Main+0x94>)
 8003b56:	6978      	ldr	r0, [r7, #20]
 8003b58:	f7ff fea3 	bl	80038a2 <DevFlash_Write>
		FlashSaveFlg = 0;
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <DevFlashWrite_Main+0x90>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	701a      	strb	r2, [r3, #0]
	}
}
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	08080000 	.word	0x08080000
 8003b70:	20000712 	.word	0x20000712
 8003b74:	2000061c 	.word	0x2000061c
 8003b78:	20000714 	.word	0x20000714
 8003b7c:	08081000 	.word	0x08081000

08003b80 <DevPwm_LoadDuty>:

static void DevPwm_SetPulseDuty(uint8_t ch);
static uint32_t DevPwm_SetPulseFreq(uint8_t ch,uint32_t pulsetime,uint8_t duty);

void DevPwm_LoadDuty(uint8_t ch,uint8_t duty)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	4603      	mov	r3, r0
 8003b88:	460a      	mov	r2, r1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71bb      	strb	r3, [r7, #6]
	if(ch < DevUltraChMax)
 8003b90:	79fb      	ldrb	r3, [r7, #7]
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	d803      	bhi.n	8003b9e <DevPwm_LoadDuty+0x1e>
	{
		pwm_duty[ch] = duty;
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4903      	ldr	r1, [pc, #12]	@ (8003ba8 <DevPwm_LoadDuty+0x28>)
 8003b9a:	79ba      	ldrb	r2, [r7, #6]
 8003b9c:	54ca      	strb	r2, [r1, r3]
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	20000718 	.word	0x20000718

08003bac <DevPwm_LoadPeriod>:

void DevPwm_LoadPeriod(uint8_t ch,uint8_t period)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	71fb      	strb	r3, [r7, #7]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71bb      	strb	r3, [r7, #6]
	if(ch < DevUltraChMax)
 8003bbc:	79fb      	ldrb	r3, [r7, #7]
 8003bbe:	2b07      	cmp	r3, #7
 8003bc0:	d804      	bhi.n	8003bcc <DevPwm_LoadPeriod+0x20>
	{
		pwm_period[ch] = period;
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	79ba      	ldrb	r2, [r7, #6]
 8003bc6:	4904      	ldr	r1, [pc, #16]	@ (8003bd8 <DevPwm_LoadPeriod+0x2c>)
 8003bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8003bcc:	bf00      	nop
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bc80      	pop	{r7}
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000728 	.word	0x20000728

08003bdc <DevPwmFunc_Init>:

void DevPwmFunc_Init(void)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]
	uint8_t motor_level = 0xA;
 8003be6:	230a      	movs	r3, #10
 8003be8:	71bb      	strb	r3, [r7, #6]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	71fb      	strb	r3, [r7, #7]
 8003bee:	e032      	b.n	8003c56 <DevPwmFunc_Init+0x7a>
	{
		pwm_duty[tag_i] = DevParamRead.UltraParam.PluseDuty[tag_i];
 8003bf0:	79fa      	ldrb	r2, [r7, #7]
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	4929      	ldr	r1, [pc, #164]	@ (8003c9c <DevPwmFunc_Init+0xc0>)
 8003bf6:	440a      	add	r2, r1
 8003bf8:	7f91      	ldrb	r1, [r2, #30]
 8003bfa:	4a29      	ldr	r2, [pc, #164]	@ (8003ca0 <DevPwmFunc_Init+0xc4>)
 8003bfc:	54d1      	strb	r1, [r2, r3]
		pwm_period[tag_i] = DevParamRead.UltraParam.PlusePeriod[tag_i];
 8003bfe:	79fb      	ldrb	r3, [r7, #7]
 8003c00:	4a26      	ldr	r2, [pc, #152]	@ (8003c9c <DevPwmFunc_Init+0xc0>)
 8003c02:	3310      	adds	r3, #16
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	88da      	ldrh	r2, [r3, #6]
 8003c0a:	79fb      	ldrb	r3, [r7, #7]
 8003c0c:	4611      	mov	r1, r2
 8003c0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <DevPwmFunc_Init+0xc8>)
 8003c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	4a23      	ldr	r2, [pc, #140]	@ (8003ca4 <DevPwmFunc_Init+0xc8>)
 8003c18:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c1c:	79fb      	ldrb	r3, [r7, #7]
 8003c1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ca0 <DevPwmFunc_Init+0xc4>)
 8003c20:	5cd2      	ldrb	r2, [r2, r3]
 8003c22:	79fc      	ldrb	r4, [r7, #7]
 8003c24:	79fb      	ldrb	r3, [r7, #7]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f924 	bl	8003e74 <DevPwm_SetPulseFreq>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <DevPwmFunc_Init+0xcc>)
 8003c30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pwm_duty_old[tag_i] = pwm_duty[tag_i];
 8003c34:	79fa      	ldrb	r2, [r7, #7]
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	4919      	ldr	r1, [pc, #100]	@ (8003ca0 <DevPwmFunc_Init+0xc4>)
 8003c3a:	5c89      	ldrb	r1, [r1, r2]
 8003c3c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cac <DevPwmFunc_Init+0xd0>)
 8003c3e:	54d1      	strb	r1, [r2, r3]
		pwm_period_old[tag_i] = pwm_period[tag_i];
 8003c40:	79fa      	ldrb	r2, [r7, #7]
 8003c42:	79fb      	ldrb	r3, [r7, #7]
 8003c44:	4917      	ldr	r1, [pc, #92]	@ (8003ca4 <DevPwmFunc_Init+0xc8>)
 8003c46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003c4a:	4919      	ldr	r1, [pc, #100]	@ (8003cb0 <DevPwmFunc_Init+0xd4>)
 8003c4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	3301      	adds	r3, #1
 8003c54:	71fb      	strb	r3, [r7, #7]
 8003c56:	79fb      	ldrb	r3, [r7, #7]
 8003c58:	2b07      	cmp	r3, #7
 8003c5a:	d9c9      	bls.n	8003bf0 <DevPwmFunc_Init+0x14>
	}

	motor_level = DevParamRead.UltraParam.Vibra_Param;
 8003c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c9c <DevPwmFunc_Init+0xc0>)
 8003c5e:	8b9b      	ldrh	r3, [r3, #28]
 8003c60:	71bb      	strb	r3, [r7, #6]
	MotorLevel = motor_level;
 8003c62:	4a14      	ldr	r2, [pc, #80]	@ (8003cb4 <DevPwmFunc_Init+0xd8>)
 8003c64:	79bb      	ldrb	r3, [r7, #6]
 8003c66:	7013      	strb	r3, [r2, #0]

	HAL_TIM_Base_Start(FAN_HANDLE);
 8003c68:	4813      	ldr	r0, [pc, #76]	@ (8003cb8 <DevPwmFunc_Init+0xdc>)
 8003c6a:	f003 faa5 	bl	80071b8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(FAN_HANDLE, FAN_CHANNEL);
 8003c6e:	2108      	movs	r1, #8
 8003c70:	4811      	ldr	r0, [pc, #68]	@ (8003cb8 <DevPwmFunc_Init+0xdc>)
 8003c72:	f003 fbf3 	bl	800745c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(MOTOR_HANDLE);
 8003c76:	4811      	ldr	r0, [pc, #68]	@ (8003cbc <DevPwmFunc_Init+0xe0>)
 8003c78:	f003 fa9e 	bl	80071b8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(MOTOR_HANDLE, MOTOR_CHANNEL);
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	480f      	ldr	r0, [pc, #60]	@ (8003cbc <DevPwmFunc_Init+0xe0>)
 8003c80:	f003 fbec 	bl	800745c <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,motor_level * MOTOR_STEP);
 8003c84:	79bb      	ldrb	r3, [r7, #6]
 8003c86:	22d8      	movs	r2, #216	@ 0xd8
 8003c88:	fb03 f202 	mul.w	r2, r3, r2
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <DevPwmFunc_Init+0xe0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd90      	pop	{r4, r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	2000061c 	.word	0x2000061c
 8003ca0:	20000718 	.word	0x20000718
 8003ca4:	20000728 	.word	0x20000728
 8003ca8:	20000768 	.word	0x20000768
 8003cac:	20000720 	.word	0x20000720
 8003cb0:	20000748 	.word	0x20000748
 8003cb4:	20000174 	.word	0x20000174
 8003cb8:	2000034c 	.word	0x2000034c
 8003cbc:	20000424 	.word	0x20000424

08003cc0 <DevPwmFunc_Main>:

void DevPwmFunc_Main(void)
{
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	71fb      	strb	r3, [r7, #7]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	71fb      	strb	r3, [r7, #7]
 8003cce:	e036      	b.n	8003d3e <DevPwmFunc_Main+0x7e>
	{
		if(pwm_period_old[tag_i] != pwm_period[tag_i])
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	4a37      	ldr	r2, [pc, #220]	@ (8003db0 <DevPwmFunc_Main+0xf0>)
 8003cd4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003cd8:	79fb      	ldrb	r3, [r7, #7]
 8003cda:	4936      	ldr	r1, [pc, #216]	@ (8003db4 <DevPwmFunc_Main+0xf4>)
 8003cdc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d017      	beq.n	8003d14 <DevPwmFunc_Main+0x54>
		{
			pwm_period_old[tag_i] = pwm_period[tag_i];
 8003ce4:	79fa      	ldrb	r2, [r7, #7]
 8003ce6:	79fb      	ldrb	r3, [r7, #7]
 8003ce8:	4932      	ldr	r1, [pc, #200]	@ (8003db4 <DevPwmFunc_Main+0xf4>)
 8003cea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8003cee:	4930      	ldr	r1, [pc, #192]	@ (8003db0 <DevPwmFunc_Main+0xf0>)
 8003cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 8003cf4:	79fb      	ldrb	r3, [r7, #7]
 8003cf6:	4a2f      	ldr	r2, [pc, #188]	@ (8003db4 <DevPwmFunc_Main+0xf4>)
 8003cf8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	4a2e      	ldr	r2, [pc, #184]	@ (8003db8 <DevPwmFunc_Main+0xf8>)
 8003d00:	5cd2      	ldrb	r2, [r2, r3]
 8003d02:	79fc      	ldrb	r4, [r7, #7]
 8003d04:	79fb      	ldrb	r3, [r7, #7]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f8b4 	bl	8003e74 <DevPwm_SetPulseFreq>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a2b      	ldr	r2, [pc, #172]	@ (8003dbc <DevPwmFunc_Main+0xfc>)
 8003d10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		}

		if(pwm_duty_old[tag_i] != pwm_duty[tag_i])
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc0 <DevPwmFunc_Main+0x100>)
 8003d18:	5cd2      	ldrb	r2, [r2, r3]
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	4926      	ldr	r1, [pc, #152]	@ (8003db8 <DevPwmFunc_Main+0xf8>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d009      	beq.n	8003d38 <DevPwmFunc_Main+0x78>
		{
			pwm_duty_old[tag_i] = pwm_duty[tag_i];
 8003d24:	79fa      	ldrb	r2, [r7, #7]
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	4923      	ldr	r1, [pc, #140]	@ (8003db8 <DevPwmFunc_Main+0xf8>)
 8003d2a:	5c89      	ldrb	r1, [r1, r2]
 8003d2c:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <DevPwmFunc_Main+0x100>)
 8003d2e:	54d1      	strb	r1, [r2, r3]
			DevPwm_SetPulseDuty(tag_i);
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 f854 	bl	8003de0 <DevPwm_SetPulseDuty>
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8003d38:	79fb      	ldrb	r3, [r7, #7]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	71fb      	strb	r3, [r7, #7]
 8003d3e:	79fb      	ldrb	r3, [r7, #7]
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	d9c5      	bls.n	8003cd0 <DevPwmFunc_Main+0x10>
		}else
		{
		}
	}

	if(MotorLevel != DevParamRead.UltraParam.Vibra_Param)
 8003d44:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc4 <DevPwmFunc_Main+0x104>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc8 <DevPwmFunc_Main+0x108>)
 8003d4c:	8b9b      	ldrh	r3, [r3, #28]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d00d      	beq.n	8003d6e <DevPwmFunc_Main+0xae>
	{
		MotorLevel = DevParamRead.UltraParam.Vibra_Param;
 8003d52:	4b1d      	ldr	r3, [pc, #116]	@ (8003dc8 <DevPwmFunc_Main+0x108>)
 8003d54:	8b9b      	ldrh	r3, [r3, #28]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc4 <DevPwmFunc_Main+0x104>)
 8003d5a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,MotorLevel * MOTOR_STEP);
 8003d5c:	4b19      	ldr	r3, [pc, #100]	@ (8003dc4 <DevPwmFunc_Main+0x104>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	23d8      	movs	r3, #216	@ 0xd8
 8003d64:	fb03 f202 	mul.w	r2, r3, r2
 8003d68:	4b18      	ldr	r3, [pc, #96]	@ (8003dcc <DevPwmFunc_Main+0x10c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(SampleTemp > 45.0f)
 8003d6e:	4b18      	ldr	r3, [pc, #96]	@ (8003dd0 <DevPwmFunc_Main+0x110>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4918      	ldr	r1, [pc, #96]	@ (8003dd4 <DevPwmFunc_Main+0x114>)
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7fd f967 	bl	8001048 <__aeabi_fcmpgt>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <DevPwmFunc_Main+0xcc>
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,FAN_PULSE);
 8003d80:	4b15      	ldr	r3, [pc, #84]	@ (8003dd8 <DevPwmFunc_Main+0x118>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d88:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else if(SampleTemp < 40.0f)
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
	}
}
 8003d8a:	e00d      	b.n	8003da8 <DevPwmFunc_Main+0xe8>
	}else if(SampleTemp < 40.0f)
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <DevPwmFunc_Main+0x110>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4912      	ldr	r1, [pc, #72]	@ (8003ddc <DevPwmFunc_Main+0x11c>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd f93a 	bl	800100c <__aeabi_fcmplt>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d100      	bne.n	8003da0 <DevPwmFunc_Main+0xe0>
}
 8003d9e:	e003      	b.n	8003da8 <DevPwmFunc_Main+0xe8>
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
 8003da0:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <DevPwmFunc_Main+0x118>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2200      	movs	r2, #0
 8003da6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd90      	pop	{r4, r7, pc}
 8003db0:	20000748 	.word	0x20000748
 8003db4:	20000728 	.word	0x20000728
 8003db8:	20000718 	.word	0x20000718
 8003dbc:	20000768 	.word	0x20000768
 8003dc0:	20000720 	.word	0x20000720
 8003dc4:	20000174 	.word	0x20000174
 8003dc8:	2000061c 	.word	0x2000061c
 8003dcc:	20000424 	.word	0x20000424
 8003dd0:	20000700 	.word	0x20000700
 8003dd4:	42340000 	.word	0x42340000
 8003dd8:	2000034c 	.word	0x2000034c
 8003ddc:	42200000 	.word	0x42200000

08003de0 <DevPwm_SetPulseDuty>:

static void DevPwm_SetPulseDuty(uint8_t ch)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
	uint32_t channel;
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <DevPwm_SetPulseDuty+0x84>)
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	4413      	add	r3, r2
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	613b      	str	r3, [r7, #16]
	p_handle = dev_ultra_handle[ch].Handle;
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	@ (8003e64 <DevPwm_SetPulseDuty+0x84>)
 8003dfe:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e02:	60fb      	str	r3, [r7, #12]

	pulse = pwm_duty[ch] * pwm_pluse[ch] / 100;
 8003e04:	79fb      	ldrb	r3, [r7, #7]
 8003e06:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <DevPwm_SetPulseDuty+0x88>)
 8003e08:	5cd3      	ldrb	r3, [r2, r3]
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <DevPwm_SetPulseDuty+0x8c>)
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4a15      	ldr	r2, [pc, #84]	@ (8003e70 <DevPwm_SetPulseDuty+0x90>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <DevPwm_SetPulseDuty+0x52>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003e30:	e013      	b.n	8003e5a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d104      	bne.n	8003e42 <DevPwm_SetPulseDuty+0x62>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003e40:	e00b      	b.n	8003e5a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b08      	cmp	r3, #8
 8003e46:	d104      	bne.n	8003e52 <DevPwm_SetPulseDuty+0x72>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003e50:	e003      	b.n	8003e5a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	08009a58 	.word	0x08009a58
 8003e68:	20000718 	.word	0x20000718
 8003e6c:	20000768 	.word	0x20000768
 8003e70:	51eb851f 	.word	0x51eb851f

08003e74 <DevPwm_SetPulseFreq>:
 * @param	dutycycle:脉冲占空比
 * @retval	none
 * @func	调节脉冲时间和占空比
 */
static uint32_t DevPwm_SetPulseFreq(uint8_t ch,uint32_t pulsetime,uint8_t duty)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
 8003e80:	4613      	mov	r3, r2
 8003e82:	71bb      	strb	r3, [r7, #6]
	uint32_t input_freq = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
	uint32_t out_prescaler_value = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
	uint32_t out_count_value = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
	uint32_t channel;
	uint32_t pluse = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	613b      	str	r3, [r7, #16]
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 8003e94:	79fb      	ldrb	r3, [r7, #7]
 8003e96:	4a3f      	ldr	r2, [pc, #252]	@ (8003f94 <DevPwm_SetPulseFreq+0x120>)
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4413      	add	r3, r2
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	60fb      	str	r3, [r7, #12]
	p_handle = dev_ultra_handle[ch].Handle;
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	4a3c      	ldr	r2, [pc, #240]	@ (8003f94 <DevPwm_SetPulseFreq+0x120>)
 8003ea4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003ea8:	60bb      	str	r3, [r7, #8]

	input_freq = 10000 / pulsetime;
 8003eaa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]

	if((input_freq > MAX_OUTPUT_FREQ) || (input_freq < MIN_OUTPUT_FREQ))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d802      	bhi.n	8003ec6 <DevPwm_SetPulseFreq+0x52>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d801      	bhi.n	8003eca <DevPwm_SetPulseFreq+0x56>
	{
		return 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e060      	b.n	8003f8c <DevPwm_SetPulseFreq+0x118>
	}

	if((input_freq >= 20) && (input_freq <= 10000))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2b13      	cmp	r3, #19
 8003ece:	d90d      	bls.n	8003eec <DevPwm_SetPulseFreq+0x78>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d808      	bhi.n	8003eec <DevPwm_SetPulseFreq+0x78>
	{
		out_prescaler_value = 720-1;
 8003eda:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8003ede:	61fb      	str	r3, [r7, #28]
		out_count_value = 1000000 / input_freq;
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f98 <DevPwm_SetPulseFreq+0x124>)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e010      	b.n	8003f0e <DevPwm_SetPulseFreq+0x9a>
	}else if((input_freq >= 2) && (input_freq < 20))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d90b      	bls.n	8003f0a <DevPwm_SetPulseFreq+0x96>
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b13      	cmp	r3, #19
 8003ef6:	d808      	bhi.n	8003f0a <DevPwm_SetPulseFreq+0x96>
	{
		out_prescaler_value = 7200-1;
 8003ef8:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 8003efc:	61fb      	str	r3, [r7, #28]
		out_count_value = 100000 / input_freq;
 8003efe:	4a27      	ldr	r2, [pc, #156]	@ (8003f9c <DevPwm_SetPulseFreq+0x128>)
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	e001      	b.n	8003f0e <DevPwm_SetPulseFreq+0x9a>
	}else
	{
		return 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e03e      	b.n	8003f8c <DevPwm_SetPulseFreq+0x118>
	}

	// 停止定时器
	HAL_TIM_PWM_Stop(p_handle, channel);
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	68b8      	ldr	r0, [r7, #8]
 8003f12:	f003 fb6b 	bl	80075ec <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(p_handle);
 8003f16:	68b8      	ldr	r0, [r7, #8]
 8003f18:	f003 f9b4 	bl	8007284 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_PRESCALER(p_handle, out_prescaler_value);
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SetAutoreload(p_handle, out_count_value);
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	60da      	str	r2, [r3, #12]

	pluse = out_count_value * duty / 100;
 8003f32:	79bb      	ldrb	r3, [r7, #6]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	fb02 f303 	mul.w	r3, r2, r3
 8003f3a:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <DevPwm_SetPulseFreq+0x12c>)
 8003f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SetCompare(p_handle, channel, pluse); // 假设使用通道1	//PWM_Ultra_B
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d104      	bne.n	8003f54 <DevPwm_SetPulseFreq+0xe0>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f52:	e013      	b.n	8003f7c <DevPwm_SetPulseFreq+0x108>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d104      	bne.n	8003f64 <DevPwm_SetPulseFreq+0xf0>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	6393      	str	r3, [r2, #56]	@ 0x38
 8003f62:	e00b      	b.n	8003f7c <DevPwm_SetPulseFreq+0x108>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d104      	bne.n	8003f74 <DevPwm_SetPulseFreq+0x100>
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003f72:	e003      	b.n	8003f7c <DevPwm_SetPulseFreq+0x108>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6413      	str	r3, [r2, #64]	@ 0x40

    // 更新并启动定时器
	HAL_TIM_Base_Start(p_handle);
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f003 f91b 	bl	80071b8 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(p_handle, channel);
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	68b8      	ldr	r0, [r7, #8]
 8003f86:	f003 fa69 	bl	800745c <HAL_TIM_PWM_Start>

    return out_count_value;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3720      	adds	r7, #32
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	08009a58 	.word	0x08009a58
 8003f98:	000f4240 	.word	0x000f4240
 8003f9c:	000186a0 	.word	0x000186a0
 8003fa0:	51eb851f 	.word	0x51eb851f

08003fa4 <DevScreen_StartorStop>:
	[DevScreenCmd_SetUltraModule] = DevScreen_SetUltraModule,
	[DevScreenCmd_SetUltraPower] = DevScreen_SetPowerLevel,
};

static void DevScreen_StartorStop(uint8_t *buff)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	WorkSta = (buff[0] == 0) ? DEVWORKSTOP : DEVWORKSTART;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <DevScreen_StartorStop+0x2c>)
 8003fbe:	701a      	strb	r2, [r3, #0]
	UltraWorkTime = 0;
 8003fc0:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <DevScreen_StartorStop+0x30>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	20000614 	.word	0x20000614
 8003fd4:	20000618 	.word	0x20000618

08003fd8 <DevScreen_SetUltraFreq>:

static void DevScreen_SetUltraFreq(uint8_t *buff)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	72fb      	strb	r3, [r7, #11]
	uint16_t freq_param_temp = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	81bb      	strh	r3, [r7, #12]

	DevParamRead.UltraParam.UltraParamChangeFlg[0] = 0xdddd;
 8003fec:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <DevScreen_SetUltraFreq+0xfc>)
 8003fee:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8003ff2:	809a      	strh	r2, [r3, #4]
	DevParamRead.UltraParam.UltraParamChangeFlg[1] = 0xeeee;
 8003ff4:	4b37      	ldr	r3, [pc, #220]	@ (80040d4 <DevScreen_SetUltraFreq+0xfc>)
 8003ff6:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003ffa:	80da      	strh	r2, [r3, #6]
	DevParamRead.UltraParam.UltraParamChangeFlg[2] = 0xffff;
 8003ffc:	4b35      	ldr	r3, [pc, #212]	@ (80040d4 <DevScreen_SetUltraFreq+0xfc>)
 8003ffe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004002:	811a      	strh	r2, [r3, #8]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e05a      	b.n	80040c0 <DevScreen_SetUltraFreq+0xe8>
	{
		if((tag_i % 2) == 0)
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d11c      	bne.n	8004050 <DevScreen_SetUltraFreq+0x78>
		{
			temp = tag_i / 2 * 3;
 8004016:	7bfb      	ldrb	r3, [r7, #15]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	0052      	lsls	r2, r2, #1
 8004020:	4413      	add	r3, r2
 8004022:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 8004024:	7afb      	ldrb	r3, [r7, #11]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b21b      	sxth	r3, r3
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	b21a      	sxth	r2, r3
 8004032:	7afb      	ldrb	r3, [r7, #11]
 8004034:	3301      	adds	r3, #1
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	440b      	add	r3, r1
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	b2db      	uxtb	r3, r3
 8004040:	b21b      	sxth	r3, r3
 8004042:	f003 030f 	and.w	r3, r3, #15
 8004046:	b21b      	sxth	r3, r3
 8004048:	4313      	orrs	r3, r2
 800404a:	b21b      	sxth	r3, r3
 800404c:	81bb      	strh	r3, [r7, #12]
 800404e:	e01b      	b.n	8004088 <DevScreen_SetUltraFreq+0xb0>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	0052      	lsls	r2, r2, #1
 800405a:	4413      	add	r3, r2
 800405c:	b2db      	uxtb	r3, r3
 800405e:	3301      	adds	r3, #1
 8004060:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 8004062:	7afb      	ldrb	r3, [r7, #11]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	4413      	add	r3, r2
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	b21b      	sxth	r3, r3
 800406c:	021b      	lsls	r3, r3, #8
 800406e:	b21b      	sxth	r3, r3
 8004070:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004074:	b21a      	sxth	r2, r3
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	3301      	adds	r3, #1
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	440b      	add	r3, r1
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	b21b      	sxth	r3, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	b21b      	sxth	r3, r3
 8004086:	81bb      	strh	r3, [r7, #12]
		}

		if(freq_param_temp != 0)
 8004088:	89bb      	ldrh	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <DevScreen_SetUltraFreq+0xe2>
		{
			FlashSaveFlg = (DevParamRead.UltraParam.Freq_Param[tag_i] != freq_param_temp) ? 1 : FlashSaveFlg;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
 8004090:	4a10      	ldr	r2, [pc, #64]	@ (80040d4 <DevScreen_SetUltraFreq+0xfc>)
 8004092:	3304      	adds	r3, #4
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	885b      	ldrh	r3, [r3, #2]
 800409a:	89ba      	ldrh	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d102      	bne.n	80040a6 <DevScreen_SetUltraFreq+0xce>
 80040a0:	4b0d      	ldr	r3, [pc, #52]	@ (80040d8 <DevScreen_SetUltraFreq+0x100>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	e000      	b.n	80040a8 <DevScreen_SetUltraFreq+0xd0>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4a0b      	ldr	r2, [pc, #44]	@ (80040d8 <DevScreen_SetUltraFreq+0x100>)
 80040aa:	7013      	strb	r3, [r2, #0]
			DevParamRead.UltraParam.Freq_Param[tag_i] = freq_param_temp;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
 80040ae:	4a09      	ldr	r2, [pc, #36]	@ (80040d4 <DevScreen_SetUltraFreq+0xfc>)
 80040b0:	3304      	adds	r3, #4
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	89ba      	ldrh	r2, [r7, #12]
 80040b8:	805a      	strh	r2, [r3, #2]
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	3301      	adds	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	2b07      	cmp	r3, #7
 80040c4:	d9a1      	bls.n	800400a <DevScreen_SetUltraFreq+0x32>
		}
	}
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	2000061c 	.word	0x2000061c
 80040d8:	20000712 	.word	0x20000712

080040dc <DevScreen_SetUltraVibra>:

static void DevScreen_SetUltraVibra(uint8_t *buff)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 80040e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004124 <DevScreen_SetUltraVibra+0x48>)
 80040e6:	8b5b      	ldrh	r3, [r3, #26]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d106      	bne.n	80040fe <DevScreen_SetUltraVibra+0x22>
	   (DevParamRead.UltraParam.Vibra_Param != (uint16_t)buff[1]))
 80040f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004124 <DevScreen_SetUltraVibra+0x48>)
 80040f2:	8b9b      	ldrh	r3, [r3, #28]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	3201      	adds	r2, #1
 80040f8:	7812      	ldrb	r2, [r2, #0]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <DevScreen_SetUltraVibra+0x3e>
	{
		FlashSaveFlg = 1;
 80040fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <DevScreen_SetUltraVibra+0x4c>)
 8004100:	2201      	movs	r2, #1
 8004102:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.VibraEnableFlg = (uint16_t)buff[0];
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	4b06      	ldr	r3, [pc, #24]	@ (8004124 <DevScreen_SetUltraVibra+0x48>)
 800410c:	835a      	strh	r2, [r3, #26]
		DevParamRead.UltraParam.Vibra_Param = (uint16_t)buff[1];
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3301      	adds	r3, #1
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b03      	ldr	r3, [pc, #12]	@ (8004124 <DevScreen_SetUltraVibra+0x48>)
 8004118:	839a      	strh	r2, [r3, #28]
	}
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr
 8004124:	2000061c 	.word	0x2000061c
 8004128:	20000712 	.word	0x20000712

0800412c <DevScreen_SetUltraDuty>:

static void DevScreen_SetUltraDuty(uint8_t *buff)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	uint8_t tag_i;
	uint8_t pluse_duty_temp = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	73bb      	strb	r3, [r7, #14]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]
 800413c:	e028      	b.n	8004190 <DevScreen_SetUltraDuty+0x64>
	{
		pluse_duty_temp = buff[tag_i];
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	73bb      	strb	r3, [r7, #14]

		if(pluse_duty_temp != DevParamRead.UltraParam.PluseDuty[tag_i])
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <DevScreen_SetUltraDuty+0x74>)
 800414c:	4413      	add	r3, r2
 800414e:	7f9b      	ldrb	r3, [r3, #30]
 8004150:	7bba      	ldrb	r2, [r7, #14]
 8004152:	429a      	cmp	r2, r3
 8004154:	d019      	beq.n	800418a <DevScreen_SetUltraDuty+0x5e>
		{
			FlashSaveFlg = 1;
 8004156:	4b13      	ldr	r3, [pc, #76]	@ (80041a4 <DevScreen_SetUltraDuty+0x78>)
 8004158:	2201      	movs	r2, #1
 800415a:	701a      	strb	r2, [r3, #0]
			if(pluse_duty_temp == 100)
 800415c:	7bbb      	ldrb	r3, [r7, #14]
 800415e:	2b64      	cmp	r3, #100	@ 0x64
 8004160:	d105      	bne.n	800416e <DevScreen_SetUltraDuty+0x42>
			{
				DevParamRead.UltraParam.PluseDuty[tag_i] = 101;
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	4a0e      	ldr	r2, [pc, #56]	@ (80041a0 <DevScreen_SetUltraDuty+0x74>)
 8004166:	4413      	add	r3, r2
 8004168:	2265      	movs	r2, #101	@ 0x65
 800416a:	779a      	strb	r2, [r3, #30]
 800416c:	e004      	b.n	8004178 <DevScreen_SetUltraDuty+0x4c>
			}else
			{
				DevParamRead.UltraParam.PluseDuty[tag_i] = pluse_duty_temp;
 800416e:	7bfb      	ldrb	r3, [r7, #15]
 8004170:	4a0b      	ldr	r2, [pc, #44]	@ (80041a0 <DevScreen_SetUltraDuty+0x74>)
 8004172:	4413      	add	r3, r2
 8004174:	7bba      	ldrb	r2, [r7, #14]
 8004176:	779a      	strb	r2, [r3, #30]
			}
			DevPwm_LoadDuty(tag_i,DevParamRead.UltraParam.PluseDuty[tag_i]);
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	4a09      	ldr	r2, [pc, #36]	@ (80041a0 <DevScreen_SetUltraDuty+0x74>)
 800417c:	4413      	add	r3, r2
 800417e:	7f9a      	ldrb	r2, [r3, #30]
 8004180:	7bfb      	ldrb	r3, [r7, #15]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fcfb 	bl	8003b80 <DevPwm_LoadDuty>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	3301      	adds	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	7bfb      	ldrb	r3, [r7, #15]
 8004192:	2b07      	cmp	r3, #7
 8004194:	d9d3      	bls.n	800413e <DevScreen_SetUltraDuty+0x12>
		}
	}
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	2000061c 	.word	0x2000061c
 80041a4:	20000712 	.word	0x20000712

080041a8 <DevScreen_SetUltraPeriod>:

static void DevScreen_SetUltraPeriod(uint8_t *buff)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	72fb      	strb	r3, [r7, #11]
	uint16_t period_temp = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	81bb      	strh	r3, [r7, #12]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e05b      	b.n	800427a <DevScreen_SetUltraPeriod+0xd2>
	{
		if((tag_i % 2) == 0)
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d11c      	bne.n	8004208 <DevScreen_SetUltraPeriod+0x60>
		{
			temp = tag_i / 2 * 3;
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	0052      	lsls	r2, r2, #1
 80041d8:	4413      	add	r3, r2
 80041da:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 80041dc:	7afb      	ldrb	r3, [r7, #11]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	b21b      	sxth	r3, r3
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	b21a      	sxth	r2, r3
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	3301      	adds	r3, #1
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	440b      	add	r3, r1
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	091b      	lsrs	r3, r3, #4
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	b21b      	sxth	r3, r3
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	b21b      	sxth	r3, r3
 8004200:	4313      	orrs	r3, r2
 8004202:	b21b      	sxth	r3, r3
 8004204:	81bb      	strh	r3, [r7, #12]
 8004206:	e01b      	b.n	8004240 <DevScreen_SetUltraPeriod+0x98>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	0052      	lsls	r2, r2, #1
 8004212:	4413      	add	r3, r2
 8004214:	b2db      	uxtb	r3, r3
 8004216:	3301      	adds	r3, #1
 8004218:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 800421a:	7afb      	ldrb	r3, [r7, #11]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	4413      	add	r3, r2
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	b21b      	sxth	r3, r3
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	b21b      	sxth	r3, r3
 8004228:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800422c:	b21a      	sxth	r2, r3
 800422e:	7afb      	ldrb	r3, [r7, #11]
 8004230:	3301      	adds	r3, #1
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	440b      	add	r3, r1
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b21b      	sxth	r3, r3
 800423a:	4313      	orrs	r3, r2
 800423c:	b21b      	sxth	r3, r3
 800423e:	81bb      	strh	r3, [r7, #12]
		}

		if(DevParamRead.UltraParam.PlusePeriod[tag_i] != period_temp)
 8004240:	7bfb      	ldrb	r3, [r7, #15]
 8004242:	4a12      	ldr	r2, [pc, #72]	@ (800428c <DevScreen_SetUltraPeriod+0xe4>)
 8004244:	3310      	adds	r3, #16
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	88db      	ldrh	r3, [r3, #6]
 800424c:	89ba      	ldrh	r2, [r7, #12]
 800424e:	429a      	cmp	r2, r3
 8004250:	d010      	beq.n	8004274 <DevScreen_SetUltraPeriod+0xcc>
		{
			FlashSaveFlg = 1;
 8004252:	4b0f      	ldr	r3, [pc, #60]	@ (8004290 <DevScreen_SetUltraPeriod+0xe8>)
 8004254:	2201      	movs	r2, #1
 8004256:	701a      	strb	r2, [r3, #0]
			DevParamRead.UltraParam.PlusePeriod[tag_i] = period_temp;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	4a0c      	ldr	r2, [pc, #48]	@ (800428c <DevScreen_SetUltraPeriod+0xe4>)
 800425c:	3310      	adds	r3, #16
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	89ba      	ldrh	r2, [r7, #12]
 8004264:	80da      	strh	r2, [r3, #6]
			DevPwm_LoadPeriod(tag_i,period_temp);
 8004266:	89bb      	ldrh	r3, [r7, #12]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fc9c 	bl	8003bac <DevPwm_LoadPeriod>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	3301      	adds	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b07      	cmp	r3, #7
 800427e:	d9a0      	bls.n	80041c2 <DevScreen_SetUltraPeriod+0x1a>
		}
	}
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	2000061c 	.word	0x2000061c
 8004290:	20000712 	.word	0x20000712

08004294 <DevScreen_SetUltraWork>:

static void DevScreen_SetUltraWork(uint8_t *buff)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	uint16_t stimu_temp = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	81fb      	strh	r3, [r7, #14]
	uint16_t idle_temp = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	81bb      	strh	r3, [r7, #12]

	stimu_temp = ((uint16_t)buff[0] << 8) | buff[1];
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	b21a      	sxth	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3301      	adds	r3, #1
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b21b      	sxth	r3, r3
 80042b6:	4313      	orrs	r3, r2
 80042b8:	b21b      	sxth	r3, r3
 80042ba:	81fb      	strh	r3, [r7, #14]
	idle_temp = ((uint16_t)buff[2] << 8) | buff[3];
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3302      	adds	r3, #2
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b21b      	sxth	r3, r3
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	b21a      	sxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3303      	adds	r3, #3
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b21b      	sxth	r3, r3
 80042d0:	4313      	orrs	r3, r2
 80042d2:	b21b      	sxth	r3, r3
 80042d4:	81bb      	strh	r3, [r7, #12]
	if((DevParamRead.UltraParam.StimuTime != stimu_temp) || (idle_temp != DevParamRead.UltraParam.IdleTime))
 80042d6:	4b0c      	ldr	r3, [pc, #48]	@ (8004308 <DevScreen_SetUltraWork+0x74>)
 80042d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042da:	89fa      	ldrh	r2, [r7, #14]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <DevScreen_SetUltraWork+0x56>
 80042e0:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <DevScreen_SetUltraWork+0x74>)
 80042e2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80042e4:	89ba      	ldrh	r2, [r7, #12]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d008      	beq.n	80042fc <DevScreen_SetUltraWork+0x68>
	{
		FlashSaveFlg = 1;
 80042ea:	4b08      	ldr	r3, [pc, #32]	@ (800430c <DevScreen_SetUltraWork+0x78>)
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.StimuTime = stimu_temp;
 80042f0:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <DevScreen_SetUltraWork+0x74>)
 80042f2:	89fb      	ldrh	r3, [r7, #14]
 80042f4:	86d3      	strh	r3, [r2, #54]	@ 0x36
		DevParamRead.UltraParam.IdleTime = idle_temp;
 80042f6:	4a04      	ldr	r2, [pc, #16]	@ (8004308 <DevScreen_SetUltraWork+0x74>)
 80042f8:	89bb      	ldrh	r3, [r7, #12]
 80042fa:	8713      	strh	r3, [r2, #56]	@ 0x38
	}
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	bc80      	pop	{r7}
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2000061c 	.word	0x2000061c
 800430c:	20000712 	.word	0x20000712

08004310 <DevScreen_SetUltraChEn>:

static void DevScreen_SetUltraChEn(uint8_t *buff)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	73fb      	strb	r3, [r7, #15]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
 8004320:	e01a      	b.n	8004358 <DevScreen_SetUltraChEn+0x48>
	{
		if(DevParamRead.UltraParam.UltraEn[tag_i] != buff[tag_i])
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	4a11      	ldr	r2, [pc, #68]	@ (800436c <DevScreen_SetUltraChEn+0x5c>)
 8004326:	4413      	add	r3, r2
 8004328:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800432c:	7bfb      	ldrb	r3, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	440b      	add	r3, r1
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d00c      	beq.n	8004352 <DevScreen_SetUltraChEn+0x42>
		{
			FlashSaveFlg = 1;
 8004338:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <DevScreen_SetUltraChEn+0x60>)
 800433a:	2201      	movs	r2, #1
 800433c:	701a      	strb	r2, [r3, #0]
			DevParamRead.UltraParam.UltraEn[tag_i] = buff[tag_i];
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	441a      	add	r2, r3
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	7811      	ldrb	r1, [r2, #0]
 8004348:	4a08      	ldr	r2, [pc, #32]	@ (800436c <DevScreen_SetUltraChEn+0x5c>)
 800434a:	4413      	add	r3, r2
 800434c:	460a      	mov	r2, r1
 800434e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	3301      	adds	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b07      	cmp	r3, #7
 800435c:	d9e1      	bls.n	8004322 <DevScreen_SetUltraChEn+0x12>
		}
	}
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	3714      	adds	r7, #20
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	2000061c 	.word	0x2000061c
 8004370:	20000712 	.word	0x20000712

08004374 <DevScreen_SetUltraModule>:

static void DevScreen_SetUltraModule(uint8_t * buff)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	if(DevParamRead.UltraParam.UltraWorkModule == buff[0])
 800437c:	4b0d      	ldr	r3, [pc, #52]	@ (80043b4 <DevScreen_SetUltraModule+0x40>)
 800437e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	4293      	cmp	r3, r2
 8004388:	d10e      	bne.n	80043a8 <DevScreen_SetUltraModule+0x34>
	{
		FlashSaveFlg = 1;
 800438a:	4b0b      	ldr	r3, [pc, #44]	@ (80043b8 <DevScreen_SetUltraModule+0x44>)
 800438c:	2201      	movs	r2, #1
 800438e:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.UltraWorkModule = (buff[0] == 0) ? 2 : buff[0];
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <DevScreen_SetUltraModule+0x2c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	e000      	b.n	80043a2 <DevScreen_SetUltraModule+0x2e>
 80043a0:	2202      	movs	r2, #2
 80043a2:	4b04      	ldr	r3, [pc, #16]	@ (80043b4 <DevScreen_SetUltraModule+0x40>)
 80043a4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}

}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bc80      	pop	{r7}
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	2000061c 	.word	0x2000061c
 80043b8:	20000712 	.word	0x20000712

080043bc <DevScreen_SetPowerLevel>:

static void DevScreen_SetPowerLevel(uint8_t * buff)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	if(DevParamRead.UltraParam.UltraPowerLevel != buff[0])
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <DevScreen_SetPowerLevel+0x4c>)
 80043c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d015      	beq.n	80043fe <DevScreen_SetPowerLevel+0x42>
	{
		FlashSaveFlg = 1;
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <DevScreen_SetPowerLevel+0x50>)
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.UltraPowerLevel = (buff[0] > 5) ? 0 : buff[0];
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b05      	cmp	r3, #5
 80043de:	d803      	bhi.n	80043e8 <DevScreen_SetPowerLevel+0x2c>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	e000      	b.n	80043ea <DevScreen_SetPowerLevel+0x2e>
 80043e8:	2200      	movs	r2, #0
 80043ea:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <DevScreen_SetPowerLevel+0x4c>)
 80043ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

		DevAD5160_ValueLoad(DevParamRead.UltraParam.UltraPowerLevel);
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <DevScreen_SetPowerLevel+0x4c>)
 80043f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7fe fc93 	bl	8002d24 <DevAD5160_ValueLoad>
	}
}
 80043fe:	bf00      	nop
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	2000061c 	.word	0x2000061c
 800440c:	20000712 	.word	0x20000712

08004410 <DevUart_Init>:

void DevUart_Init(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
	 HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
 8004414:	4b08      	ldr	r3, [pc, #32]	@ (8004438 <DevUart_Init+0x28>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2240      	movs	r2, #64	@ 0x40
 800441a:	4619      	mov	r1, r3
 800441c:	4807      	ldr	r0, [pc, #28]	@ (800443c <DevUart_Init+0x2c>)
 800441e:	f004 f8a1 	bl	8008564 <HAL_UART_Receive_DMA>
	 __HAL_UART_ENABLE_IT(DEV_SCREEN_UART_HANDLE,UART_IT_IDLE);
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <DevUart_Init+0x2c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	4b04      	ldr	r3, [pc, #16]	@ (800443c <DevUart_Init+0x2c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0210 	orr.w	r2, r2, #16
 8004430:	60da      	str	r2, [r3, #12]
}
 8004432:	bf00      	nop
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000178 	.word	0x20000178
 800443c:	20000544 	.word	0x20000544

08004440 <HAL_UART_IdleCallback>:

void HAL_UART_IdleCallback(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
	uint8_t cmd_id = 0;
 8004448:	2300      	movs	r3, #0
 800444a:	73fb      	strb	r3, [r7, #15]
	if((huart->Instance == USART3) && (RESET != __HAL_UART_GET_FLAG(DEV_SCREEN_UART_HANDLE,UART_FLAG_IDLE)))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a2e      	ldr	r2, [pc, #184]	@ (800450c <HAL_UART_IdleCallback+0xcc>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d155      	bne.n	8004502 <HAL_UART_IdleCallback+0xc2>
 8004456:	4b2e      	ldr	r3, [pc, #184]	@ (8004510 <HAL_UART_IdleCallback+0xd0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0310 	and.w	r3, r3, #16
 8004460:	2b10      	cmp	r3, #16
 8004462:	d14e      	bne.n	8004502 <HAL_UART_IdleCallback+0xc2>
	{
		HAL_UART_DMAStop(DEV_SCREEN_UART_HANDLE);
 8004464:	482a      	ldr	r0, [pc, #168]	@ (8004510 <HAL_UART_IdleCallback+0xd0>)
 8004466:	f004 f8a2 	bl	80085ae <HAL_UART_DMAStop>
		uint8_t *temp_buff = passive_buff;
 800446a:	4b2a      	ldr	r3, [pc, #168]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60bb      	str	r3, [r7, #8]
		passive_buff = active_buff;
 8004470:	4b29      	ldr	r3, [pc, #164]	@ (8004518 <HAL_UART_IdleCallback+0xd8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a27      	ldr	r2, [pc, #156]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 8004476:	6013      	str	r3, [r2, #0]
		active_buff = temp_buff;
 8004478:	4a27      	ldr	r2, [pc, #156]	@ (8004518 <HAL_UART_IdleCallback+0xd8>)
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	6013      	str	r3, [r2, #0]

		if((passive_buff[0] == 0xEE) &&
 800447e:	4b25      	ldr	r3, [pc, #148]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	2bee      	cmp	r3, #238	@ 0xee
 8004486:	d132      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		   (passive_buff[1] == 0xB5) &&
 8004488:	4b22      	ldr	r3, [pc, #136]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3301      	adds	r3, #1
 800448e:	781b      	ldrb	r3, [r3, #0]
		if((passive_buff[0] == 0xEE) &&
 8004490:	2bb5      	cmp	r3, #181	@ 0xb5
 8004492:	d12c      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		   (passive_buff[15] == 0xFF) &&
 8004494:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	330f      	adds	r3, #15
 800449a:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[1] == 0xB5) &&
 800449c:	2bff      	cmp	r3, #255	@ 0xff
 800449e:	d126      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		   (passive_buff[16] == 0xFC) &&
 80044a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3310      	adds	r3, #16
 80044a6:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[15] == 0xFF) &&
 80044a8:	2bfc      	cmp	r3, #252	@ 0xfc
 80044aa:	d120      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		   (passive_buff[17] == 0xFF) &&
 80044ac:	4b19      	ldr	r3, [pc, #100]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3311      	adds	r3, #17
 80044b2:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[16] == 0xFC) &&
 80044b4:	2bff      	cmp	r3, #255	@ 0xff
 80044b6:	d11a      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		   (passive_buff[18] == 0xFF))
 80044b8:	4b16      	ldr	r3, [pc, #88]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3312      	adds	r3, #18
 80044be:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[17] == 0xFF) &&
 80044c0:	2bff      	cmp	r3, #255	@ 0xff
 80044c2:	d114      	bne.n	80044ee <HAL_UART_IdleCallback+0xae>
		{
			cmd_id = passive_buff[2] - 0xB0;
 80044c4:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3302      	adds	r3, #2
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	3350      	adds	r3, #80	@ 0x50
 80044ce:	73fb      	strb	r3, [r7, #15]
			if((cmd_id >= DevScreenCmd_WorkStart) && (cmd_id < DevScreenCmdMax))
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00b      	beq.n	80044ee <HAL_UART_IdleCallback+0xae>
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b09      	cmp	r3, #9
 80044da:	d808      	bhi.n	80044ee <HAL_UART_IdleCallback+0xae>
			{
				dev_screen_cmd[cmd_id](&passive_buff[3]);
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	4a0f      	ldr	r2, [pc, #60]	@ (800451c <HAL_UART_IdleCallback+0xdc>)
 80044e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004514 <HAL_UART_IdleCallback+0xd4>)
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	3203      	adds	r2, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4798      	blx	r3
			}
		}
		HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_UART_IdleCallback+0xd8>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2240      	movs	r2, #64	@ 0x40
 80044f4:	4619      	mov	r1, r3
 80044f6:	4806      	ldr	r0, [pc, #24]	@ (8004510 <HAL_UART_IdleCallback+0xd0>)
 80044f8:	f004 f834 	bl	8008564 <HAL_UART_Receive_DMA>

		ParamRefresh = 1;
 80044fc:	4b08      	ldr	r3, [pc, #32]	@ (8004520 <HAL_UART_IdleCallback+0xe0>)
 80044fe:	2201      	movs	r2, #1
 8004500:	701a      	strb	r2, [r3, #0]
	}
}
 8004502:	bf00      	nop
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40004800 	.word	0x40004800
 8004510:	20000544 	.word	0x20000544
 8004514:	2000017c 	.word	0x2000017c
 8004518:	20000178 	.word	0x20000178
 800451c:	08009a98 	.word	0x08009a98
 8004520:	20000615 	.word	0x20000615

08004524 <DevScreenSendData>:

void DevScreenSendData(uint8_t cmd,uint8_t val)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	460a      	mov	r2, r1
 800452e:	71fb      	strb	r3, [r7, #7]
 8004530:	4613      	mov	r3, r2
 8004532:	71bb      	strb	r3, [r7, #6]
	ScreenTxBuff[2] = cmd;
 8004534:	4a07      	ldr	r2, [pc, #28]	@ (8004554 <DevScreenSendData+0x30>)
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	7093      	strb	r3, [r2, #2]
	ScreenTxBuff[3] = val;
 800453a:	4a06      	ldr	r2, [pc, #24]	@ (8004554 <DevScreenSendData+0x30>)
 800453c:	79bb      	ldrb	r3, [r7, #6]
 800453e:	70d3      	strb	r3, [r2, #3]

	HAL_UART_Transmit_DMA(DEV_SCREEN_UART_HANDLE, ScreenTxBuff, sizeof(ScreenTxBuff));
 8004540:	2209      	movs	r2, #9
 8004542:	4904      	ldr	r1, [pc, #16]	@ (8004554 <DevScreenSendData+0x30>)
 8004544:	4804      	ldr	r0, [pc, #16]	@ (8004558 <DevScreenSendData+0x34>)
 8004546:	f003 ff9d 	bl	8008484 <HAL_UART_Transmit_DMA>
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000180 	.word	0x20000180
 8004558:	20000544 	.word	0x20000544

0800455c <DevMotor_StaGet>:

inline uint8_t DevMotor_StaGet(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
	uint8_t motor_sta = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	71fb      	strb	r3, [r7, #7]

	motor_sta = (DevParamRead.UltraParam.VibraEnableFlg == 0xFFFF) ? 1 : (uint8_t)DevParamRead.UltraParam.VibraEnableFlg;
 8004566:	4b09      	ldr	r3, [pc, #36]	@ (800458c <DevMotor_StaGet+0x30>)
 8004568:	8b5b      	ldrh	r3, [r3, #26]
 800456a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800456e:	4293      	cmp	r3, r2
 8004570:	d003      	beq.n	800457a <DevMotor_StaGet+0x1e>
 8004572:	4b06      	ldr	r3, [pc, #24]	@ (800458c <DevMotor_StaGet+0x30>)
 8004574:	8b5b      	ldrh	r3, [r3, #26]
 8004576:	b2db      	uxtb	r3, r3
 8004578:	e000      	b.n	800457c <DevMotor_StaGet+0x20>
 800457a:	2301      	movs	r3, #1
 800457c:	71fb      	strb	r3, [r7, #7]
	return motor_sta;
 800457e:	79fb      	ldrb	r3, [r7, #7]
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	2000061c 	.word	0x2000061c

08004590 <DevWork_StimuTimeGet>:

inline uint16_t DevWork_StimuTimeGet(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
	uint16_t stimu_time = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	80fb      	strh	r3, [r7, #6]
	stimu_time = (DevParamRead.UltraParam.StimuTime == 0xFFFF) ? 1500 : DevParamRead.UltraParam.StimuTime;
 800459a:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <DevWork_StimuTimeGet+0x30>)
 800459c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800459e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d002      	beq.n	80045ac <DevWork_StimuTimeGet+0x1c>
 80045a6:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <DevWork_StimuTimeGet+0x30>)
 80045a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045aa:	e001      	b.n	80045b0 <DevWork_StimuTimeGet+0x20>
 80045ac:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80045b0:	80fb      	strh	r3, [r7, #6]
	return stimu_time;
 80045b2:	88fb      	ldrh	r3, [r7, #6]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000061c 	.word	0x2000061c

080045c4 <DevWork_IdleTimeGet>:

inline uint16_t DevWork_IdleTimeGet(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
	uint16_t idle_time = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	80fb      	strh	r3, [r7, #6]

	idle_time = (DevParamRead.UltraParam.IdleTime == 0xFFFF) ? 2500 : DevParamRead.UltraParam.IdleTime;
 80045ce:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <DevWork_IdleTimeGet+0x30>)
 80045d0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80045d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d002      	beq.n	80045e0 <DevWork_IdleTimeGet+0x1c>
 80045da:	4b06      	ldr	r3, [pc, #24]	@ (80045f4 <DevWork_IdleTimeGet+0x30>)
 80045dc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80045de:	e001      	b.n	80045e4 <DevWork_IdleTimeGet+0x20>
 80045e0:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80045e4:	80fb      	strh	r3, [r7, #6]
	return idle_time;
 80045e6:	88fb      	ldrh	r3, [r7, #6]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	2000061c 	.word	0x2000061c

080045f8 <DevWork_ModuleGet>:

inline uint8_t DevWork_ModuleGet(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
	uint8_t work_module = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	71fb      	strb	r3, [r7, #7]

	work_module = (DevParamRead.UltraParam.UltraWorkModule == 0xFFFF) ? 2 : DevParamRead.UltraParam.UltraWorkModule;
 8004602:	4b0a      	ldr	r3, [pc, #40]	@ (800462c <DevWork_ModuleGet+0x34>)
 8004604:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <DevWork_ModuleGet+0x22>
 8004610:	4b06      	ldr	r3, [pc, #24]	@ (800462c <DevWork_ModuleGet+0x34>)
 8004612:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e000      	b.n	800461c <DevWork_ModuleGet+0x24>
 800461a:	2302      	movs	r3, #2
 800461c:	71fb      	strb	r3, [r7, #7]

	return work_module;
 800461e:	79fb      	ldrb	r3, [r7, #7]
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	bc80      	pop	{r7}
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	2000061c 	.word	0x2000061c

08004630 <DevUltra_StatGet>:

inline uint8_t DevUltra_StatGet(uint8_t ch)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
	uint8_t sta = (DevParamRead.UltraParam.UltraEn[ch] == 0xFF) ? 1 : DevParamRead.UltraParam.UltraEn[ch];
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	4a09      	ldr	r2, [pc, #36]	@ (8004664 <DevUltra_StatGet+0x34>)
 800463e:	4413      	add	r3, r2
 8004640:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004644:	2bff      	cmp	r3, #255	@ 0xff
 8004646:	d005      	beq.n	8004654 <DevUltra_StatGet+0x24>
 8004648:	79fb      	ldrb	r3, [r7, #7]
 800464a:	4a06      	ldr	r2, [pc, #24]	@ (8004664 <DevUltra_StatGet+0x34>)
 800464c:	4413      	add	r3, r2
 800464e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004652:	e000      	b.n	8004656 <DevUltra_StatGet+0x26>
 8004654:	2301      	movs	r3, #1
 8004656:	73fb      	strb	r3, [r7, #15]

	return sta;
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr
 8004664:	2000061c 	.word	0x2000061c

08004668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800466c:	4b08      	ldr	r3, [pc, #32]	@ (8004690 <HAL_Init+0x28>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a07      	ldr	r2, [pc, #28]	@ (8004690 <HAL_Init+0x28>)
 8004672:	f043 0310 	orr.w	r3, r3, #16
 8004676:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004678:	2003      	movs	r0, #3
 800467a:	f000 fdd3 	bl	8005224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800467e:	200f      	movs	r0, #15
 8004680:	f000 f808 	bl	8004694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004684:	f7fc ffbc 	bl	8001600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40022000 	.word	0x40022000

08004694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800469c:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_InitTick+0x54>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <HAL_InitTick+0x58>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	4619      	mov	r1, r3
 80046a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80046aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	4618      	mov	r0, r3
 80046b4:	f000 fdeb 	bl	800528e <HAL_SYSTICK_Config>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e00e      	b.n	80046e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b0f      	cmp	r3, #15
 80046c6:	d80a      	bhi.n	80046de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046c8:	2200      	movs	r2, #0
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	f04f 30ff 	mov.w	r0, #4294967295
 80046d0:	f000 fdb3 	bl	800523a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046d4:	4a06      	ldr	r2, [pc, #24]	@ (80046f0 <HAL_InitTick+0x5c>)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046da:	2300      	movs	r3, #0
 80046dc:	e000      	b.n	80046e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000190 	.word	0x20000190
 80046f0:	2000018c 	.word	0x2000018c

080046f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_IncTick+0x1c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_IncTick+0x20>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4413      	add	r3, r2
 8004704:	4a03      	ldr	r2, [pc, #12]	@ (8004714 <HAL_IncTick+0x20>)
 8004706:	6013      	str	r3, [r2, #0]
}
 8004708:	bf00      	nop
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr
 8004710:	20000190 	.word	0x20000190
 8004714:	20000808 	.word	0x20000808

08004718 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b02      	ldr	r3, [pc, #8]	@ (8004728 <HAL_GetTick+0x10>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	20000808 	.word	0x20000808

0800472c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004734:	f7ff fff0 	bl	8004718 <HAL_GetTick>
 8004738:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004744:	d005      	beq.n	8004752 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <HAL_Delay+0x44>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004752:	bf00      	nop
 8004754:	f7ff ffe0 	bl	8004718 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	429a      	cmp	r2, r3
 8004762:	d8f7      	bhi.n	8004754 <HAL_Delay+0x28>
  {
  }
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000190 	.word	0x20000190

08004774 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e0ce      	b.n	8004934 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fcce 	bl	8001154 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fb11 	bl	8004de0 <ADC_ConversionStop_Disable>
 80047be:	4603      	mov	r3, r0
 80047c0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	f003 0310 	and.w	r3, r3, #16
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f040 80a9 	bne.w	8004922 <HAL_ADC_Init+0x1ae>
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f040 80a5 	bne.w	8004922 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80047e0:	f023 0302 	bic.w	r3, r3, #2
 80047e4:	f043 0202 	orr.w	r2, r3, #2
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4951      	ldr	r1, [pc, #324]	@ (800493c <HAL_ADC_Init+0x1c8>)
 80047f6:	428b      	cmp	r3, r1
 80047f8:	d10a      	bne.n	8004810 <HAL_ADC_Init+0x9c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004802:	d002      	beq.n	800480a <HAL_ADC_Init+0x96>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	e004      	b.n	8004814 <HAL_ADC_Init+0xa0>
 800480a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800480e:	e001      	b.n	8004814 <HAL_ADC_Init+0xa0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004814:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7b1b      	ldrb	r3, [r3, #12]
 800481a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800481c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800482c:	d003      	beq.n	8004836 <HAL_ADC_Init+0xc2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d102      	bne.n	800483c <HAL_ADC_Init+0xc8>
 8004836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800483a:	e000      	b.n	800483e <HAL_ADC_Init+0xca>
 800483c:	2300      	movs	r3, #0
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7d1b      	ldrb	r3, [r3, #20]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d119      	bne.n	8004880 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7b1b      	ldrb	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	3b01      	subs	r3, #1
 800485a:	035a      	lsls	r2, r3, #13
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	4313      	orrs	r3, r2
 8004860:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e00b      	b.n	8004880 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	f043 0220 	orr.w	r2, r3, #32
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004878:	f043 0201 	orr.w	r2, r3, #1
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	430a      	orrs	r2, r1
 8004892:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	4b29      	ldr	r3, [pc, #164]	@ (8004940 <HAL_ADC_Init+0x1cc>)
 800489c:	4013      	ands	r3, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048b0:	d003      	beq.n	80048ba <HAL_ADC_Init+0x146>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d104      	bne.n	80048c4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	3b01      	subs	r3, #1
 80048c0:	051b      	lsls	r3, r3, #20
 80048c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ca:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689a      	ldr	r2, [r3, #8]
 80048de:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <HAL_ADC_Init+0x1d0>)
 80048e0:	4013      	ands	r3, r2
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d10b      	bne.n	8004900 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048fe:	e018      	b.n	8004932 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004904:	f023 0312 	bic.w	r3, r3, #18
 8004908:	f043 0210 	orr.w	r2, r3, #16
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004914:	f043 0201 	orr.w	r2, r3, #1
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004920:	e007      	b.n	8004932 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004932:	7dfb      	ldrb	r3, [r7, #23]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40013c00 	.word	0x40013c00
 8004940:	ffe1f7fd 	.word	0xffe1f7fd
 8004944:	ff1f0efe 	.word	0xff1f0efe

08004948 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a64      	ldr	r2, [pc, #400]	@ (8004af0 <HAL_ADC_Start_DMA+0x1a8>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_ADC_Start_DMA+0x24>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a63      	ldr	r2, [pc, #396]	@ (8004af4 <HAL_ADC_Start_DMA+0x1ac>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d106      	bne.n	800497a <HAL_ADC_Start_DMA+0x32>
 800496c:	4b60      	ldr	r3, [pc, #384]	@ (8004af0 <HAL_ADC_Start_DMA+0x1a8>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 80b3 	bne.w	8004ae0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_ADC_Start_DMA+0x40>
 8004984:	2302      	movs	r3, #2
 8004986:	e0ae      	b.n	8004ae6 <HAL_ADC_Start_DMA+0x19e>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004990:	68f8      	ldr	r0, [r7, #12]
 8004992:	f000 f9cb 	bl	8004d2c <ADC_Enable>
 8004996:	4603      	mov	r3, r0
 8004998:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800499a:	7dfb      	ldrb	r3, [r7, #23]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f040 809a 	bne.w	8004ad6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049aa:	f023 0301 	bic.w	r3, r3, #1
 80049ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a4e      	ldr	r2, [pc, #312]	@ (8004af4 <HAL_ADC_Start_DMA+0x1ac>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d105      	bne.n	80049cc <HAL_ADC_Start_DMA+0x84>
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_ADC_Start_DMA+0x1a8>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d115      	bne.n	80049f8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d026      	beq.n	8004a34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80049ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049f6:	e01d      	b.n	8004a34 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a39      	ldr	r2, [pc, #228]	@ (8004af0 <HAL_ADC_Start_DMA+0x1a8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d004      	beq.n	8004a18 <HAL_ADC_Start_DMA+0xd0>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a38      	ldr	r2, [pc, #224]	@ (8004af4 <HAL_ADC_Start_DMA+0x1ac>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10d      	bne.n	8004a34 <HAL_ADC_Start_DMA+0xec>
 8004a18:	4b35      	ldr	r3, [pc, #212]	@ (8004af0 <HAL_ADC_Start_DMA+0x1a8>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004a2c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a44:	f023 0206 	bic.w	r2, r3, #6
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a4c:	e002      	b.n	8004a54 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4a25      	ldr	r2, [pc, #148]	@ (8004af8 <HAL_ADC_Start_DMA+0x1b0>)
 8004a62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	4a24      	ldr	r2, [pc, #144]	@ (8004afc <HAL_ADC_Start_DMA+0x1b4>)
 8004a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	4a23      	ldr	r2, [pc, #140]	@ (8004b00 <HAL_ADC_Start_DMA+0x1b8>)
 8004a72:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0202 	mvn.w	r2, #2
 8004a7c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689a      	ldr	r2, [r3, #8]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a8c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a18      	ldr	r0, [r3, #32]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	334c      	adds	r3, #76	@ 0x4c
 8004a98:	4619      	mov	r1, r3
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f000 fc79 	bl	8005394 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004aac:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004ac0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004ac2:	e00f      	b.n	8004ae4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689a      	ldr	r2, [r3, #8]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004ad2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004ad4:	e006      	b.n	8004ae4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004ade:	e001      	b.n	8004ae4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	40012400 	.word	0x40012400
 8004af4:	40012800 	.word	0x40012800
 8004af8:	08004e63 	.word	0x08004e63
 8004afc:	08004edf 	.word	0x08004edf
 8004b00:	08004efb 	.word	0x08004efb

08004b04 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bc80      	pop	{r7}
 8004b14:	4770      	bx	lr

08004b16 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_ADC_ConfigChannel+0x20>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e0dc      	b.n	8004d16 <HAL_ADC_ConfigChannel+0x1da>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b06      	cmp	r3, #6
 8004b6a:	d81c      	bhi.n	8004ba6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3b05      	subs	r3, #5
 8004b7e:	221f      	movs	r2, #31
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	43db      	mvns	r3, r3
 8004b86:	4019      	ands	r1, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6818      	ldr	r0, [r3, #0]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	3b05      	subs	r3, #5
 8004b98:	fa00 f203 	lsl.w	r2, r0, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ba4:	e03c      	b.n	8004c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b0c      	cmp	r3, #12
 8004bac:	d81c      	bhi.n	8004be8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3b23      	subs	r3, #35	@ 0x23
 8004bc0:	221f      	movs	r2, #31
 8004bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc6:	43db      	mvns	r3, r3
 8004bc8:	4019      	ands	r1, r3
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	3b23      	subs	r3, #35	@ 0x23
 8004bda:	fa00 f203 	lsl.w	r2, r0, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004be6:	e01b      	b.n	8004c20 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b41      	subs	r3, #65	@ 0x41
 8004bfa:	221f      	movs	r2, #31
 8004bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004c00:	43db      	mvns	r3, r3
 8004c02:	4019      	ands	r1, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	3b41      	subs	r3, #65	@ 0x41
 8004c14:	fa00 f203 	lsl.w	r2, r0, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b09      	cmp	r3, #9
 8004c26:	d91c      	bls.n	8004c62 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68d9      	ldr	r1, [r3, #12]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4613      	mov	r3, r2
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	4413      	add	r3, r2
 8004c38:	3b1e      	subs	r3, #30
 8004c3a:	2207      	movs	r2, #7
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	43db      	mvns	r3, r3
 8004c42:	4019      	ands	r1, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	6898      	ldr	r0, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	4413      	add	r3, r2
 8004c52:	3b1e      	subs	r3, #30
 8004c54:	fa00 f203 	lsl.w	r2, r0, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e019      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6919      	ldr	r1, [r3, #16]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4413      	add	r3, r2
 8004c72:	2207      	movs	r2, #7
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	4019      	ands	r1, r3
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	6898      	ldr	r0, [r3, #8]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d003      	beq.n	8004ca6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004ca2:	2b11      	cmp	r3, #17
 8004ca4:	d132      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <HAL_ADC_ConfigChannel+0x1e4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d125      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d126      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004ccc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d11a      	bne.n	8004d0c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cd6:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <HAL_ADC_ConfigChannel+0x1e8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a13      	ldr	r2, [pc, #76]	@ (8004d28 <HAL_ADC_ConfigChannel+0x1ec>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0c9a      	lsrs	r2, r3, #18
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cec:	e002      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1f9      	bne.n	8004cee <HAL_ADC_ConfigChannel+0x1b2>
 8004cfa:	e007      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	f043 0220 	orr.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr
 8004d20:	40012400 	.word	0x40012400
 8004d24:	20000000 	.word	0x20000000
 8004d28:	431bde83 	.word	0x431bde83

08004d2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f003 0301 	and.w	r3, r3, #1
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d040      	beq.n	8004dcc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f042 0201 	orr.w	r2, r2, #1
 8004d58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004dd8 <ADC_Enable+0xac>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ddc <ADC_Enable+0xb0>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	0c9b      	lsrs	r3, r3, #18
 8004d66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d68:	e002      	b.n	8004d70 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f9      	bne.n	8004d6a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d76:	f7ff fccf 	bl	8004718 <HAL_GetTick>
 8004d7a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d7c:	e01f      	b.n	8004dbe <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d7e:	f7ff fccb 	bl	8004718 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d918      	bls.n	8004dbe <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d011      	beq.n	8004dbe <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9e:	f043 0210 	orr.w	r2, r3, #16
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	f043 0201 	orr.w	r2, r3, #1
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e007      	b.n	8004dce <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d1d8      	bne.n	8004d7e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20000000 	.word	0x20000000
 8004ddc:	431bde83 	.word	0x431bde83

08004de0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d12e      	bne.n	8004e58 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0201 	bic.w	r2, r2, #1
 8004e08:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e0a:	f7ff fc85 	bl	8004718 <HAL_GetTick>
 8004e0e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e10:	e01b      	b.n	8004e4a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e12:	f7ff fc81 	bl	8004718 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d914      	bls.n	8004e4a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d10d      	bne.n	8004e4a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f043 0210 	orr.w	r2, r3, #16
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	f043 0201 	orr.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e007      	b.n	8004e5a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d0dc      	beq.n	8004e12 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b084      	sub	sp, #16
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d127      	bne.n	8004ecc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004e92:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004e96:	d115      	bne.n	8004ec4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d111      	bne.n	8004ec4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d105      	bne.n	8004ec4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f7ff fe1d 	bl	8004b04 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004eca:	e004      	b.n	8004ed6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	4798      	blx	r3
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b084      	sub	sp, #16
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eea:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f7ff fe12 	bl	8004b16 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f18:	f043 0204 	orr.w	r2, r3, #4
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f7ff fe01 	bl	8004b28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_ADCEx_Calibration_Start+0x1e>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e097      	b.n	800507e <HAL_ADCEx_Calibration_Start+0x14e>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f7ff ff42 	bl	8004de0 <ADC_ConversionStop_Disable>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff fee3 	bl	8004d2c <ADC_Enable>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8004f6a:	7dfb      	ldrb	r3, [r7, #23]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f040 8081 	bne.w	8005074 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004f7a:	f023 0302 	bic.w	r3, r3, #2
 8004f7e:	f043 0202 	orr.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004f86:	4b40      	ldr	r3, [pc, #256]	@ (8005088 <HAL_ADCEx_Calibration_Start+0x158>)
 8004f88:	681c      	ldr	r4, [r3, #0]
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	f001 ffec 	bl	8006f68 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f90:	4603      	mov	r3, r0
 8004f92:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8004f96:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8004f98:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8004f9a:	e002      	b.n	8004fa2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1f9      	bne.n	8004f9c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 0208 	orr.w	r2, r2, #8
 8004fb6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004fb8:	f7ff fbae 	bl	8004718 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004fbe:	e01b      	b.n	8004ff8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004fc0:	f7ff fbaa 	bl	8004718 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b0a      	cmp	r3, #10
 8004fcc:	d914      	bls.n	8004ff8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe0:	f023 0312 	bic.w	r3, r3, #18
 8004fe4:	f043 0210 	orr.w	r2, r3, #16
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e042      	b.n	800507e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0308 	and.w	r3, r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1dc      	bne.n	8004fc0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f042 0204 	orr.w	r2, r2, #4
 8005014:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005016:	f7ff fb7f 	bl	8004718 <HAL_GetTick>
 800501a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800501c:	e01b      	b.n	8005056 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800501e:	f7ff fb7b 	bl	8004718 <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b0a      	cmp	r3, #10
 800502a:	d914      	bls.n	8005056 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	f023 0312 	bic.w	r3, r3, #18
 8005042:	f043 0210 	orr.w	r2, r3, #16
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e013      	b.n	800507e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1dc      	bne.n	800501e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f023 0303 	bic.w	r3, r3, #3
 800506c:	f043 0201 	orr.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800507c:	7dfb      	ldrb	r3, [r7, #23]
}
 800507e:	4618      	mov	r0, r3
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	bd90      	pop	{r4, r7, pc}
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000

0800508c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800509c:	4b0c      	ldr	r3, [pc, #48]	@ (80050d0 <__NVIC_SetPriorityGrouping+0x44>)
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80050a8:	4013      	ands	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80050b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050be:	4a04      	ldr	r2, [pc, #16]	@ (80050d0 <__NVIC_SetPriorityGrouping+0x44>)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	60d3      	str	r3, [r2, #12]
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	e000ed00 	.word	0xe000ed00

080050d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80050d8:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <__NVIC_GetPriorityGrouping+0x18>)
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	f003 0307 	and.w	r3, r3, #7
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000ed00 	.word	0xe000ed00

080050f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	4603      	mov	r3, r0
 80050f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	db0b      	blt.n	800511a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	f003 021f 	and.w	r2, r3, #31
 8005108:	4906      	ldr	r1, [pc, #24]	@ (8005124 <__NVIC_EnableIRQ+0x34>)
 800510a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800510e:	095b      	lsrs	r3, r3, #5
 8005110:	2001      	movs	r0, #1
 8005112:	fa00 f202 	lsl.w	r2, r0, r2
 8005116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	e000e100 	.word	0xe000e100

08005128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	4603      	mov	r3, r0
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005138:	2b00      	cmp	r3, #0
 800513a:	db0a      	blt.n	8005152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	b2da      	uxtb	r2, r3
 8005140:	490c      	ldr	r1, [pc, #48]	@ (8005174 <__NVIC_SetPriority+0x4c>)
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	0112      	lsls	r2, r2, #4
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	440b      	add	r3, r1
 800514c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005150:	e00a      	b.n	8005168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	4908      	ldr	r1, [pc, #32]	@ (8005178 <__NVIC_SetPriority+0x50>)
 8005158:	79fb      	ldrb	r3, [r7, #7]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	3b04      	subs	r3, #4
 8005160:	0112      	lsls	r2, r2, #4
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	440b      	add	r3, r1
 8005166:	761a      	strb	r2, [r3, #24]
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	e000e100 	.word	0xe000e100
 8005178:	e000ed00 	.word	0xe000ed00

0800517c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800517c:	b480      	push	{r7}
 800517e:	b089      	sub	sp, #36	@ 0x24
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 0307 	and.w	r3, r3, #7
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f1c3 0307 	rsb	r3, r3, #7
 8005196:	2b04      	cmp	r3, #4
 8005198:	bf28      	it	cs
 800519a:	2304      	movcs	r3, #4
 800519c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	3304      	adds	r3, #4
 80051a2:	2b06      	cmp	r3, #6
 80051a4:	d902      	bls.n	80051ac <NVIC_EncodePriority+0x30>
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	3b03      	subs	r3, #3
 80051aa:	e000      	b.n	80051ae <NVIC_EncodePriority+0x32>
 80051ac:	2300      	movs	r3, #0
 80051ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b0:	f04f 32ff 	mov.w	r2, #4294967295
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	43da      	mvns	r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	401a      	ands	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051c4:	f04f 31ff 	mov.w	r1, #4294967295
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	fa01 f303 	lsl.w	r3, r1, r3
 80051ce:	43d9      	mvns	r1, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051d4:	4313      	orrs	r3, r2
         );
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3724      	adds	r7, #36	@ 0x24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051f0:	d301      	bcc.n	80051f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051f2:	2301      	movs	r3, #1
 80051f4:	e00f      	b.n	8005216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005220 <SysTick_Config+0x40>)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051fe:	210f      	movs	r1, #15
 8005200:	f04f 30ff 	mov.w	r0, #4294967295
 8005204:	f7ff ff90 	bl	8005128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <SysTick_Config+0x40>)
 800520a:	2200      	movs	r2, #0
 800520c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800520e:	4b04      	ldr	r3, [pc, #16]	@ (8005220 <SysTick_Config+0x40>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	e000e010 	.word	0xe000e010

08005224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff2d 	bl	800508c <__NVIC_SetPriorityGrouping>
}
 8005232:	bf00      	nop
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800523a:	b580      	push	{r7, lr}
 800523c:	b086      	sub	sp, #24
 800523e:	af00      	add	r7, sp, #0
 8005240:	4603      	mov	r3, r0
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
 8005246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005248:	2300      	movs	r3, #0
 800524a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800524c:	f7ff ff42 	bl	80050d4 <__NVIC_GetPriorityGrouping>
 8005250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	6978      	ldr	r0, [r7, #20]
 8005258:	f7ff ff90 	bl	800517c <NVIC_EncodePriority>
 800525c:	4602      	mov	r2, r0
 800525e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff ff5f 	bl	8005128 <__NVIC_SetPriority>
}
 800526a:	bf00      	nop
 800526c:	3718      	adds	r7, #24
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	4603      	mov	r3, r0
 800527a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff ff35 	bl	80050f0 <__NVIC_EnableIRQ>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ffa2 	bl	80051e0 <SysTick_Config>
 800529c:	4603      	mov	r3, r0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
	...

080052a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d101      	bne.n	80052be <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e059      	b.n	8005372 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	461a      	mov	r2, r3
 80052c4:	4b2d      	ldr	r3, [pc, #180]	@ (800537c <HAL_DMA_Init+0xd4>)
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d80f      	bhi.n	80052ea <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	461a      	mov	r2, r3
 80052d0:	4b2b      	ldr	r3, [pc, #172]	@ (8005380 <HAL_DMA_Init+0xd8>)
 80052d2:	4413      	add	r3, r2
 80052d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005384 <HAL_DMA_Init+0xdc>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	009a      	lsls	r2, r3, #2
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a28      	ldr	r2, [pc, #160]	@ (8005388 <HAL_DMA_Init+0xe0>)
 80052e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052e8:	e00e      	b.n	8005308 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	461a      	mov	r2, r3
 80052f0:	4b26      	ldr	r3, [pc, #152]	@ (800538c <HAL_DMA_Init+0xe4>)
 80052f2:	4413      	add	r3, r2
 80052f4:	4a23      	ldr	r2, [pc, #140]	@ (8005384 <HAL_DMA_Init+0xdc>)
 80052f6:	fba2 2303 	umull	r2, r3, r2, r3
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	009a      	lsls	r2, r3, #2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <HAL_DMA_Init+0xe8>)
 8005306:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800531e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800532c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	40020407 	.word	0x40020407
 8005380:	bffdfff8 	.word	0xbffdfff8
 8005384:	cccccccd 	.word	0xcccccccd
 8005388:	40020000 	.word	0x40020000
 800538c:	bffdfbf8 	.word	0xbffdfbf8
 8005390:	40020400 	.word	0x40020400

08005394 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Start_IT+0x20>
 80053b0:	2302      	movs	r3, #2
 80053b2:	e04b      	b.n	800544c <HAL_DMA_Start_IT+0xb8>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d13a      	bne.n	800543e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 fbb1 	bl	8005b54 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d008      	beq.n	800540c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 020e 	orr.w	r2, r2, #14
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e00f      	b.n	800542c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f022 0204 	bic.w	r2, r2, #4
 800541a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 020a 	orr.w	r2, r2, #10
 800542a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	e005      	b.n	800544a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005446:	2302      	movs	r3, #2
 8005448:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d008      	beq.n	800547e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2204      	movs	r2, #4
 8005470:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e020      	b.n	80054c0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 020e 	bic.w	r2, r2, #14
 800548c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 0201 	bic.w	r2, r2, #1
 800549c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a6:	2101      	movs	r1, #1
 80054a8:	fa01 f202 	lsl.w	r2, r1, r2
 80054ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
	...

080054cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d005      	beq.n	80054f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2204      	movs	r2, #4
 80054e8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	73fb      	strb	r3, [r7, #15]
 80054ee:	e0d6      	b.n	800569e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 020e 	bic.w	r2, r2, #14
 80054fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0201 	bic.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	461a      	mov	r2, r3
 8005516:	4b64      	ldr	r3, [pc, #400]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005518:	429a      	cmp	r2, r3
 800551a:	d958      	bls.n	80055ce <HAL_DMA_Abort_IT+0x102>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a62      	ldr	r2, [pc, #392]	@ (80056ac <HAL_DMA_Abort_IT+0x1e0>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d04f      	beq.n	80055c6 <HAL_DMA_Abort_IT+0xfa>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a61      	ldr	r2, [pc, #388]	@ (80056b0 <HAL_DMA_Abort_IT+0x1e4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d048      	beq.n	80055c2 <HAL_DMA_Abort_IT+0xf6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5f      	ldr	r2, [pc, #380]	@ (80056b4 <HAL_DMA_Abort_IT+0x1e8>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d040      	beq.n	80055bc <HAL_DMA_Abort_IT+0xf0>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a5e      	ldr	r2, [pc, #376]	@ (80056b8 <HAL_DMA_Abort_IT+0x1ec>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d038      	beq.n	80055b6 <HAL_DMA_Abort_IT+0xea>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a5c      	ldr	r2, [pc, #368]	@ (80056bc <HAL_DMA_Abort_IT+0x1f0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d030      	beq.n	80055b0 <HAL_DMA_Abort_IT+0xe4>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a5b      	ldr	r2, [pc, #364]	@ (80056c0 <HAL_DMA_Abort_IT+0x1f4>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d028      	beq.n	80055aa <HAL_DMA_Abort_IT+0xde>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a52      	ldr	r2, [pc, #328]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d020      	beq.n	80055a4 <HAL_DMA_Abort_IT+0xd8>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a57      	ldr	r2, [pc, #348]	@ (80056c4 <HAL_DMA_Abort_IT+0x1f8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d019      	beq.n	80055a0 <HAL_DMA_Abort_IT+0xd4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a55      	ldr	r2, [pc, #340]	@ (80056c8 <HAL_DMA_Abort_IT+0x1fc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d012      	beq.n	800559c <HAL_DMA_Abort_IT+0xd0>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a54      	ldr	r2, [pc, #336]	@ (80056cc <HAL_DMA_Abort_IT+0x200>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00a      	beq.n	8005596 <HAL_DMA_Abort_IT+0xca>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a52      	ldr	r2, [pc, #328]	@ (80056d0 <HAL_DMA_Abort_IT+0x204>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d102      	bne.n	8005590 <HAL_DMA_Abort_IT+0xc4>
 800558a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800558e:	e01b      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 8005590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005594:	e018      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 8005596:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800559a:	e015      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 800559c:	2310      	movs	r3, #16
 800559e:	e013      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e011      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055a8:	e00e      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055aa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80055ae:	e00b      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80055b4:	e008      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80055ba:	e005      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80055c0:	e002      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055c2:	2310      	movs	r3, #16
 80055c4:	e000      	b.n	80055c8 <HAL_DMA_Abort_IT+0xfc>
 80055c6:	2301      	movs	r3, #1
 80055c8:	4a42      	ldr	r2, [pc, #264]	@ (80056d4 <HAL_DMA_Abort_IT+0x208>)
 80055ca:	6053      	str	r3, [r2, #4]
 80055cc:	e057      	b.n	800567e <HAL_DMA_Abort_IT+0x1b2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a36      	ldr	r2, [pc, #216]	@ (80056ac <HAL_DMA_Abort_IT+0x1e0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d04f      	beq.n	8005678 <HAL_DMA_Abort_IT+0x1ac>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a34      	ldr	r2, [pc, #208]	@ (80056b0 <HAL_DMA_Abort_IT+0x1e4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d048      	beq.n	8005674 <HAL_DMA_Abort_IT+0x1a8>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a33      	ldr	r2, [pc, #204]	@ (80056b4 <HAL_DMA_Abort_IT+0x1e8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d040      	beq.n	800566e <HAL_DMA_Abort_IT+0x1a2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a31      	ldr	r2, [pc, #196]	@ (80056b8 <HAL_DMA_Abort_IT+0x1ec>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d038      	beq.n	8005668 <HAL_DMA_Abort_IT+0x19c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a30      	ldr	r2, [pc, #192]	@ (80056bc <HAL_DMA_Abort_IT+0x1f0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d030      	beq.n	8005662 <HAL_DMA_Abort_IT+0x196>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a2e      	ldr	r2, [pc, #184]	@ (80056c0 <HAL_DMA_Abort_IT+0x1f4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d028      	beq.n	800565c <HAL_DMA_Abort_IT+0x190>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a26      	ldr	r2, [pc, #152]	@ (80056a8 <HAL_DMA_Abort_IT+0x1dc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d020      	beq.n	8005656 <HAL_DMA_Abort_IT+0x18a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <HAL_DMA_Abort_IT+0x1f8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d019      	beq.n	8005652 <HAL_DMA_Abort_IT+0x186>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a29      	ldr	r2, [pc, #164]	@ (80056c8 <HAL_DMA_Abort_IT+0x1fc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d012      	beq.n	800564e <HAL_DMA_Abort_IT+0x182>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a27      	ldr	r2, [pc, #156]	@ (80056cc <HAL_DMA_Abort_IT+0x200>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00a      	beq.n	8005648 <HAL_DMA_Abort_IT+0x17c>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a26      	ldr	r2, [pc, #152]	@ (80056d0 <HAL_DMA_Abort_IT+0x204>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d102      	bne.n	8005642 <HAL_DMA_Abort_IT+0x176>
 800563c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005640:	e01b      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005642:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005646:	e018      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005648:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800564c:	e015      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 800564e:	2310      	movs	r3, #16
 8005650:	e013      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005652:	2301      	movs	r3, #1
 8005654:	e011      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005656:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800565a:	e00e      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 800565c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005660:	e00b      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005662:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005666:	e008      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005668:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800566c:	e005      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 800566e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005672:	e002      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005674:	2310      	movs	r3, #16
 8005676:	e000      	b.n	800567a <HAL_DMA_Abort_IT+0x1ae>
 8005678:	2301      	movs	r3, #1
 800567a:	4a17      	ldr	r2, [pc, #92]	@ (80056d8 <HAL_DMA_Abort_IT+0x20c>)
 800567c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	4798      	blx	r3
    } 
  }
  return status;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}
 80056a8:	40020080 	.word	0x40020080
 80056ac:	40020008 	.word	0x40020008
 80056b0:	4002001c 	.word	0x4002001c
 80056b4:	40020030 	.word	0x40020030
 80056b8:	40020044 	.word	0x40020044
 80056bc:	40020058 	.word	0x40020058
 80056c0:	4002006c 	.word	0x4002006c
 80056c4:	40020408 	.word	0x40020408
 80056c8:	4002041c 	.word	0x4002041c
 80056cc:	40020430 	.word	0x40020430
 80056d0:	40020444 	.word	0x40020444
 80056d4:	40020400 	.word	0x40020400
 80056d8:	40020000 	.word	0x40020000

080056dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	2204      	movs	r2, #4
 80056fa:	409a      	lsls	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4013      	ands	r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80f1 	beq.w	80058e8 <HAL_DMA_IRQHandler+0x20c>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 80eb 	beq.w	80058e8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d107      	bne.n	8005730 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f022 0204 	bic.w	r2, r2, #4
 800572e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	461a      	mov	r2, r3
 8005736:	4b5f      	ldr	r3, [pc, #380]	@ (80058b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005738:	429a      	cmp	r2, r3
 800573a:	d958      	bls.n	80057ee <HAL_DMA_IRQHandler+0x112>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5d      	ldr	r2, [pc, #372]	@ (80058b8 <HAL_DMA_IRQHandler+0x1dc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d04f      	beq.n	80057e6 <HAL_DMA_IRQHandler+0x10a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5c      	ldr	r2, [pc, #368]	@ (80058bc <HAL_DMA_IRQHandler+0x1e0>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d048      	beq.n	80057e2 <HAL_DMA_IRQHandler+0x106>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a5a      	ldr	r2, [pc, #360]	@ (80058c0 <HAL_DMA_IRQHandler+0x1e4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d040      	beq.n	80057dc <HAL_DMA_IRQHandler+0x100>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a59      	ldr	r2, [pc, #356]	@ (80058c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d038      	beq.n	80057d6 <HAL_DMA_IRQHandler+0xfa>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a57      	ldr	r2, [pc, #348]	@ (80058c8 <HAL_DMA_IRQHandler+0x1ec>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d030      	beq.n	80057d0 <HAL_DMA_IRQHandler+0xf4>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a56      	ldr	r2, [pc, #344]	@ (80058cc <HAL_DMA_IRQHandler+0x1f0>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d028      	beq.n	80057ca <HAL_DMA_IRQHandler+0xee>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a4d      	ldr	r2, [pc, #308]	@ (80058b4 <HAL_DMA_IRQHandler+0x1d8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d020      	beq.n	80057c4 <HAL_DMA_IRQHandler+0xe8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a52      	ldr	r2, [pc, #328]	@ (80058d0 <HAL_DMA_IRQHandler+0x1f4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d019      	beq.n	80057c0 <HAL_DMA_IRQHandler+0xe4>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a50      	ldr	r2, [pc, #320]	@ (80058d4 <HAL_DMA_IRQHandler+0x1f8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d012      	beq.n	80057bc <HAL_DMA_IRQHandler+0xe0>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a4f      	ldr	r2, [pc, #316]	@ (80058d8 <HAL_DMA_IRQHandler+0x1fc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00a      	beq.n	80057b6 <HAL_DMA_IRQHandler+0xda>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a4d      	ldr	r2, [pc, #308]	@ (80058dc <HAL_DMA_IRQHandler+0x200>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d102      	bne.n	80057b0 <HAL_DMA_IRQHandler+0xd4>
 80057aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80057ae:	e01b      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057b4:	e018      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057ba:	e015      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057bc:	2340      	movs	r3, #64	@ 0x40
 80057be:	e013      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057c0:	2304      	movs	r3, #4
 80057c2:	e011      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057c4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80057c8:	e00e      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80057ce:	e00b      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80057d4:	e008      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80057da:	e005      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80057e0:	e002      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057e2:	2340      	movs	r3, #64	@ 0x40
 80057e4:	e000      	b.n	80057e8 <HAL_DMA_IRQHandler+0x10c>
 80057e6:	2304      	movs	r3, #4
 80057e8:	4a3d      	ldr	r2, [pc, #244]	@ (80058e0 <HAL_DMA_IRQHandler+0x204>)
 80057ea:	6053      	str	r3, [r2, #4]
 80057ec:	e057      	b.n	800589e <HAL_DMA_IRQHandler+0x1c2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a31      	ldr	r2, [pc, #196]	@ (80058b8 <HAL_DMA_IRQHandler+0x1dc>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d04f      	beq.n	8005898 <HAL_DMA_IRQHandler+0x1bc>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a2f      	ldr	r2, [pc, #188]	@ (80058bc <HAL_DMA_IRQHandler+0x1e0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d048      	beq.n	8005894 <HAL_DMA_IRQHandler+0x1b8>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a2e      	ldr	r2, [pc, #184]	@ (80058c0 <HAL_DMA_IRQHandler+0x1e4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d040      	beq.n	800588e <HAL_DMA_IRQHandler+0x1b2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a2c      	ldr	r2, [pc, #176]	@ (80058c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d038      	beq.n	8005888 <HAL_DMA_IRQHandler+0x1ac>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a2b      	ldr	r2, [pc, #172]	@ (80058c8 <HAL_DMA_IRQHandler+0x1ec>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d030      	beq.n	8005882 <HAL_DMA_IRQHandler+0x1a6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a29      	ldr	r2, [pc, #164]	@ (80058cc <HAL_DMA_IRQHandler+0x1f0>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d028      	beq.n	800587c <HAL_DMA_IRQHandler+0x1a0>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a21      	ldr	r2, [pc, #132]	@ (80058b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d020      	beq.n	8005876 <HAL_DMA_IRQHandler+0x19a>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a25      	ldr	r2, [pc, #148]	@ (80058d0 <HAL_DMA_IRQHandler+0x1f4>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d019      	beq.n	8005872 <HAL_DMA_IRQHandler+0x196>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a24      	ldr	r2, [pc, #144]	@ (80058d4 <HAL_DMA_IRQHandler+0x1f8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d012      	beq.n	800586e <HAL_DMA_IRQHandler+0x192>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a22      	ldr	r2, [pc, #136]	@ (80058d8 <HAL_DMA_IRQHandler+0x1fc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00a      	beq.n	8005868 <HAL_DMA_IRQHandler+0x18c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a21      	ldr	r2, [pc, #132]	@ (80058dc <HAL_DMA_IRQHandler+0x200>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d102      	bne.n	8005862 <HAL_DMA_IRQHandler+0x186>
 800585c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005860:	e01b      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005862:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005866:	e018      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800586c:	e015      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 800586e:	2340      	movs	r3, #64	@ 0x40
 8005870:	e013      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005872:	2304      	movs	r3, #4
 8005874:	e011      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005876:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800587a:	e00e      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 800587c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005880:	e00b      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005882:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005886:	e008      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005888:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800588c:	e005      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 800588e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005892:	e002      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005894:	2340      	movs	r3, #64	@ 0x40
 8005896:	e000      	b.n	800589a <HAL_DMA_IRQHandler+0x1be>
 8005898:	2304      	movs	r3, #4
 800589a:	4a12      	ldr	r2, [pc, #72]	@ (80058e4 <HAL_DMA_IRQHandler+0x208>)
 800589c:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 8136 	beq.w	8005b14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80058b0:	e130      	b.n	8005b14 <HAL_DMA_IRQHandler+0x438>
 80058b2:	bf00      	nop
 80058b4:	40020080 	.word	0x40020080
 80058b8:	40020008 	.word	0x40020008
 80058bc:	4002001c 	.word	0x4002001c
 80058c0:	40020030 	.word	0x40020030
 80058c4:	40020044 	.word	0x40020044
 80058c8:	40020058 	.word	0x40020058
 80058cc:	4002006c 	.word	0x4002006c
 80058d0:	40020408 	.word	0x40020408
 80058d4:	4002041c 	.word	0x4002041c
 80058d8:	40020430 	.word	0x40020430
 80058dc:	40020444 	.word	0x40020444
 80058e0:	40020400 	.word	0x40020400
 80058e4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2202      	movs	r2, #2
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 80dd 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0x3d8>
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 80d7 	beq.w	8005ab4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0320 	and.w	r3, r3, #32
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 020a 	bic.w	r2, r2, #10
 8005922:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	4b7b      	ldr	r3, [pc, #492]	@ (8005b20 <HAL_DMA_IRQHandler+0x444>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d958      	bls.n	80059ea <HAL_DMA_IRQHandler+0x30e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a79      	ldr	r2, [pc, #484]	@ (8005b24 <HAL_DMA_IRQHandler+0x448>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d04f      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x306>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a78      	ldr	r2, [pc, #480]	@ (8005b28 <HAL_DMA_IRQHandler+0x44c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d048      	beq.n	80059de <HAL_DMA_IRQHandler+0x302>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a76      	ldr	r2, [pc, #472]	@ (8005b2c <HAL_DMA_IRQHandler+0x450>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d040      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x2fc>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a75      	ldr	r2, [pc, #468]	@ (8005b30 <HAL_DMA_IRQHandler+0x454>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d038      	beq.n	80059d2 <HAL_DMA_IRQHandler+0x2f6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a73      	ldr	r2, [pc, #460]	@ (8005b34 <HAL_DMA_IRQHandler+0x458>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d030      	beq.n	80059cc <HAL_DMA_IRQHandler+0x2f0>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a72      	ldr	r2, [pc, #456]	@ (8005b38 <HAL_DMA_IRQHandler+0x45c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d028      	beq.n	80059c6 <HAL_DMA_IRQHandler+0x2ea>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a69      	ldr	r2, [pc, #420]	@ (8005b20 <HAL_DMA_IRQHandler+0x444>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d020      	beq.n	80059c0 <HAL_DMA_IRQHandler+0x2e4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a6e      	ldr	r2, [pc, #440]	@ (8005b3c <HAL_DMA_IRQHandler+0x460>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d019      	beq.n	80059bc <HAL_DMA_IRQHandler+0x2e0>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a6c      	ldr	r2, [pc, #432]	@ (8005b40 <HAL_DMA_IRQHandler+0x464>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d012      	beq.n	80059b8 <HAL_DMA_IRQHandler+0x2dc>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6b      	ldr	r2, [pc, #428]	@ (8005b44 <HAL_DMA_IRQHandler+0x468>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d00a      	beq.n	80059b2 <HAL_DMA_IRQHandler+0x2d6>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a69      	ldr	r2, [pc, #420]	@ (8005b48 <HAL_DMA_IRQHandler+0x46c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d102      	bne.n	80059ac <HAL_DMA_IRQHandler+0x2d0>
 80059a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059aa:	e01b      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059b0:	e018      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059b6:	e015      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059b8:	2320      	movs	r3, #32
 80059ba:	e013      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059bc:	2302      	movs	r3, #2
 80059be:	e011      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059c4:	e00e      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059c6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059ca:	e00b      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059d0:	e008      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059d6:	e005      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059dc:	e002      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059de:	2320      	movs	r3, #32
 80059e0:	e000      	b.n	80059e4 <HAL_DMA_IRQHandler+0x308>
 80059e2:	2302      	movs	r3, #2
 80059e4:	4a59      	ldr	r2, [pc, #356]	@ (8005b4c <HAL_DMA_IRQHandler+0x470>)
 80059e6:	6053      	str	r3, [r2, #4]
 80059e8:	e057      	b.n	8005a9a <HAL_DMA_IRQHandler+0x3be>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a4d      	ldr	r2, [pc, #308]	@ (8005b24 <HAL_DMA_IRQHandler+0x448>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04f      	beq.n	8005a94 <HAL_DMA_IRQHandler+0x3b8>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a4b      	ldr	r2, [pc, #300]	@ (8005b28 <HAL_DMA_IRQHandler+0x44c>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d048      	beq.n	8005a90 <HAL_DMA_IRQHandler+0x3b4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a4a      	ldr	r2, [pc, #296]	@ (8005b2c <HAL_DMA_IRQHandler+0x450>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d040      	beq.n	8005a8a <HAL_DMA_IRQHandler+0x3ae>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a48      	ldr	r2, [pc, #288]	@ (8005b30 <HAL_DMA_IRQHandler+0x454>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d038      	beq.n	8005a84 <HAL_DMA_IRQHandler+0x3a8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a47      	ldr	r2, [pc, #284]	@ (8005b34 <HAL_DMA_IRQHandler+0x458>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d030      	beq.n	8005a7e <HAL_DMA_IRQHandler+0x3a2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a45      	ldr	r2, [pc, #276]	@ (8005b38 <HAL_DMA_IRQHandler+0x45c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d028      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x39c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b20 <HAL_DMA_IRQHandler+0x444>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d020      	beq.n	8005a72 <HAL_DMA_IRQHandler+0x396>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a41      	ldr	r2, [pc, #260]	@ (8005b3c <HAL_DMA_IRQHandler+0x460>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d019      	beq.n	8005a6e <HAL_DMA_IRQHandler+0x392>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a40      	ldr	r2, [pc, #256]	@ (8005b40 <HAL_DMA_IRQHandler+0x464>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d012      	beq.n	8005a6a <HAL_DMA_IRQHandler+0x38e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a3e      	ldr	r2, [pc, #248]	@ (8005b44 <HAL_DMA_IRQHandler+0x468>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00a      	beq.n	8005a64 <HAL_DMA_IRQHandler+0x388>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a3d      	ldr	r2, [pc, #244]	@ (8005b48 <HAL_DMA_IRQHandler+0x46c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d102      	bne.n	8005a5e <HAL_DMA_IRQHandler+0x382>
 8005a58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a5c:	e01b      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a62:	e018      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a68:	e015      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a6a:	2320      	movs	r3, #32
 8005a6c:	e013      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e011      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a76:	e00e      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a7c:	e00b      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a82:	e008      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a88:	e005      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a8e:	e002      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a90:	2320      	movs	r3, #32
 8005a92:	e000      	b.n	8005a96 <HAL_DMA_IRQHandler+0x3ba>
 8005a94:	2302      	movs	r3, #2
 8005a96:	4a2e      	ldr	r2, [pc, #184]	@ (8005b50 <HAL_DMA_IRQHandler+0x474>)
 8005a98:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d034      	beq.n	8005b14 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ab2:	e02f      	b.n	8005b14 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab8:	2208      	movs	r2, #8
 8005aba:	409a      	lsls	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d028      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x43a>
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d023      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 020e 	bic.w	r2, r2, #14
 8005adc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	fa01 f202 	lsl.w	r2, r1, r2
 8005aec:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d004      	beq.n	8005b16 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
    }
  }
  return;
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop
}
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40020080 	.word	0x40020080
 8005b24:	40020008 	.word	0x40020008
 8005b28:	4002001c 	.word	0x4002001c
 8005b2c:	40020030 	.word	0x40020030
 8005b30:	40020044 	.word	0x40020044
 8005b34:	40020058 	.word	0x40020058
 8005b38:	4002006c 	.word	0x4002006c
 8005b3c:	40020408 	.word	0x40020408
 8005b40:	4002041c 	.word	0x4002041c
 8005b44:	40020430 	.word	0x40020430
 8005b48:	40020444 	.word	0x40020444
 8005b4c:	40020400 	.word	0x40020400
 8005b50:	40020000 	.word	0x40020000

08005b54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	2b10      	cmp	r3, #16
 8005b80:	d108      	bne.n	8005b94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b92:	e007      	b.n	8005ba4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	60da      	str	r2, [r3, #12]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
	...

08005bb0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005bca:	4b3d      	ldr	r3, [pc, #244]	@ (8005cc0 <HAL_FLASH_Program+0x110>)
 8005bcc:	7e1b      	ldrb	r3, [r3, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_FLASH_Program+0x26>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e070      	b.n	8005cb8 <HAL_FLASH_Program+0x108>
 8005bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8005cc0 <HAL_FLASH_Program+0x110>)
 8005bd8:	2201      	movs	r2, #1
 8005bda:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4a39      	ldr	r2, [pc, #228]	@ (8005cc4 <HAL_FLASH_Program+0x114>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d806      	bhi.n	8005bf2 <HAL_FLASH_Program+0x42>
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005be4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005be8:	f000 f8e8 	bl	8005dbc <FLASH_WaitForLastOperation>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75fb      	strb	r3, [r7, #23]
 8005bf0:	e005      	b.n	8005bfe <HAL_FLASH_Program+0x4e>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8005bf2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005bf6:	f000 f927 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	75fb      	strb	r3, [r7, #23]
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8005bfe:	7dfb      	ldrb	r3, [r7, #23]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d155      	bne.n	8005cb0 <HAL_FLASH_Program+0x100>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d102      	bne.n	8005c10 <HAL_FLASH_Program+0x60>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	757b      	strb	r3, [r7, #21]
 8005c0e:	e007      	b.n	8005c20 <HAL_FLASH_Program+0x70>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d102      	bne.n	8005c1c <HAL_FLASH_Program+0x6c>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8005c16:	2302      	movs	r3, #2
 8005c18:	757b      	strb	r3, [r7, #21]
 8005c1a:	e001      	b.n	8005c20 <HAL_FLASH_Program+0x70>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8005c20:	2300      	movs	r3, #0
 8005c22:	75bb      	strb	r3, [r7, #22]
 8005c24:	e03e      	b.n	8005ca4 <HAL_FLASH_Program+0xf4>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8005c26:	7dbb      	ldrb	r3, [r7, #22]
 8005c28:	005a      	lsls	r2, r3, #1
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	eb02 0c03 	add.w	ip, r2, r3
 8005c30:	7dbb      	ldrb	r3, [r7, #22]
 8005c32:	0119      	lsls	r1, r3, #4
 8005c34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c38:	f1c1 0620 	rsb	r6, r1, #32
 8005c3c:	f1a1 0020 	sub.w	r0, r1, #32
 8005c40:	fa22 f401 	lsr.w	r4, r2, r1
 8005c44:	fa03 f606 	lsl.w	r6, r3, r6
 8005c48:	4334      	orrs	r4, r6
 8005c4a:	fa23 f000 	lsr.w	r0, r3, r0
 8005c4e:	4304      	orrs	r4, r0
 8005c50:	fa23 f501 	lsr.w	r5, r3, r1
 8005c54:	b2a3      	uxth	r3, r4
 8005c56:	4619      	mov	r1, r3
 8005c58:	4660      	mov	r0, ip
 8005c5a:	f000 f887 	bl	8005d6c <FLASH_Program_HalfWord>

#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a18      	ldr	r2, [pc, #96]	@ (8005cc4 <HAL_FLASH_Program+0x114>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d80c      	bhi.n	8005c80 <HAL_FLASH_Program+0xd0>
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c66:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c6a:	f000 f8a7 	bl	8005dbc <FLASH_WaitForLastOperation>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8005c72:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <HAL_FLASH_Program+0x118>)
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4a14      	ldr	r2, [pc, #80]	@ (8005cc8 <HAL_FLASH_Program+0x118>)
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	6113      	str	r3, [r2, #16]
 8005c7e:	e00b      	b.n	8005c98 <HAL_FLASH_Program+0xe8>
#if defined(FLASH_BANK2_END)
      }
      else
      {
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8005c80:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005c84:	f000 f8e0 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]
        
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 8005c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005cc8 <HAL_FLASH_Program+0x118>)
 8005c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c90:	4a0d      	ldr	r2, [pc, #52]	@ (8005cc8 <HAL_FLASH_Program+0x118>)
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	6513      	str	r3, [r2, #80]	@ 0x50
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8005c98:	7dfb      	ldrb	r3, [r7, #23]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d107      	bne.n	8005cae <HAL_FLASH_Program+0xfe>
    for (index = 0U; index < nbiterations; index++)
 8005c9e:	7dbb      	ldrb	r3, [r7, #22]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	75bb      	strb	r3, [r7, #22]
 8005ca4:	7dba      	ldrb	r2, [r7, #22]
 8005ca6:	7d7b      	ldrb	r3, [r7, #21]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d3bc      	bcc.n	8005c26 <HAL_FLASH_Program+0x76>
 8005cac:	e000      	b.n	8005cb0 <HAL_FLASH_Program+0x100>
      {
        break;
 8005cae:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005cb0:	4b03      	ldr	r3, [pc, #12]	@ (8005cc0 <HAL_FLASH_Program+0x110>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	761a      	strb	r2, [r3, #24]

  return status;
 8005cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cc0:	20000810 	.word	0x20000810
 8005cc4:	0807ffff 	.word	0x0807ffff
 8005cc8:	40022000 	.word	0x40022000

08005ccc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cd6:	4b17      	ldr	r3, [pc, #92]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00d      	beq.n	8005cfe <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005ce2:	4b14      	ldr	r3, [pc, #80]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005ce4:	4a14      	ldr	r2, [pc, #80]	@ (8005d38 <HAL_FLASH_Unlock+0x6c>)
 8005ce6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ce8:	4b12      	ldr	r3, [pc, #72]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005cea:	4a14      	ldr	r2, [pc, #80]	@ (8005d3c <HAL_FLASH_Unlock+0x70>)
 8005cec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005cee:	4b11      	ldr	r3, [pc, #68]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	71fb      	strb	r3, [r7, #7]
    }
  }
#if defined(FLASH_BANK2_END)
  if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <HAL_FLASH_Unlock+0x5a>
  {
    /* Authorize the FLASH BANK2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 8005d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005d38 <HAL_FLASH_Unlock+0x6c>)
 8005d0e:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8005d10:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005d12:	4a0a      	ldr	r2, [pc, #40]	@ (8005d3c <HAL_FLASH_Unlock+0x70>)
 8005d14:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Verify Flash BANK2 is unlocked */
    if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 8005d16:	4b07      	ldr	r3, [pc, #28]	@ (8005d34 <HAL_FLASH_Unlock+0x68>)
 8005d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <HAL_FLASH_Unlock+0x5a>
    {
      status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8005d26:	79fb      	ldrb	r3, [r7, #7]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bc80      	pop	{r7}
 8005d30:	4770      	bx	lr
 8005d32:	bf00      	nop
 8005d34:	40022000 	.word	0x40022000
 8005d38:	45670123 	.word	0x45670123
 8005d3c:	cdef89ab 	.word	0xcdef89ab

08005d40 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005d44:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <HAL_FLASH_Lock+0x28>)
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	4a07      	ldr	r2, [pc, #28]	@ (8005d68 <HAL_FLASH_Lock+0x28>)
 8005d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d4e:	6113      	str	r3, [r2, #16]
  
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
 8005d50:	4b05      	ldr	r3, [pc, #20]	@ (8005d68 <HAL_FLASH_Lock+0x28>)
 8005d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d54:	4a04      	ldr	r2, [pc, #16]	@ (8005d68 <HAL_FLASH_Lock+0x28>)
 8005d56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5a:	6513      	str	r3, [r2, #80]	@ 0x50

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bc80      	pop	{r7}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40022000 	.word	0x40022000

08005d6c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005d78:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <FLASH_Program_HalfWord+0x44>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	61da      	str	r2, [r3, #28]
  
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a0c      	ldr	r2, [pc, #48]	@ (8005db4 <FLASH_Program_HalfWord+0x48>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d806      	bhi.n	8005d94 <FLASH_Program_HalfWord+0x28>
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005d86:	4b0c      	ldr	r3, [pc, #48]	@ (8005db8 <FLASH_Program_HalfWord+0x4c>)
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005db8 <FLASH_Program_HalfWord+0x4c>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6113      	str	r3, [r2, #16]
 8005d92:	e005      	b.n	8005da0 <FLASH_Program_HalfWord+0x34>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
 8005d94:	4b08      	ldr	r3, [pc, #32]	@ (8005db8 <FLASH_Program_HalfWord+0x4c>)
 8005d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d98:	4a07      	ldr	r2, [pc, #28]	@ (8005db8 <FLASH_Program_HalfWord+0x4c>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	887a      	ldrh	r2, [r7, #2]
 8005da4:	801a      	strh	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	20000810 	.word	0x20000810
 8005db4:	0807ffff 	.word	0x0807ffff
 8005db8:	40022000 	.word	0x40022000

08005dbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005dc4:	f7fe fca8 	bl	8004718 <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005dca:	e010      	b.n	8005dee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd2:	d00c      	beq.n	8005dee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d007      	beq.n	8005dea <FLASH_WaitForLastOperation+0x2e>
 8005dda:	f7fe fc9d 	bl	8004718 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d201      	bcs.n	8005dee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e025      	b.n	8005e3a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8005dee:	4b15      	ldr	r3, [pc, #84]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e8      	bne.n	8005dcc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8005dfa:	4b12      	ldr	r3, [pc, #72]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005e06:	4b0f      	ldr	r3, [pc, #60]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005e08:	2220      	movs	r2, #32
 8005e0a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005e18:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d105      	bne.n	8005e30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8005e24:	4b07      	ldr	r3, [pc, #28]	@ (8005e44 <FLASH_WaitForLastOperation+0x88>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005e30:	f000 f84a 	bl	8005ec8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e000      	b.n	8005e3a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40022000 	.word	0x40022000

08005e48 <FLASH_WaitForLastOperationBank2>:
  * @brief  Wait for a FLASH BANK2 operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)
{ 
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8005e50:	f7fe fc62 	bl	8004718 <HAL_GetTick>
 8005e54:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 8005e56:	e010      	b.n	8005e7a <FLASH_WaitForLastOperationBank2+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d00c      	beq.n	8005e7a <FLASH_WaitForLastOperationBank2+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d007      	beq.n	8005e76 <FLASH_WaitForLastOperationBank2+0x2e>
 8005e66:	f7fe fc57 	bl	8004718 <HAL_GetTick>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d201      	bcs.n	8005e7a <FLASH_WaitForLastOperationBank2+0x32>
      {
        return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e01f      	b.n	8005eba <FLASH_WaitForLastOperationBank2+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 8005e7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ec4 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1e8      	bne.n	8005e58 <FLASH_WaitForLastOperationBank2+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK2))
 8005e86:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d002      	beq.n	8005e98 <FLASH_WaitForLastOperationBank2+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 8005e92:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005e94:	2220      	movs	r2, #32
 8005e96:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 8005e98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ec4 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <FLASH_WaitForLastOperationBank2+0x68>
 8005ea4:	4b07      	ldr	r3, [pc, #28]	@ (8005ec4 <FLASH_WaitForLastOperationBank2+0x7c>)
 8005ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea8:	f003 0304 	and.w	r3, r3, #4
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <FLASH_WaitForLastOperationBank2+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005eb0:	f000 f80a 	bl	8005ec8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e000      	b.n	8005eba <FLASH_WaitForLastOperationBank2+0x72>
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
  
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	40022000 	.word	0x40022000

08005ec8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
 8005ed2:	4b30      	ldr	r3, [pc, #192]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d105      	bne.n	8005eea <FLASH_SetErrorCode+0x22>
 8005ede:	4b2d      	ldr	r3, [pc, #180]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ee2:	f003 0310 	and.w	r3, r3, #16
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d009      	beq.n	8005efe <FLASH_SetErrorCode+0x36>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005eea:	4b2b      	ldr	r3, [pc, #172]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f043 0302 	orr.w	r3, r3, #2
 8005ef2:	4a29      	ldr	r2, [pc, #164]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005ef4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f043 1310 	orr.w	r3, r3, #1048592	@ 0x100010
 8005efc:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_WRPERR;
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 8005efe:	4b25      	ldr	r3, [pc, #148]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d105      	bne.n	8005f16 <FLASH_SetErrorCode+0x4e>
 8005f0a:	4b22      	ldr	r3, [pc, #136]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <FLASH_SetErrorCode+0x62>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8005f16:	4b20      	ldr	r3, [pc, #128]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f043 0301 	orr.w	r3, r3, #1
 8005f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005f20:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f043 1304 	orr.w	r3, r3, #262148	@ 0x40004
 8005f28:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_PGERR;
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8005f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d00b      	beq.n	8005f4e <FLASH_SetErrorCode+0x86>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	f043 0304 	orr.w	r3, r3, #4
 8005f3e:	4a16      	ldr	r2, [pc, #88]	@ (8005f98 <FLASH_SetErrorCode+0xd0>)
 8005f40:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005f42:	4b14      	ldr	r3, [pc, #80]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	4a13      	ldr	r2, [pc, #76]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f48:	f023 0301 	bic.w	r3, r3, #1
 8005f4c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f240 1201 	movw	r2, #257	@ 0x101
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d106      	bne.n	8005f66 <FLASH_SetErrorCode+0x9e>
 8005f58:	4b0e      	ldr	r3, [pc, #56]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	61d3      	str	r3, [r2, #28]
}  
 8005f64:	e011      	b.n	8005f8a <FLASH_SetErrorCode+0xc2>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <FLASH_SetErrorCode+0xb2>
 8005f70:	4a08      	ldr	r2, [pc, #32]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 8005f78:	60d3      	str	r3, [r2, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d003      	beq.n	8005f8a <FLASH_SetErrorCode+0xc2>
 8005f82:	4a04      	ldr	r2, [pc, #16]	@ (8005f94 <FLASH_SetErrorCode+0xcc>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	0c1b      	lsrs	r3, r3, #16
 8005f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
}  
 8005f8a:	bf00      	nop
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	40022000 	.word	0x40022000
 8005f98:	20000810 	.word	0x20000810

08005f9c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005fae:	4b73      	ldr	r3, [pc, #460]	@ (800617c <HAL_FLASHEx_Erase+0x1e0>)
 8005fb0:	7e1b      	ldrb	r3, [r3, #24]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_FLASHEx_Erase+0x1e>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e0db      	b.n	8006172 <HAL_FLASHEx_Erase+0x1d6>
 8005fba:	4b70      	ldr	r3, [pc, #448]	@ (800617c <HAL_FLASHEx_Erase+0x1e0>)
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d166      	bne.n	8006096 <HAL_FLASHEx_Erase+0xfa>
  {
#if defined(FLASH_BANK2_END)
    if (pEraseInit->Banks == FLASH_BANK_BOTH)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d12f      	bne.n	8006030 <HAL_FLASHEx_Erase+0x94>
    {
      /* Mass Erase requested for Bank1 and Bank2 */
      /* Wait for last operation to be completed */
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8005fd0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fd4:	f7ff fef2 	bl	8005dbc <FLASH_WaitForLastOperation>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 80c5 	bne.w	800616a <HAL_FLASHEx_Erase+0x1ce>
          (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 8005fe0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005fe4:	f7ff ff30 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 8005fe8:	4603      	mov	r3, r0
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 80bd 	bne.w	800616a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_BOTH);
 8005ff0:	2003      	movs	r0, #3
 8005ff2:	f000 f8c9 	bl	8006188 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8005ff6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8005ffa:	f7ff fedf 	bl	8005dbc <FLASH_WaitForLastOperation>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d108      	bne.n	8006016 <HAL_FLASHEx_Erase+0x7a>
            (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 8006004:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006008:	f7ff ff1e 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 800600c:	4603      	mov	r3, r0
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_FLASHEx_Erase+0x7a>
        {
          status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
        }
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006016:	4b5a      	ldr	r3, [pc, #360]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	4a59      	ldr	r2, [pc, #356]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 800601c:	f023 0304 	bic.w	r3, r3, #4
 8006020:	6113      	str	r3, [r2, #16]
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 8006022:	4b57      	ldr	r3, [pc, #348]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 8006024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006026:	4a56      	ldr	r2, [pc, #344]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 8006028:	f023 0304 	bic.w	r3, r3, #4
 800602c:	6513      	str	r3, [r2, #80]	@ 0x50
 800602e:	e09c      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
      }
    }
    else if (pEraseInit->Banks == FLASH_BANK_2)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d117      	bne.n	8006068 <HAL_FLASHEx_Erase+0xcc>
    {
      /* Mass Erase requested for Bank2 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006038:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800603c:	f7ff ff04 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 8091 	bne.w	800616a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_2);
 8006048:	2002      	movs	r0, #2
 800604a:	f000 f89d 	bl	8006188 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 800604e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006052:	f7ff fef9 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 8006056:	4603      	mov	r3, r0
 8006058:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 800605a:	4b49      	ldr	r3, [pc, #292]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 800605c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605e:	4a48      	ldr	r2, [pc, #288]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 8006060:	f023 0304 	bic.w	r3, r3, #4
 8006064:	6513      	str	r3, [r2, #80]	@ 0x50
 8006066:	e080      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006068:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800606c:	f7ff fea6 	bl	8005dbc <FLASH_WaitForLastOperation>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d179      	bne.n	800616a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8006076:	2001      	movs	r0, #1
 8006078:	f000 f886 	bl	8006188 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800607c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006080:	f7ff fe9c 	bl	8005dbc <FLASH_WaitForLastOperation>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006088:	4b3d      	ldr	r3, [pc, #244]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	4a3c      	ldr	r2, [pc, #240]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 800608e:	f023 0304 	bic.w	r3, r3, #4
 8006092:	6113      	str	r3, [r2, #16]
 8006094:	e069      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
#if defined(FLASH_BANK2_END)
    /* Page Erase requested on address located on bank2 */
    if(pEraseInit->PageAddress > FLASH_BANK1_END)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	4a3a      	ldr	r2, [pc, #232]	@ (8006184 <HAL_FLASHEx_Erase+0x1e8>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d932      	bls.n	8006106 <HAL_FLASHEx_Erase+0x16a>
    {   
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80060a0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80060a4:	f7ff fed0 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d15d      	bne.n	800616a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	f04f 32ff 	mov.w	r2, #4294967295
 80060b4:	601a      	str	r2, [r3, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
 80060bc:	e019      	b.n	80060f2 <HAL_FLASHEx_Erase+0x156>
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80060be:	68b8      	ldr	r0, [r7, #8]
 80060c0:	f000 f8aa 	bl	8006218 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 80060c4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80060c8:	f7ff febe 	bl	8005e48 <FLASH_WaitForLastOperationBank2>
 80060cc:	4603      	mov	r3, r0
 80060ce:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 80060d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 80060d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 80060d6:	f023 0302 	bic.w	r3, r3, #2
 80060da:	6513      	str	r3, [r2, #80]	@ 0x50
          
          if (status != HAL_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d003      	beq.n	80060ea <HAL_FLASHEx_Erase+0x14e>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	601a      	str	r2, [r3, #0]
            break;
 80060e8:	e03f      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f0:	60bb      	str	r3, [r7, #8]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	02db      	lsls	r3, r3, #11
 80060fc:	4413      	add	r3, r2
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	429a      	cmp	r2, r3
 8006102:	d3dc      	bcc.n	80060be <HAL_FLASHEx_Erase+0x122>
 8006104:	e031      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006106:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800610a:	f7ff fe57 	bl	8005dbc <FLASH_WaitForLastOperation>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d12a      	bne.n	800616a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	f04f 32ff 	mov.w	r2, #4294967295
 800611a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	689b      	ldr	r3, [r3, #8]
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	e019      	b.n	8006158 <HAL_FLASHEx_Erase+0x1bc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006124:	68b8      	ldr	r0, [r7, #8]
 8006126:	f000 f877 	bl	8006218 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800612a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800612e:	f7ff fe45 	bl	8005dbc <FLASH_WaitForLastOperation>
 8006132:	4603      	mov	r3, r0
 8006134:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006136:	4b12      	ldr	r3, [pc, #72]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	4a11      	ldr	r2, [pc, #68]	@ (8006180 <HAL_FLASHEx_Erase+0x1e4>)
 800613c:	f023 0302 	bic.w	r3, r3, #2
 8006140:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_FLASHEx_Erase+0x1b4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	601a      	str	r2, [r3, #0]
            break;
 800614e:	e00c      	b.n	800616a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006156:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	02da      	lsls	r2, r3, #11
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	4413      	add	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	d3dc      	bcc.n	8006124 <HAL_FLASHEx_Erase+0x188>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800616a:	4b04      	ldr	r3, [pc, #16]	@ (800617c <HAL_FLASHEx_Erase+0x1e0>)
 800616c:	2200      	movs	r2, #0
 800616e:	761a      	strb	r2, [r3, #24]

  return status;
 8006170:	7bfb      	ldrb	r3, [r7, #15]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3710      	adds	r7, #16
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000810 	.word	0x20000810
 8006180:	40022000 	.word	0x40022000
 8006184:	0807ffff 	.word	0x0807ffff

08006188 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006190:	4b1f      	ldr	r3, [pc, #124]	@ (8006210 <FLASH_MassErase+0x88>)
 8006192:	2200      	movs	r2, #0
 8006194:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(Banks == FLASH_BANK_BOTH)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d118      	bne.n	80061ce <FLASH_MassErase+0x46>
  {
    /* bank1 & bank2 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800619c:	4b1d      	ldr	r3, [pc, #116]	@ (8006214 <FLASH_MassErase+0x8c>)
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	4a1c      	ldr	r2, [pc, #112]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061a2:	f043 0304 	orr.w	r3, r3, #4
 80061a6:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 80061a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061ac:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061ae:	f043 0304 	orr.w	r3, r3, #4
 80061b2:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80061b4:	4b17      	ldr	r3, [pc, #92]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	4a16      	ldr	r2, [pc, #88]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061be:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 80061c0:	4b14      	ldr	r3, [pc, #80]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c4:	4a13      	ldr	r2, [pc, #76]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ca:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_MER);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80061cc:	e01b      	b.n	8006206 <FLASH_MassErase+0x7e>
  else if(Banks == FLASH_BANK_2)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d10c      	bne.n	80061ee <FLASH_MassErase+0x66>
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 80061d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061da:	f043 0304 	orr.w	r3, r3, #4
 80061de:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 80061e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ea:	6513      	str	r3, [r2, #80]	@ 0x50
}
 80061ec:	e00b      	b.n	8006206 <FLASH_MassErase+0x7e>
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80061ee:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	4a08      	ldr	r2, [pc, #32]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061f4:	f043 0304 	orr.w	r3, r3, #4
 80061f8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80061fa:	4b06      	ldr	r3, [pc, #24]	@ (8006214 <FLASH_MassErase+0x8c>)
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	4a05      	ldr	r2, [pc, #20]	@ (8006214 <FLASH_MassErase+0x8c>)
 8006200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006204:	6113      	str	r3, [r2, #16]
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr
 8006210:	20000810 	.word	0x20000810
 8006214:	40022000 	.word	0x40022000

08006218 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006220:	4b15      	ldr	r3, [pc, #84]	@ (8006278 <FLASH_PageErase+0x60>)
 8006222:	2200      	movs	r2, #0
 8006224:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(PageAddress > FLASH_BANK1_END)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a14      	ldr	r2, [pc, #80]	@ (800627c <FLASH_PageErase+0x64>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d90f      	bls.n	800624e <FLASH_PageErase+0x36>
  { 
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR2, FLASH_CR2_PER);
 800622e:	4b14      	ldr	r3, [pc, #80]	@ (8006280 <FLASH_PageErase+0x68>)
 8006230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006232:	4a13      	ldr	r2, [pc, #76]	@ (8006280 <FLASH_PageErase+0x68>)
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR2, PageAddress);
 800623a:	4a11      	ldr	r2, [pc, #68]	@ (8006280 <FLASH_PageErase+0x68>)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6553      	str	r3, [r2, #84]	@ 0x54
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8006240:	4b0f      	ldr	r3, [pc, #60]	@ (8006280 <FLASH_PageErase+0x68>)
 8006242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006244:	4a0e      	ldr	r2, [pc, #56]	@ (8006280 <FLASH_PageErase+0x68>)
 8006246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624a:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800624c:	e00e      	b.n	800626c <FLASH_PageErase+0x54>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800624e:	4b0c      	ldr	r3, [pc, #48]	@ (8006280 <FLASH_PageErase+0x68>)
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	4a0b      	ldr	r2, [pc, #44]	@ (8006280 <FLASH_PageErase+0x68>)
 8006254:	f043 0302 	orr.w	r3, r3, #2
 8006258:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800625a:	4a09      	ldr	r2, [pc, #36]	@ (8006280 <FLASH_PageErase+0x68>)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006260:	4b07      	ldr	r3, [pc, #28]	@ (8006280 <FLASH_PageErase+0x68>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4a06      	ldr	r2, [pc, #24]	@ (8006280 <FLASH_PageErase+0x68>)
 8006266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800626a:	6113      	str	r3, [r2, #16]
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	20000810 	.word	0x20000810
 800627c:	0807ffff 	.word	0x0807ffff
 8006280:	40022000 	.word	0x40022000

08006284 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006284:	b480      	push	{r7}
 8006286:	b08b      	sub	sp, #44	@ 0x2c
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006292:	2300      	movs	r3, #0
 8006294:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006296:	e179      	b.n	800658c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006298:	2201      	movs	r2, #1
 800629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69fa      	ldr	r2, [r7, #28]
 80062a8:	4013      	ands	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	f040 8168 	bne.w	8006586 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	4a96      	ldr	r2, [pc, #600]	@ (8006514 <HAL_GPIO_Init+0x290>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d05e      	beq.n	800637e <HAL_GPIO_Init+0xfa>
 80062c0:	4a94      	ldr	r2, [pc, #592]	@ (8006514 <HAL_GPIO_Init+0x290>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d875      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062c6:	4a94      	ldr	r2, [pc, #592]	@ (8006518 <HAL_GPIO_Init+0x294>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d058      	beq.n	800637e <HAL_GPIO_Init+0xfa>
 80062cc:	4a92      	ldr	r2, [pc, #584]	@ (8006518 <HAL_GPIO_Init+0x294>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d86f      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062d2:	4a92      	ldr	r2, [pc, #584]	@ (800651c <HAL_GPIO_Init+0x298>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d052      	beq.n	800637e <HAL_GPIO_Init+0xfa>
 80062d8:	4a90      	ldr	r2, [pc, #576]	@ (800651c <HAL_GPIO_Init+0x298>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d869      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062de:	4a90      	ldr	r2, [pc, #576]	@ (8006520 <HAL_GPIO_Init+0x29c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d04c      	beq.n	800637e <HAL_GPIO_Init+0xfa>
 80062e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006520 <HAL_GPIO_Init+0x29c>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d863      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062ea:	4a8e      	ldr	r2, [pc, #568]	@ (8006524 <HAL_GPIO_Init+0x2a0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d046      	beq.n	800637e <HAL_GPIO_Init+0xfa>
 80062f0:	4a8c      	ldr	r2, [pc, #560]	@ (8006524 <HAL_GPIO_Init+0x2a0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d85d      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062f6:	2b12      	cmp	r3, #18
 80062f8:	d82a      	bhi.n	8006350 <HAL_GPIO_Init+0xcc>
 80062fa:	2b12      	cmp	r3, #18
 80062fc:	d859      	bhi.n	80063b2 <HAL_GPIO_Init+0x12e>
 80062fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006304 <HAL_GPIO_Init+0x80>)
 8006300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006304:	0800637f 	.word	0x0800637f
 8006308:	08006359 	.word	0x08006359
 800630c:	0800636b 	.word	0x0800636b
 8006310:	080063ad 	.word	0x080063ad
 8006314:	080063b3 	.word	0x080063b3
 8006318:	080063b3 	.word	0x080063b3
 800631c:	080063b3 	.word	0x080063b3
 8006320:	080063b3 	.word	0x080063b3
 8006324:	080063b3 	.word	0x080063b3
 8006328:	080063b3 	.word	0x080063b3
 800632c:	080063b3 	.word	0x080063b3
 8006330:	080063b3 	.word	0x080063b3
 8006334:	080063b3 	.word	0x080063b3
 8006338:	080063b3 	.word	0x080063b3
 800633c:	080063b3 	.word	0x080063b3
 8006340:	080063b3 	.word	0x080063b3
 8006344:	080063b3 	.word	0x080063b3
 8006348:	08006361 	.word	0x08006361
 800634c:	08006375 	.word	0x08006375
 8006350:	4a75      	ldr	r2, [pc, #468]	@ (8006528 <HAL_GPIO_Init+0x2a4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006356:	e02c      	b.n	80063b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	623b      	str	r3, [r7, #32]
          break;
 800635e:	e029      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	623b      	str	r3, [r7, #32]
          break;
 8006368:	e024      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	3308      	adds	r3, #8
 8006370:	623b      	str	r3, [r7, #32]
          break;
 8006372:	e01f      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	330c      	adds	r3, #12
 800637a:	623b      	str	r3, [r7, #32]
          break;
 800637c:	e01a      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006386:	2304      	movs	r3, #4
 8006388:	623b      	str	r3, [r7, #32]
          break;
 800638a:	e013      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d105      	bne.n	80063a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006394:	2308      	movs	r3, #8
 8006396:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	69fa      	ldr	r2, [r7, #28]
 800639c:	611a      	str	r2, [r3, #16]
          break;
 800639e:	e009      	b.n	80063b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80063a0:	2308      	movs	r3, #8
 80063a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	615a      	str	r2, [r3, #20]
          break;
 80063aa:	e003      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80063ac:	2300      	movs	r3, #0
 80063ae:	623b      	str	r3, [r7, #32]
          break;
 80063b0:	e000      	b.n	80063b4 <HAL_GPIO_Init+0x130>
          break;
 80063b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	2bff      	cmp	r3, #255	@ 0xff
 80063b8:	d801      	bhi.n	80063be <HAL_GPIO_Init+0x13a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	e001      	b.n	80063c2 <HAL_GPIO_Init+0x13e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	2bff      	cmp	r3, #255	@ 0xff
 80063c8:	d802      	bhi.n	80063d0 <HAL_GPIO_Init+0x14c>
 80063ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	e002      	b.n	80063d6 <HAL_GPIO_Init+0x152>
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	3b08      	subs	r3, #8
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	210f      	movs	r1, #15
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	43db      	mvns	r3, r3
 80063e6:	401a      	ands	r2, r3
 80063e8:	6a39      	ldr	r1, [r7, #32]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	fa01 f303 	lsl.w	r3, r1, r3
 80063f0:	431a      	orrs	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80c1 	beq.w	8006586 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006404:	4b49      	ldr	r3, [pc, #292]	@ (800652c <HAL_GPIO_Init+0x2a8>)
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	4a48      	ldr	r2, [pc, #288]	@ (800652c <HAL_GPIO_Init+0x2a8>)
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	6193      	str	r3, [r2, #24]
 8006410:	4b46      	ldr	r3, [pc, #280]	@ (800652c <HAL_GPIO_Init+0x2a8>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800641c:	4a44      	ldr	r2, [pc, #272]	@ (8006530 <HAL_GPIO_Init+0x2ac>)
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	3302      	adds	r3, #2
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	220f      	movs	r2, #15
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	4013      	ands	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a3c      	ldr	r2, [pc, #240]	@ (8006534 <HAL_GPIO_Init+0x2b0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d01f      	beq.n	8006488 <HAL_GPIO_Init+0x204>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a3b      	ldr	r2, [pc, #236]	@ (8006538 <HAL_GPIO_Init+0x2b4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d019      	beq.n	8006484 <HAL_GPIO_Init+0x200>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a3a      	ldr	r2, [pc, #232]	@ (800653c <HAL_GPIO_Init+0x2b8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_GPIO_Init+0x1fc>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a39      	ldr	r2, [pc, #228]	@ (8006540 <HAL_GPIO_Init+0x2bc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00d      	beq.n	800647c <HAL_GPIO_Init+0x1f8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a38      	ldr	r2, [pc, #224]	@ (8006544 <HAL_GPIO_Init+0x2c0>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <HAL_GPIO_Init+0x1f4>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a37      	ldr	r2, [pc, #220]	@ (8006548 <HAL_GPIO_Init+0x2c4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_GPIO_Init+0x1f0>
 8006470:	2305      	movs	r3, #5
 8006472:	e00a      	b.n	800648a <HAL_GPIO_Init+0x206>
 8006474:	2306      	movs	r3, #6
 8006476:	e008      	b.n	800648a <HAL_GPIO_Init+0x206>
 8006478:	2304      	movs	r3, #4
 800647a:	e006      	b.n	800648a <HAL_GPIO_Init+0x206>
 800647c:	2303      	movs	r3, #3
 800647e:	e004      	b.n	800648a <HAL_GPIO_Init+0x206>
 8006480:	2302      	movs	r3, #2
 8006482:	e002      	b.n	800648a <HAL_GPIO_Init+0x206>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_GPIO_Init+0x206>
 8006488:	2300      	movs	r3, #0
 800648a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800648c:	f002 0203 	and.w	r2, r2, #3
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	4093      	lsls	r3, r2
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800649a:	4925      	ldr	r1, [pc, #148]	@ (8006530 <HAL_GPIO_Init+0x2ac>)
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	3302      	adds	r3, #2
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80064b4:	4b25      	ldr	r3, [pc, #148]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	4924      	ldr	r1, [pc, #144]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	608b      	str	r3, [r1, #8]
 80064c0:	e006      	b.n	80064d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80064c2:	4b22      	ldr	r3, [pc, #136]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	4920      	ldr	r1, [pc, #128]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064cc:	4013      	ands	r3, r2
 80064ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d006      	beq.n	80064ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80064dc:	4b1b      	ldr	r3, [pc, #108]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	491a      	ldr	r1, [pc, #104]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60cb      	str	r3, [r1, #12]
 80064e8:	e006      	b.n	80064f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80064ea:	4b18      	ldr	r3, [pc, #96]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	4916      	ldr	r1, [pc, #88]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006500:	2b00      	cmp	r3, #0
 8006502:	d025      	beq.n	8006550 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006504:	4b11      	ldr	r3, [pc, #68]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4910      	ldr	r1, [pc, #64]	@ (800654c <HAL_GPIO_Init+0x2c8>)
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	4313      	orrs	r3, r2
 800650e:	604b      	str	r3, [r1, #4]
 8006510:	e025      	b.n	800655e <HAL_GPIO_Init+0x2da>
 8006512:	bf00      	nop
 8006514:	10320000 	.word	0x10320000
 8006518:	10310000 	.word	0x10310000
 800651c:	10220000 	.word	0x10220000
 8006520:	10210000 	.word	0x10210000
 8006524:	10120000 	.word	0x10120000
 8006528:	10110000 	.word	0x10110000
 800652c:	40021000 	.word	0x40021000
 8006530:	40010000 	.word	0x40010000
 8006534:	40010800 	.word	0x40010800
 8006538:	40010c00 	.word	0x40010c00
 800653c:	40011000 	.word	0x40011000
 8006540:	40011400 	.word	0x40011400
 8006544:	40011800 	.word	0x40011800
 8006548:	40011c00 	.word	0x40011c00
 800654c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006550:	4b15      	ldr	r3, [pc, #84]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	43db      	mvns	r3, r3
 8006558:	4913      	ldr	r1, [pc, #76]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 800655a:	4013      	ands	r3, r2
 800655c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800656a:	4b0f      	ldr	r3, [pc, #60]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	490e      	ldr	r1, [pc, #56]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	4313      	orrs	r3, r2
 8006574:	600b      	str	r3, [r1, #0]
 8006576:	e006      	b.n	8006586 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006578:	4b0b      	ldr	r3, [pc, #44]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	43db      	mvns	r3, r3
 8006580:	4909      	ldr	r1, [pc, #36]	@ (80065a8 <HAL_GPIO_Init+0x324>)
 8006582:	4013      	ands	r3, r2
 8006584:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	3301      	adds	r3, #1
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	fa22 f303 	lsr.w	r3, r2, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f ae7e 	bne.w	8006298 <HAL_GPIO_Init+0x14>
  }
}
 800659c:	bf00      	nop
 800659e:	bf00      	nop
 80065a0:	372c      	adds	r7, #44	@ 0x2c
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr
 80065a8:	40010400 	.word	0x40010400

080065ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	807b      	strh	r3, [r7, #2]
 80065b8:	4613      	mov	r3, r2
 80065ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065bc:	787b      	ldrb	r3, [r7, #1]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065c2:	887a      	ldrh	r2, [r7, #2]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80065c8:	e003      	b.n	80065d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80065ca:	887b      	ldrh	r3, [r7, #2]
 80065cc:	041a      	lsls	r2, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	611a      	str	r2, [r3, #16]
}
 80065d2:	bf00      	nop
 80065d4:	370c      	adds	r7, #12
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bc80      	pop	{r7}
 80065da:	4770      	bx	lr

080065dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b086      	sub	sp, #24
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e272      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8087 	beq.w	800670a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80065fc:	4b92      	ldr	r3, [pc, #584]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 030c 	and.w	r3, r3, #12
 8006604:	2b04      	cmp	r3, #4
 8006606:	d00c      	beq.n	8006622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006608:	4b8f      	ldr	r3, [pc, #572]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b08      	cmp	r3, #8
 8006612:	d112      	bne.n	800663a <HAL_RCC_OscConfig+0x5e>
 8006614:	4b8c      	ldr	r3, [pc, #560]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006620:	d10b      	bne.n	800663a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006622:	4b89      	ldr	r3, [pc, #548]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800662a:	2b00      	cmp	r3, #0
 800662c:	d06c      	beq.n	8006708 <HAL_RCC_OscConfig+0x12c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d168      	bne.n	8006708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e24c      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006642:	d106      	bne.n	8006652 <HAL_RCC_OscConfig+0x76>
 8006644:	4b80      	ldr	r3, [pc, #512]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a7f      	ldr	r2, [pc, #508]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800664a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800664e:	6013      	str	r3, [r2, #0]
 8006650:	e02e      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10c      	bne.n	8006674 <HAL_RCC_OscConfig+0x98>
 800665a:	4b7b      	ldr	r3, [pc, #492]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7a      	ldr	r2, [pc, #488]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006664:	6013      	str	r3, [r2, #0]
 8006666:	4b78      	ldr	r3, [pc, #480]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a77      	ldr	r2, [pc, #476]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800666c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006670:	6013      	str	r3, [r2, #0]
 8006672:	e01d      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800667c:	d10c      	bne.n	8006698 <HAL_RCC_OscConfig+0xbc>
 800667e:	4b72      	ldr	r3, [pc, #456]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a71      	ldr	r2, [pc, #452]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006684:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	4b6f      	ldr	r3, [pc, #444]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a6e      	ldr	r2, [pc, #440]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	e00b      	b.n	80066b0 <HAL_RCC_OscConfig+0xd4>
 8006698:	4b6b      	ldr	r3, [pc, #428]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6a      	ldr	r2, [pc, #424]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800669e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	4b68      	ldr	r3, [pc, #416]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a67      	ldr	r2, [pc, #412]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d013      	beq.n	80066e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066b8:	f7fe f82e 	bl	8004718 <HAL_GetTick>
 80066bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c0:	f7fe f82a 	bl	8004718 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b64      	cmp	r3, #100	@ 0x64
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e200      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d2:	4b5d      	ldr	r3, [pc, #372]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f0      	beq.n	80066c0 <HAL_RCC_OscConfig+0xe4>
 80066de:	e014      	b.n	800670a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e0:	f7fe f81a 	bl	8004718 <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066e8:	f7fe f816 	bl	8004718 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b64      	cmp	r3, #100	@ 0x64
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e1ec      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fa:	4b53      	ldr	r3, [pc, #332]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x10c>
 8006706:	e000      	b.n	800670a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d063      	beq.n	80067de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006716:	4b4c      	ldr	r3, [pc, #304]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 030c 	and.w	r3, r3, #12
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00b      	beq.n	800673a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006722:	4b49      	ldr	r3, [pc, #292]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f003 030c 	and.w	r3, r3, #12
 800672a:	2b08      	cmp	r3, #8
 800672c:	d11c      	bne.n	8006768 <HAL_RCC_OscConfig+0x18c>
 800672e:	4b46      	ldr	r3, [pc, #280]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d116      	bne.n	8006768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800673a:	4b43      	ldr	r3, [pc, #268]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_RCC_OscConfig+0x176>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d001      	beq.n	8006752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e1c0      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006752:	4b3d      	ldr	r3, [pc, #244]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4939      	ldr	r1, [pc, #228]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006762:	4313      	orrs	r3, r2
 8006764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006766:	e03a      	b.n	80067de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d020      	beq.n	80067b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006770:	4b36      	ldr	r3, [pc, #216]	@ (800684c <HAL_RCC_OscConfig+0x270>)
 8006772:	2201      	movs	r2, #1
 8006774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006776:	f7fd ffcf 	bl	8004718 <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800677e:	f7fd ffcb 	bl	8004718 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e1a1      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006790:	4b2d      	ldr	r3, [pc, #180]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800679c:	4b2a      	ldr	r3, [pc, #168]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	00db      	lsls	r3, r3, #3
 80067aa:	4927      	ldr	r1, [pc, #156]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	600b      	str	r3, [r1, #0]
 80067b0:	e015      	b.n	80067de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067b2:	4b26      	ldr	r3, [pc, #152]	@ (800684c <HAL_RCC_OscConfig+0x270>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067b8:	f7fd ffae 	bl	8004718 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c0:	f7fd ffaa 	bl	8004718 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e180      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d2:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0302 	and.w	r3, r3, #2
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f0      	bne.n	80067c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d03a      	beq.n	8006860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d019      	beq.n	8006826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067f2:	4b17      	ldr	r3, [pc, #92]	@ (8006850 <HAL_RCC_OscConfig+0x274>)
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067f8:	f7fd ff8e 	bl	8004718 <HAL_GetTick>
 80067fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006800:	f7fd ff8a 	bl	8004718 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e160      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006812:	4b0d      	ldr	r3, [pc, #52]	@ (8006848 <HAL_RCC_OscConfig+0x26c>)
 8006814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0f0      	beq.n	8006800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800681e:	2001      	movs	r0, #1
 8006820:	f000 face 	bl	8006dc0 <RCC_Delay>
 8006824:	e01c      	b.n	8006860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006826:	4b0a      	ldr	r3, [pc, #40]	@ (8006850 <HAL_RCC_OscConfig+0x274>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800682c:	f7fd ff74 	bl	8004718 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006832:	e00f      	b.n	8006854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006834:	f7fd ff70 	bl	8004718 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d908      	bls.n	8006854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e146      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
 8006846:	bf00      	nop
 8006848:	40021000 	.word	0x40021000
 800684c:	42420000 	.word	0x42420000
 8006850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006854:	4b92      	ldr	r3, [pc, #584]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e9      	bne.n	8006834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80a6 	beq.w	80069ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800686e:	2300      	movs	r3, #0
 8006870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006872:	4b8b      	ldr	r3, [pc, #556]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10d      	bne.n	800689a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800687e:	4b88      	ldr	r3, [pc, #544]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	4a87      	ldr	r2, [pc, #540]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006888:	61d3      	str	r3, [r2, #28]
 800688a:	4b85      	ldr	r3, [pc, #532]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006892:	60bb      	str	r3, [r7, #8]
 8006894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006896:	2301      	movs	r3, #1
 8006898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800689a:	4b82      	ldr	r3, [pc, #520]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d118      	bne.n	80068d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068a6:	4b7f      	ldr	r3, [pc, #508]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a7e      	ldr	r2, [pc, #504]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068b2:	f7fd ff31 	bl	8004718 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068b8:	e008      	b.n	80068cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ba:	f7fd ff2d 	bl	8004718 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	2b64      	cmp	r3, #100	@ 0x64
 80068c6:	d901      	bls.n	80068cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e103      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	4b75      	ldr	r3, [pc, #468]	@ (8006aa4 <HAL_RCC_OscConfig+0x4c8>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0f0      	beq.n	80068ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d106      	bne.n	80068ee <HAL_RCC_OscConfig+0x312>
 80068e0:	4b6f      	ldr	r3, [pc, #444]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4a6e      	ldr	r2, [pc, #440]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	6213      	str	r3, [r2, #32]
 80068ec:	e02d      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d10c      	bne.n	8006910 <HAL_RCC_OscConfig+0x334>
 80068f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	4a69      	ldr	r2, [pc, #420]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80068fc:	f023 0301 	bic.w	r3, r3, #1
 8006900:	6213      	str	r3, [r2, #32]
 8006902:	4b67      	ldr	r3, [pc, #412]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	4a66      	ldr	r2, [pc, #408]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006908:	f023 0304 	bic.w	r3, r3, #4
 800690c:	6213      	str	r3, [r2, #32]
 800690e:	e01c      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	2b05      	cmp	r3, #5
 8006916:	d10c      	bne.n	8006932 <HAL_RCC_OscConfig+0x356>
 8006918:	4b61      	ldr	r3, [pc, #388]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	4a60      	ldr	r2, [pc, #384]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800691e:	f043 0304 	orr.w	r3, r3, #4
 8006922:	6213      	str	r3, [r2, #32]
 8006924:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	4a5d      	ldr	r2, [pc, #372]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6213      	str	r3, [r2, #32]
 8006930:	e00b      	b.n	800694a <HAL_RCC_OscConfig+0x36e>
 8006932:	4b5b      	ldr	r3, [pc, #364]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	4a5a      	ldr	r2, [pc, #360]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006938:	f023 0301 	bic.w	r3, r3, #1
 800693c:	6213      	str	r3, [r2, #32]
 800693e:	4b58      	ldr	r3, [pc, #352]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	4a57      	ldr	r2, [pc, #348]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d015      	beq.n	800697e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006952:	f7fd fee1 	bl	8004718 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006958:	e00a      	b.n	8006970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800695a:	f7fd fedd 	bl	8004718 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e0b1      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006970:	4b4b      	ldr	r3, [pc, #300]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ee      	beq.n	800695a <HAL_RCC_OscConfig+0x37e>
 800697c:	e014      	b.n	80069a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800697e:	f7fd fecb 	bl	8004718 <HAL_GetTick>
 8006982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006984:	e00a      	b.n	800699c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006986:	f7fd fec7 	bl	8004718 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006994:	4293      	cmp	r3, r2
 8006996:	d901      	bls.n	800699c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e09b      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1ee      	bne.n	8006986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069a8:	7dfb      	ldrb	r3, [r7, #23]
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d105      	bne.n	80069ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ae:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	4a3b      	ldr	r2, [pc, #236]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8087 	beq.w	8006ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069c4:	4b36      	ldr	r3, [pc, #216]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d061      	beq.n	8006a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d146      	bne.n	8006a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d8:	4b33      	ldr	r3, [pc, #204]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 80069da:	2200      	movs	r2, #0
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069de:	f7fd fe9b 	bl	8004718 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069e6:	f7fd fe97 	bl	8004718 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e06d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069f8:	4b29      	ldr	r3, [pc, #164]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1f0      	bne.n	80069e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a0c:	d108      	bne.n	8006a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a0e:	4b24      	ldr	r3, [pc, #144]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	4921      	ldr	r1, [pc, #132]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a20:	4b1f      	ldr	r3, [pc, #124]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a19      	ldr	r1, [r3, #32]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a30:	430b      	orrs	r3, r1
 8006a32:	491b      	ldr	r1, [pc, #108]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a38:	4b1b      	ldr	r3, [pc, #108]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a3e:	f7fd fe6b 	bl	8004718 <HAL_GetTick>
 8006a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a46:	f7fd fe67 	bl	8004718 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e03d      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <HAL_RCC_OscConfig+0x46a>
 8006a64:	e035      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a66:	4b10      	ldr	r3, [pc, #64]	@ (8006aa8 <HAL_RCC_OscConfig+0x4cc>)
 8006a68:	2200      	movs	r2, #0
 8006a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a6c:	f7fd fe54 	bl	8004718 <HAL_GetTick>
 8006a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a72:	e008      	b.n	8006a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a74:	f7fd fe50 	bl	8004718 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	2b02      	cmp	r3, #2
 8006a80:	d901      	bls.n	8006a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e026      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a86:	4b06      	ldr	r3, [pc, #24]	@ (8006aa0 <HAL_RCC_OscConfig+0x4c4>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1f0      	bne.n	8006a74 <HAL_RCC_OscConfig+0x498>
 8006a92:	e01e      	b.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	69db      	ldr	r3, [r3, #28]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d107      	bne.n	8006aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e019      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
 8006aa0:	40021000 	.word	0x40021000
 8006aa4:	40007000 	.word	0x40007000
 8006aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006aac:	4b0b      	ldr	r3, [pc, #44]	@ (8006adc <HAL_RCC_OscConfig+0x500>)
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	40021000 	.word	0x40021000

08006ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d101      	bne.n	8006af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006af0:	2301      	movs	r3, #1
 8006af2:	e0d0      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af4:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0307 	and.w	r3, r3, #7
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d910      	bls.n	8006b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b02:	4b67      	ldr	r3, [pc, #412]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f023 0207 	bic.w	r2, r3, #7
 8006b0a:	4965      	ldr	r1, [pc, #404]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b12:	4b63      	ldr	r3, [pc, #396]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0307 	and.w	r3, r3, #7
 8006b1a:	683a      	ldr	r2, [r7, #0]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d001      	beq.n	8006b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e0b8      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0302 	and.w	r3, r3, #2
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d020      	beq.n	8006b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0304 	and.w	r3, r3, #4
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b3c:	4b59      	ldr	r3, [pc, #356]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	4a58      	ldr	r2, [pc, #352]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 0308 	and.w	r3, r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b54:	4b53      	ldr	r3, [pc, #332]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a52      	ldr	r2, [pc, #328]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b60:	4b50      	ldr	r3, [pc, #320]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	494d      	ldr	r1, [pc, #308]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d040      	beq.n	8006c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	685b      	ldr	r3, [r3, #4]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d107      	bne.n	8006b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b86:	4b47      	ldr	r3, [pc, #284]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d115      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e07f      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d107      	bne.n	8006bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b9e:	4b41      	ldr	r3, [pc, #260]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e073      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bae:	4b3d      	ldr	r3, [pc, #244]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e06b      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bbe:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f023 0203 	bic.w	r2, r3, #3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	4936      	ldr	r1, [pc, #216]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd0:	f7fd fda2 	bl	8004718 <HAL_GetTick>
 8006bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bd6:	e00a      	b.n	8006bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bd8:	f7fd fd9e 	bl	8004718 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e053      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bee:	4b2d      	ldr	r3, [pc, #180]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f003 020c 	and.w	r2, r3, #12
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d1eb      	bne.n	8006bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c00:	4b27      	ldr	r3, [pc, #156]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0307 	and.w	r3, r3, #7
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d210      	bcs.n	8006c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0e:	4b24      	ldr	r3, [pc, #144]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f023 0207 	bic.w	r2, r3, #7
 8006c16:	4922      	ldr	r1, [pc, #136]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1e:	4b20      	ldr	r3, [pc, #128]	@ (8006ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d001      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e032      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d008      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c3c:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4916      	ldr	r1, [pc, #88]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0308 	and.w	r3, r3, #8
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c5a:	4b12      	ldr	r3, [pc, #72]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	490e      	ldr	r1, [pc, #56]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c6e:	f000 f821 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 8006c72:	4602      	mov	r2, r0
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	091b      	lsrs	r3, r3, #4
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	490a      	ldr	r1, [pc, #40]	@ (8006ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8006c80:	5ccb      	ldrb	r3, [r1, r3]
 8006c82:	fa22 f303 	lsr.w	r3, r2, r3
 8006c86:	4a09      	ldr	r2, [pc, #36]	@ (8006cac <HAL_RCC_ClockConfig+0x1cc>)
 8006c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c8a:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fd fd00 	bl	8004694 <HAL_InitTick>

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40022000 	.word	0x40022000
 8006ca4:	40021000 	.word	0x40021000
 8006ca8:	08009538 	.word	0x08009538
 8006cac:	20000000 	.word	0x20000000
 8006cb0:	2000018c 	.word	0x2000018c

08006cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	60fb      	str	r3, [r7, #12]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	60bb      	str	r3, [r7, #8]
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	617b      	str	r3, [r7, #20]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006cce:	4b1e      	ldr	r3, [pc, #120]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 030c 	and.w	r3, r3, #12
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d002      	beq.n	8006ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8006cde:	2b08      	cmp	r3, #8
 8006ce0:	d003      	beq.n	8006cea <HAL_RCC_GetSysClockFreq+0x36>
 8006ce2:	e027      	b.n	8006d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ce4:	4b19      	ldr	r3, [pc, #100]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ce6:	613b      	str	r3, [r7, #16]
      break;
 8006ce8:	e027      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	0c9b      	lsrs	r3, r3, #18
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	4a17      	ldr	r2, [pc, #92]	@ (8006d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006cf4:	5cd3      	ldrb	r3, [r2, r3]
 8006cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d010      	beq.n	8006d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d02:	4b11      	ldr	r3, [pc, #68]	@ (8006d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	0c5b      	lsrs	r3, r3, #17
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	4a11      	ldr	r2, [pc, #68]	@ (8006d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006d0e:	5cd3      	ldrb	r3, [r2, r3]
 8006d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a0d      	ldr	r2, [pc, #52]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006d16:	fb03 f202 	mul.w	r2, r3, r2
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	e004      	b.n	8006d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a0c      	ldr	r2, [pc, #48]	@ (8006d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	613b      	str	r3, [r7, #16]
      break;
 8006d32:	e002      	b.n	8006d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d34:	4b05      	ldr	r3, [pc, #20]	@ (8006d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8006d36:	613b      	str	r3, [r7, #16]
      break;
 8006d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d3a:	693b      	ldr	r3, [r7, #16]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40021000 	.word	0x40021000
 8006d4c:	007a1200 	.word	0x007a1200
 8006d50:	08009ac0 	.word	0x08009ac0
 8006d54:	08009ad0 	.word	0x08009ad0
 8006d58:	003d0900 	.word	0x003d0900

08006d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d60:	4b02      	ldr	r3, [pc, #8]	@ (8006d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d62:	681b      	ldr	r3, [r3, #0]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr
 8006d6c:	20000000 	.word	0x20000000

08006d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d74:	f7ff fff2 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	0a1b      	lsrs	r3, r3, #8
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	4903      	ldr	r1, [pc, #12]	@ (8006d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d86:	5ccb      	ldrb	r3, [r1, r3]
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40021000 	.word	0x40021000
 8006d94:	08009548 	.word	0x08009548

08006d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006d9c:	f7ff ffde 	bl	8006d5c <HAL_RCC_GetHCLKFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b05      	ldr	r3, [pc, #20]	@ (8006db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	0adb      	lsrs	r3, r3, #11
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	4903      	ldr	r1, [pc, #12]	@ (8006dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	08009548 	.word	0x08009548

08006dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8006df4 <RCC_Delay+0x34>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8006df8 <RCC_Delay+0x38>)
 8006dce:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd2:	0a5b      	lsrs	r3, r3, #9
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	fb02 f303 	mul.w	r3, r2, r3
 8006dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006ddc:	bf00      	nop
  }
  while (Delay --);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	1e5a      	subs	r2, r3, #1
 8006de2:	60fa      	str	r2, [r7, #12]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d1f9      	bne.n	8006ddc <RCC_Delay+0x1c>
}
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	20000000 	.word	0x20000000
 8006df8:	10624dd3 	.word	0x10624dd3

08006dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b086      	sub	sp, #24
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	613b      	str	r3, [r7, #16]
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d07d      	beq.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e1c:	4b4f      	ldr	r3, [pc, #316]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e28:	4b4c      	ldr	r3, [pc, #304]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	4a4b      	ldr	r2, [pc, #300]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e32:	61d3      	str	r3, [r2, #28]
 8006e34:	4b49      	ldr	r3, [pc, #292]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e3c:	60bb      	str	r3, [r7, #8]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e40:	2301      	movs	r3, #1
 8006e42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e44:	4b46      	ldr	r3, [pc, #280]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d118      	bne.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e50:	4b43      	ldr	r3, [pc, #268]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a42      	ldr	r2, [pc, #264]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e5c:	f7fd fc5c 	bl	8004718 <HAL_GetTick>
 8006e60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e62:	e008      	b.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e64:	f7fd fc58 	bl	8004718 <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	2b64      	cmp	r3, #100	@ 0x64
 8006e70:	d901      	bls.n	8006e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e72:	2303      	movs	r3, #3
 8006e74:	e06d      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e76:	4b3a      	ldr	r3, [pc, #232]	@ (8006f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d0f0      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006e82:	4b36      	ldr	r3, [pc, #216]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e84:	6a1b      	ldr	r3, [r3, #32]
 8006e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d02e      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e9a:	68fa      	ldr	r2, [r7, #12]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d027      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eac:	2201      	movs	r2, #1
 8006eae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006eb6:	4a29      	ldr	r2, [pc, #164]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d014      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ec6:	f7fd fc27 	bl	8004718 <HAL_GetTick>
 8006eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ecc:	e00a      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ece:	f7fd fc23 	bl	8004718 <HAL_GetTick>
 8006ed2:	4602      	mov	r2, r0
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d901      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e036      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ee6:	6a1b      	ldr	r3, [r3, #32]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ee      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ef2:	6a1b      	ldr	r3, [r3, #32]
 8006ef4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	4917      	ldr	r1, [pc, #92]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d105      	bne.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f08:	4b14      	ldr	r3, [pc, #80]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	4a13      	ldr	r2, [pc, #76]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d008      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f20:	4b0e      	ldr	r3, [pc, #56]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	490b      	ldr	r1, [pc, #44]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d008      	beq.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f3e:	4b07      	ldr	r3, [pc, #28]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	695b      	ldr	r3, [r3, #20]
 8006f4a:	4904      	ldr	r1, [pc, #16]	@ (8006f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3718      	adds	r7, #24
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40021000 	.word	0x40021000
 8006f60:	40007000 	.word	0x40007000
 8006f64:	42420440 	.word	0x42420440

08006f68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b088      	sub	sp, #32
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006f70:	2300      	movs	r3, #0
 8006f72:	617b      	str	r3, [r7, #20]
 8006f74:	2300      	movs	r3, #0
 8006f76:	61fb      	str	r3, [r7, #28]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	2300      	movs	r3, #0
 8006f82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	2b0f      	cmp	r3, #15
 8006f8a:	f200 80af 	bhi.w	80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8006f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f94:	0800706b 	.word	0x0800706b
 8006f98:	080070d1 	.word	0x080070d1
 8006f9c:	080070ed 	.word	0x080070ed
 8006fa0:	0800705b 	.word	0x0800705b
 8006fa4:	080070ed 	.word	0x080070ed
 8006fa8:	080070ed 	.word	0x080070ed
 8006fac:	080070ed 	.word	0x080070ed
 8006fb0:	08007063 	.word	0x08007063
 8006fb4:	080070ed 	.word	0x080070ed
 8006fb8:	080070ed 	.word	0x080070ed
 8006fbc:	080070ed 	.word	0x080070ed
 8006fc0:	080070ed 	.word	0x080070ed
 8006fc4:	080070ed 	.word	0x080070ed
 8006fc8:	080070ed 	.word	0x080070ed
 8006fcc:	080070ed 	.word	0x080070ed
 8006fd0:	08006fd5 	.word	0x08006fd5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fda:	4b49      	ldr	r3, [pc, #292]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	f000 8084 	beq.w	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	0c9b      	lsrs	r3, r3, #18
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	4a44      	ldr	r2, [pc, #272]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8006ff2:	5cd3      	ldrb	r3, [r2, r3]
 8006ff4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d015      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007000:	4b3f      	ldr	r3, [pc, #252]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	0c5b      	lsrs	r3, r3, #17
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	4a3f      	ldr	r2, [pc, #252]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00d      	beq.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800701a:	4a3c      	ldr	r2, [pc, #240]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	61fb      	str	r3, [r7, #28]
 800702a:	e004      	b.n	8007036 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	4a38      	ldr	r2, [pc, #224]	@ (8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007030:	fb02 f303 	mul.w	r3, r2, r3
 8007034:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007036:	4b32      	ldr	r3, [pc, #200]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800703e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007048:	e052      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	4a31      	ldr	r2, [pc, #196]	@ (8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007050:	fba2 2303 	umull	r2, r3, r2, r3
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	61bb      	str	r3, [r7, #24]
      break;
 8007058:	e04a      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800705a:	f7ff fe2b 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 800705e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007060:	e049      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007062:	f7ff fe27 	bl	8006cb4 <HAL_RCC_GetSysClockFreq>
 8007066:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007068:	e045      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800706a:	4b25      	ldr	r3, [pc, #148]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007076:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800707a:	d108      	bne.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d003      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800708a:	61bb      	str	r3, [r7, #24]
 800708c:	e01f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007098:	d109      	bne.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800709a:	4b19      	ldr	r3, [pc, #100]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800709c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d003      	beq.n	80070ae <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80070a6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80070aa:	61bb      	str	r3, [r7, #24]
 80070ac:	e00f      	b.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80070b8:	d11c      	bne.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80070ba:	4b11      	ldr	r3, [pc, #68]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d016      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80070c6:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80070ca:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80070cc:	e012      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80070ce:	e011      	b.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070d0:	f7ff fe62 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 80070d4:	4602      	mov	r2, r0
 80070d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	0b9b      	lsrs	r3, r3, #14
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	3301      	adds	r3, #1
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e8:	61bb      	str	r3, [r7, #24]
      break;
 80070ea:	e004      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80070ec:	bf00      	nop
 80070ee:	e002      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80070f4:	bf00      	nop
    }
  }
  return (frequency);
 80070f6:	69bb      	ldr	r3, [r7, #24]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3720      	adds	r7, #32
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40021000 	.word	0x40021000
 8007104:	08009ad4 	.word	0x08009ad4
 8007108:	08009ae4 	.word	0x08009ae4
 800710c:	007a1200 	.word	0x007a1200
 8007110:	003d0900 	.word	0x003d0900
 8007114:	aaaaaaab 	.word	0xaaaaaaab

08007118 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e041      	b.n	80071ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007130:	b2db      	uxtb	r3, r3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d106      	bne.n	8007144 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7fa ffa0 	bl	8002084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3304      	adds	r3, #4
 8007154:	4619      	mov	r1, r3
 8007156:	4610      	mov	r0, r2
 8007158:	f000 fd56 	bl	8007c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d001      	beq.n	80071d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e046      	b.n	800725e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a22      	ldr	r2, [pc, #136]	@ (8007268 <HAL_TIM_Base_Start+0xb0>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d022      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a21      	ldr	r2, [pc, #132]	@ (800726c <HAL_TIM_Base_Start+0xb4>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d01d      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071f4:	d018      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007270 <HAL_TIM_Base_Start+0xb8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d013      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a1b      	ldr	r2, [pc, #108]	@ (8007274 <HAL_TIM_Base_Start+0xbc>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00e      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a1a      	ldr	r2, [pc, #104]	@ (8007278 <HAL_TIM_Base_Start+0xc0>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a18      	ldr	r2, [pc, #96]	@ (800727c <HAL_TIM_Base_Start+0xc4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <HAL_TIM_Base_Start+0x70>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a17      	ldr	r2, [pc, #92]	@ (8007280 <HAL_TIM_Base_Start+0xc8>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d111      	bne.n	800724c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b06      	cmp	r3, #6
 8007238:	d010      	beq.n	800725c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800724a:	e007      	b.n	800725c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40013400 	.word	0x40013400
 8007270:	40000400 	.word	0x40000400
 8007274:	40000800 	.word	0x40000800
 8007278:	40000c00 	.word	0x40000c00
 800727c:	40014c00 	.word	0x40014c00
 8007280:	40001800 	.word	0x40001800

08007284 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6a1a      	ldr	r2, [r3, #32]
 8007292:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d10f      	bne.n	80072bc <HAL_TIM_Base_Stop+0x38>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a1a      	ldr	r2, [r3, #32]
 80072a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80072a6:	4013      	ands	r3, r2
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d107      	bne.n	80072bc <HAL_TIM_Base_Stop+0x38>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f022 0201 	bic.w	r2, r2, #1
 80072ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d001      	beq.n	80072e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e04e      	b.n	8007386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68da      	ldr	r2, [r3, #12]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a22      	ldr	r2, [pc, #136]	@ (8007390 <HAL_TIM_Base_Start_IT+0xc0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d022      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a21      	ldr	r2, [pc, #132]	@ (8007394 <HAL_TIM_Base_Start_IT+0xc4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d01d      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800731c:	d018      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a1d      	ldr	r2, [pc, #116]	@ (8007398 <HAL_TIM_Base_Start_IT+0xc8>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d013      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a1b      	ldr	r2, [pc, #108]	@ (800739c <HAL_TIM_Base_Start_IT+0xcc>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d00e      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a1a      	ldr	r2, [pc, #104]	@ (80073a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d009      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d004      	beq.n	8007350 <HAL_TIM_Base_Start_IT+0x80>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a17      	ldr	r2, [pc, #92]	@ (80073a8 <HAL_TIM_Base_Start_IT+0xd8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d111      	bne.n	8007374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	f003 0307 	and.w	r3, r3, #7
 800735a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b06      	cmp	r3, #6
 8007360:	d010      	beq.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f042 0201 	orr.w	r2, r2, #1
 8007370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007372:	e007      	b.n	8007384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3714      	adds	r7, #20
 800738a:	46bd      	mov	sp, r7
 800738c:	bc80      	pop	{r7}
 800738e:	4770      	bx	lr
 8007390:	40012c00 	.word	0x40012c00
 8007394:	40013400 	.word	0x40013400
 8007398:	40000400 	.word	0x40000400
 800739c:	40000800 	.word	0x40000800
 80073a0:	40000c00 	.word	0x40000c00
 80073a4:	40014c00 	.word	0x40014c00
 80073a8:	40001800 	.word	0x40001800

080073ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e041      	b.n	8007442 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f839 	bl	800744a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3304      	adds	r3, #4
 80073e8:	4619      	mov	r1, r3
 80073ea:	4610      	mov	r0, r2
 80073ec:	f000 fc0c 	bl	8007c08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr

0800745c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d109      	bne.n	8007480 <HAL_TIM_PWM_Start+0x24>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b01      	cmp	r3, #1
 8007476:	bf14      	ite	ne
 8007478:	2301      	movne	r3, #1
 800747a:	2300      	moveq	r3, #0
 800747c:	b2db      	uxtb	r3, r3
 800747e:	e022      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	2b04      	cmp	r3, #4
 8007484:	d109      	bne.n	800749a <HAL_TIM_PWM_Start+0x3e>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b01      	cmp	r3, #1
 8007490:	bf14      	ite	ne
 8007492:	2301      	movne	r3, #1
 8007494:	2300      	moveq	r3, #0
 8007496:	b2db      	uxtb	r3, r3
 8007498:	e015      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	2b08      	cmp	r3, #8
 800749e:	d109      	bne.n	80074b4 <HAL_TIM_PWM_Start+0x58>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	bf14      	ite	ne
 80074ac:	2301      	movne	r3, #1
 80074ae:	2300      	moveq	r3, #0
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	e008      	b.n	80074c6 <HAL_TIM_PWM_Start+0x6a>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d001      	beq.n	80074ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e07c      	b.n	80075c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <HAL_TIM_PWM_Start+0x82>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074dc:	e013      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_PWM_Start+0x92>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074ec:	e00b      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_PWM_Start+0xa2>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2202      	movs	r2, #2
 80074f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074fc:	e003      	b.n	8007506 <HAL_TIM_PWM_Start+0xaa>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2202      	movs	r2, #2
 8007502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2201      	movs	r2, #1
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	4618      	mov	r0, r3
 8007510:	f000 fe66 	bl	80081e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2d      	ldr	r2, [pc, #180]	@ (80075d0 <HAL_TIM_PWM_Start+0x174>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_TIM_PWM_Start+0xcc>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2c      	ldr	r2, [pc, #176]	@ (80075d4 <HAL_TIM_PWM_Start+0x178>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d101      	bne.n	800752c <HAL_TIM_PWM_Start+0xd0>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <HAL_TIM_PWM_Start+0xd2>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d007      	beq.n	8007542 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007540:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <HAL_TIM_PWM_Start+0x174>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d022      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a20      	ldr	r2, [pc, #128]	@ (80075d4 <HAL_TIM_PWM_Start+0x178>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01d      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800755e:	d018      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1c      	ldr	r2, [pc, #112]	@ (80075d8 <HAL_TIM_PWM_Start+0x17c>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d013      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1b      	ldr	r2, [pc, #108]	@ (80075dc <HAL_TIM_PWM_Start+0x180>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d00e      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <HAL_TIM_PWM_Start+0x184>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d009      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <HAL_TIM_PWM_Start+0x188>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d004      	beq.n	8007592 <HAL_TIM_PWM_Start+0x136>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a16      	ldr	r2, [pc, #88]	@ (80075e8 <HAL_TIM_PWM_Start+0x18c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d111      	bne.n	80075b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0307 	and.w	r3, r3, #7
 800759c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2b06      	cmp	r3, #6
 80075a2:	d010      	beq.n	80075c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f042 0201 	orr.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b4:	e007      	b.n	80075c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f042 0201 	orr.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3710      	adds	r7, #16
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40000400 	.word	0x40000400
 80075dc:	40000800 	.word	0x40000800
 80075e0:	40000c00 	.word	0x40000c00
 80075e4:	40014c00 	.word	0x40014c00
 80075e8:	40001800 	.word	0x40001800

080075ec <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2200      	movs	r2, #0
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fdee 	bl	80081e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a2e      	ldr	r2, [pc, #184]	@ (80076c4 <HAL_TIM_PWM_Stop+0xd8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIM_PWM_Stop+0x2c>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a2d      	ldr	r2, [pc, #180]	@ (80076c8 <HAL_TIM_PWM_Stop+0xdc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d101      	bne.n	800761c <HAL_TIM_PWM_Stop+0x30>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <HAL_TIM_PWM_Stop+0x32>
 800761c:	2300      	movs	r3, #0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d017      	beq.n	8007652 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	f241 1311 	movw	r3, #4369	@ 0x1111
 800762c:	4013      	ands	r3, r2
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10f      	bne.n	8007652 <HAL_TIM_PWM_Stop+0x66>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6a1a      	ldr	r2, [r3, #32]
 8007638:	f240 4344 	movw	r3, #1092	@ 0x444
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d107      	bne.n	8007652 <HAL_TIM_PWM_Stop+0x66>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007650:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	f241 1311 	movw	r3, #4369	@ 0x1111
 800765c:	4013      	ands	r3, r2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10f      	bne.n	8007682 <HAL_TIM_PWM_Stop+0x96>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6a1a      	ldr	r2, [r3, #32]
 8007668:	f240 4344 	movw	r3, #1092	@ 0x444
 800766c:	4013      	ands	r3, r2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d107      	bne.n	8007682 <HAL_TIM_PWM_Stop+0x96>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f022 0201 	bic.w	r2, r2, #1
 8007680:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d104      	bne.n	8007692 <HAL_TIM_PWM_Stop+0xa6>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007690:	e013      	b.n	80076ba <HAL_TIM_PWM_Stop+0xce>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b04      	cmp	r3, #4
 8007696:	d104      	bne.n	80076a2 <HAL_TIM_PWM_Stop+0xb6>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076a0:	e00b      	b.n	80076ba <HAL_TIM_PWM_Stop+0xce>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d104      	bne.n	80076b2 <HAL_TIM_PWM_Stop+0xc6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b0:	e003      	b.n	80076ba <HAL_TIM_PWM_Stop+0xce>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	40012c00 	.word	0x40012c00
 80076c8:	40013400 	.word	0x40013400

080076cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	691b      	ldr	r3, [r3, #16]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d020      	beq.n	8007730 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d01b      	beq.n	8007730 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f06f 0202 	mvn.w	r2, #2
 8007700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2201      	movs	r2, #1
 8007706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f003 0303 	and.w	r3, r3, #3
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fa5a 	bl	8007bd0 <HAL_TIM_IC_CaptureCallback>
 800771c:	e005      	b.n	800772a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 fa4d 	bl	8007bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa5c 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0304 	and.w	r3, r3, #4
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0304 	and.w	r3, r3, #4
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01b      	beq.n	800777c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0204 	mvn.w	r2, #4
 800774c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fa34 	bl	8007bd0 <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fa27 	bl	8007bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa36 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d020      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0308 	and.w	r3, r3, #8
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0208 	mvn.w	r2, #8
 8007798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2204      	movs	r2, #4
 800779e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	f003 0303 	and.w	r3, r3, #3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fa0e 	bl	8007bd0 <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa01 	bl	8007bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fa10 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0310 	and.w	r3, r3, #16
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d020      	beq.n	8007814 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0210 	mvn.w	r2, #16
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2208      	movs	r2, #8
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f9e8 	bl	8007bd0 <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f9db 	bl	8007bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f9ea 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b00      	cmp	r3, #0
 8007826:	d007      	beq.n	8007838 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0201 	mvn.w	r2, #1
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7f9 fec0 	bl	80015b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00c      	beq.n	800785c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007848:	2b00      	cmp	r3, #0
 800784a:	d007      	beq.n	800785c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fdba 	bl	80083d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f9ba 	bl	8007bf4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00c      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d007      	beq.n	80078a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f06f 0220 	mvn.w	r2, #32
 800789c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fd8d 	bl	80083be <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e0ae      	b.n	8007a28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2b0c      	cmp	r3, #12
 80078d6:	f200 809f 	bhi.w	8007a18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80078da:	a201      	add	r2, pc, #4	@ (adr r2, 80078e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e0:	08007915 	.word	0x08007915
 80078e4:	08007a19 	.word	0x08007a19
 80078e8:	08007a19 	.word	0x08007a19
 80078ec:	08007a19 	.word	0x08007a19
 80078f0:	08007955 	.word	0x08007955
 80078f4:	08007a19 	.word	0x08007a19
 80078f8:	08007a19 	.word	0x08007a19
 80078fc:	08007a19 	.word	0x08007a19
 8007900:	08007997 	.word	0x08007997
 8007904:	08007a19 	.word	0x08007a19
 8007908:	08007a19 	.word	0x08007a19
 800790c:	08007a19 	.word	0x08007a19
 8007910:	080079d7 	.word	0x080079d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68b9      	ldr	r1, [r7, #8]
 800791a:	4618      	mov	r0, r3
 800791c:	f000 fa1e 	bl	8007d5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0208 	orr.w	r2, r2, #8
 800792e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	699a      	ldr	r2, [r3, #24]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0204 	bic.w	r2, r2, #4
 800793e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	6999      	ldr	r1, [r3, #24]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	691a      	ldr	r2, [r3, #16]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	430a      	orrs	r2, r1
 8007950:	619a      	str	r2, [r3, #24]
      break;
 8007952:	e064      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	68b9      	ldr	r1, [r7, #8]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 fa6e 	bl	8007e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800796e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699a      	ldr	r2, [r3, #24]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800797e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	6999      	ldr	r1, [r3, #24]
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	021a      	lsls	r2, r3, #8
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	430a      	orrs	r2, r1
 8007992:	619a      	str	r2, [r3, #24]
      break;
 8007994:	e043      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	4618      	mov	r0, r3
 800799e:	f000 fac1 	bl	8007f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f042 0208 	orr.w	r2, r2, #8
 80079b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69da      	ldr	r2, [r3, #28]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f022 0204 	bic.w	r2, r2, #4
 80079c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69d9      	ldr	r1, [r3, #28]
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	691a      	ldr	r2, [r3, #16]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	430a      	orrs	r2, r1
 80079d2:	61da      	str	r2, [r3, #28]
      break;
 80079d4:	e023      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fb15 	bl	800800c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	69da      	ldr	r2, [r3, #28]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	69d9      	ldr	r1, [r3, #28]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	021a      	lsls	r2, r3, #8
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	61da      	str	r2, [r3, #28]
      break;
 8007a16:	e002      	b.n	8007a1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8007a1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3718      	adds	r7, #24
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_ConfigClockSource+0x1c>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e0b4      	b.n	8007bb6 <HAL_TIM_ConfigClockSource+0x186>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007a6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a84:	d03e      	beq.n	8007b04 <HAL_TIM_ConfigClockSource+0xd4>
 8007a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a8a:	f200 8087 	bhi.w	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a92:	f000 8086 	beq.w	8007ba2 <HAL_TIM_ConfigClockSource+0x172>
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9a:	d87f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007a9c:	2b70      	cmp	r3, #112	@ 0x70
 8007a9e:	d01a      	beq.n	8007ad6 <HAL_TIM_ConfigClockSource+0xa6>
 8007aa0:	2b70      	cmp	r3, #112	@ 0x70
 8007aa2:	d87b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aa4:	2b60      	cmp	r3, #96	@ 0x60
 8007aa6:	d050      	beq.n	8007b4a <HAL_TIM_ConfigClockSource+0x11a>
 8007aa8:	2b60      	cmp	r3, #96	@ 0x60
 8007aaa:	d877      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007aac:	2b50      	cmp	r3, #80	@ 0x50
 8007aae:	d03c      	beq.n	8007b2a <HAL_TIM_ConfigClockSource+0xfa>
 8007ab0:	2b50      	cmp	r3, #80	@ 0x50
 8007ab2:	d873      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ab4:	2b40      	cmp	r3, #64	@ 0x40
 8007ab6:	d058      	beq.n	8007b6a <HAL_TIM_ConfigClockSource+0x13a>
 8007ab8:	2b40      	cmp	r3, #64	@ 0x40
 8007aba:	d86f      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007abc:	2b30      	cmp	r3, #48	@ 0x30
 8007abe:	d064      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac0:	2b30      	cmp	r3, #48	@ 0x30
 8007ac2:	d86b      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007ac4:	2b20      	cmp	r3, #32
 8007ac6:	d060      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d867      	bhi.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d05c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ad0:	2b10      	cmp	r3, #16
 8007ad2:	d05a      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0x15a>
 8007ad4:	e062      	b.n	8007b9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ae6:	f000 fb5c 	bl	80081a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007af8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	609a      	str	r2, [r3, #8]
      break;
 8007b02:	e04f      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007b14:	f000 fb45 	bl	80081a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	689a      	ldr	r2, [r3, #8]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b26:	609a      	str	r2, [r3, #8]
      break;
 8007b28:	e03c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b36:	461a      	mov	r2, r3
 8007b38:	f000 fabc 	bl	80080b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2150      	movs	r1, #80	@ 0x50
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fb13 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007b48:	e02c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b56:	461a      	mov	r2, r3
 8007b58:	f000 fada 	bl	8008110 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2160      	movs	r1, #96	@ 0x60
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fb03 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007b68:	e01c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b76:	461a      	mov	r2, r3
 8007b78:	f000 fa9c 	bl	80080b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2140      	movs	r1, #64	@ 0x40
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 faf3 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007b88:	e00c      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f000 faea 	bl	800816e <TIM_ITRx_SetConfig>
      break;
 8007b9a:	e003      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8007ba0:	e000      	b.n	8007ba4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ba2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bbe:	b480      	push	{r7}
 8007bc0:	b083      	sub	sp, #12
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bc80      	pop	{r7}
 8007be0:	4770      	bx	lr

08007be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bc80      	pop	{r7}
 8007bf2:	4770      	bx	lr

08007bf4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bc80      	pop	{r7}
 8007c04:	4770      	bx	lr
	...

08007c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a45      	ldr	r2, [pc, #276]	@ (8007d30 <TIM_Base_SetConfig+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d013      	beq.n	8007c48 <TIM_Base_SetConfig+0x40>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a44      	ldr	r2, [pc, #272]	@ (8007d34 <TIM_Base_SetConfig+0x12c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00f      	beq.n	8007c48 <TIM_Base_SetConfig+0x40>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c2e:	d00b      	beq.n	8007c48 <TIM_Base_SetConfig+0x40>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a41      	ldr	r2, [pc, #260]	@ (8007d38 <TIM_Base_SetConfig+0x130>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d007      	beq.n	8007c48 <TIM_Base_SetConfig+0x40>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a40      	ldr	r2, [pc, #256]	@ (8007d3c <TIM_Base_SetConfig+0x134>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d003      	beq.n	8007c48 <TIM_Base_SetConfig+0x40>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a3f      	ldr	r2, [pc, #252]	@ (8007d40 <TIM_Base_SetConfig+0x138>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d108      	bne.n	8007c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a34      	ldr	r2, [pc, #208]	@ (8007d30 <TIM_Base_SetConfig+0x128>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d02b      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a33      	ldr	r2, [pc, #204]	@ (8007d34 <TIM_Base_SetConfig+0x12c>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d027      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c70:	d023      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a30      	ldr	r2, [pc, #192]	@ (8007d38 <TIM_Base_SetConfig+0x130>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d01f      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a2f      	ldr	r2, [pc, #188]	@ (8007d3c <TIM_Base_SetConfig+0x134>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d01b      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a2e      	ldr	r2, [pc, #184]	@ (8007d40 <TIM_Base_SetConfig+0x138>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d017      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d44 <TIM_Base_SetConfig+0x13c>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d013      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	4a2c      	ldr	r2, [pc, #176]	@ (8007d48 <TIM_Base_SetConfig+0x140>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00f      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d4c <TIM_Base_SetConfig+0x144>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00b      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	4a2a      	ldr	r2, [pc, #168]	@ (8007d50 <TIM_Base_SetConfig+0x148>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d007      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a29      	ldr	r2, [pc, #164]	@ (8007d54 <TIM_Base_SetConfig+0x14c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d003      	beq.n	8007cba <TIM_Base_SetConfig+0xb2>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a28      	ldr	r2, [pc, #160]	@ (8007d58 <TIM_Base_SetConfig+0x150>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d108      	bne.n	8007ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	68fa      	ldr	r2, [r7, #12]
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8007d30 <TIM_Base_SetConfig+0x128>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d003      	beq.n	8007d00 <TIM_Base_SetConfig+0xf8>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8007d34 <TIM_Base_SetConfig+0x12c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d103      	bne.n	8007d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d005      	beq.n	8007d26 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f023 0201 	bic.w	r2, r3, #1
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	611a      	str	r2, [r3, #16]
  }
}
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	40012c00 	.word	0x40012c00
 8007d34:	40013400 	.word	0x40013400
 8007d38:	40000400 	.word	0x40000400
 8007d3c:	40000800 	.word	0x40000800
 8007d40:	40000c00 	.word	0x40000c00
 8007d44:	40014c00 	.word	0x40014c00
 8007d48:	40015000 	.word	0x40015000
 8007d4c:	40015400 	.word	0x40015400
 8007d50:	40001800 	.word	0x40001800
 8007d54:	40001c00 	.word	0x40001c00
 8007d58:	40002000 	.word	0x40002000

08007d5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a1b      	ldr	r3, [r3, #32]
 8007d70:	f023 0201 	bic.w	r2, r3, #1
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f023 0303 	bic.w	r3, r3, #3
 8007d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68fa      	ldr	r2, [r7, #12]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f023 0302 	bic.w	r3, r3, #2
 8007da4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	697a      	ldr	r2, [r7, #20]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a20      	ldr	r2, [pc, #128]	@ (8007e34 <TIM_OC1_SetConfig+0xd8>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d003      	beq.n	8007dc0 <TIM_OC1_SetConfig+0x64>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1f      	ldr	r2, [pc, #124]	@ (8007e38 <TIM_OC1_SetConfig+0xdc>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d10c      	bne.n	8007dda <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	f023 0308 	bic.w	r3, r3, #8
 8007dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	697a      	ldr	r2, [r7, #20]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 0304 	bic.w	r3, r3, #4
 8007dd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a15      	ldr	r2, [pc, #84]	@ (8007e34 <TIM_OC1_SetConfig+0xd8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d003      	beq.n	8007dea <TIM_OC1_SetConfig+0x8e>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a14      	ldr	r2, [pc, #80]	@ (8007e38 <TIM_OC1_SetConfig+0xdc>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d111      	bne.n	8007e0e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bc80      	pop	{r7}
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	40012c00 	.word	0x40012c00
 8007e38:	40013400 	.word	0x40013400

08007e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b087      	sub	sp, #28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	f023 0210 	bic.w	r2, r3, #16
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	021b      	lsls	r3, r3, #8
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f023 0320 	bic.w	r3, r3, #32
 8007e86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	011b      	lsls	r3, r3, #4
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a21      	ldr	r2, [pc, #132]	@ (8007f1c <TIM_OC2_SetConfig+0xe0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC2_SetConfig+0x68>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a20      	ldr	r2, [pc, #128]	@ (8007f20 <TIM_OC2_SetConfig+0xe4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d10d      	bne.n	8007ec0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ebe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <TIM_OC2_SetConfig+0xe0>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d003      	beq.n	8007ed0 <TIM_OC2_SetConfig+0x94>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	4a15      	ldr	r2, [pc, #84]	@ (8007f20 <TIM_OC2_SetConfig+0xe4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d113      	bne.n	8007ef8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007ed6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007ede:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685a      	ldr	r2, [r3, #4]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	697a      	ldr	r2, [r7, #20]
 8007f10:	621a      	str	r2, [r3, #32]
}
 8007f12:	bf00      	nop
 8007f14:	371c      	adds	r7, #28
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr
 8007f1c:	40012c00 	.word	0x40012c00
 8007f20:	40013400 	.word	0x40013400

08007f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a1b      	ldr	r3, [r3, #32]
 8007f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6a1b      	ldr	r3, [r3, #32]
 8007f38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f023 0303 	bic.w	r3, r3, #3
 8007f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a21      	ldr	r2, [pc, #132]	@ (8008004 <TIM_OC3_SetConfig+0xe0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d003      	beq.n	8007f8a <TIM_OC3_SetConfig+0x66>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a20      	ldr	r2, [pc, #128]	@ (8008008 <TIM_OC3_SetConfig+0xe4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d10d      	bne.n	8007fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	021b      	lsls	r3, r3, #8
 8007f98:	697a      	ldr	r2, [r7, #20]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a16      	ldr	r2, [pc, #88]	@ (8008004 <TIM_OC3_SetConfig+0xe0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d003      	beq.n	8007fb6 <TIM_OC3_SetConfig+0x92>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4a15      	ldr	r2, [pc, #84]	@ (8008008 <TIM_OC3_SetConfig+0xe4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d113      	bne.n	8007fde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	011b      	lsls	r3, r3, #4
 8007fcc:	693a      	ldr	r2, [r7, #16]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	693a      	ldr	r2, [r7, #16]
 8007fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	621a      	str	r2, [r3, #32]
}
 8007ff8:	bf00      	nop
 8007ffa:	371c      	adds	r7, #28
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bc80      	pop	{r7}
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	40012c00 	.word	0x40012c00
 8008008:	40013400 	.word	0x40013400

0800800c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800800c:	b480      	push	{r7}
 800800e:	b087      	sub	sp, #28
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	69db      	ldr	r3, [r3, #28]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800803a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	021b      	lsls	r3, r3, #8
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4313      	orrs	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	031b      	lsls	r3, r3, #12
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4313      	orrs	r3, r2
 8008062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a11      	ldr	r2, [pc, #68]	@ (80080ac <TIM_OC4_SetConfig+0xa0>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d003      	beq.n	8008074 <TIM_OC4_SetConfig+0x68>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a10      	ldr	r2, [pc, #64]	@ (80080b0 <TIM_OC4_SetConfig+0xa4>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d109      	bne.n	8008088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800807a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	019b      	lsls	r3, r3, #6
 8008082:	697a      	ldr	r2, [r7, #20]
 8008084:	4313      	orrs	r3, r2
 8008086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	621a      	str	r2, [r3, #32]
}
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bc80      	pop	{r7}
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40013400 	.word	0x40013400

080080b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b087      	sub	sp, #28
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	f023 0201 	bic.w	r2, r3, #1
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	699b      	ldr	r3, [r3, #24]
 80080d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80080de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	f023 030a 	bic.w	r3, r3, #10
 80080f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	693a      	ldr	r2, [r7, #16]
 80080fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	621a      	str	r2, [r3, #32]
}
 8008106:	bf00      	nop
 8008108:	371c      	adds	r7, #28
 800810a:	46bd      	mov	sp, r7
 800810c:	bc80      	pop	{r7}
 800810e:	4770      	bx	lr

08008110 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6a1b      	ldr	r3, [r3, #32]
 8008120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f023 0210 	bic.w	r2, r3, #16
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	699b      	ldr	r3, [r3, #24]
 8008132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800813a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	031b      	lsls	r3, r3, #12
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800814c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	011b      	lsls	r3, r3, #4
 8008152:	697a      	ldr	r2, [r7, #20]
 8008154:	4313      	orrs	r3, r2
 8008156:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	bc80      	pop	{r7}
 800816c:	4770      	bx	lr

0800816e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800816e:	b480      	push	{r7}
 8008170:	b085      	sub	sp, #20
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4313      	orrs	r3, r2
 800818c:	f043 0307 	orr.w	r3, r3, #7
 8008190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	609a      	str	r2, [r3, #8]
}
 8008198:	bf00      	nop
 800819a:	3714      	adds	r7, #20
 800819c:	46bd      	mov	sp, r7
 800819e:	bc80      	pop	{r7}
 80081a0:	4770      	bx	lr

080081a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081a2:	b480      	push	{r7}
 80081a4:	b087      	sub	sp, #28
 80081a6:	af00      	add	r7, sp, #0
 80081a8:	60f8      	str	r0, [r7, #12]
 80081aa:	60b9      	str	r1, [r7, #8]
 80081ac:	607a      	str	r2, [r7, #4]
 80081ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80081bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	021a      	lsls	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	431a      	orrs	r2, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	4313      	orrs	r3, r2
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	697a      	ldr	r2, [r7, #20]
 80081d4:	609a      	str	r2, [r3, #8]
}
 80081d6:	bf00      	nop
 80081d8:	371c      	adds	r7, #28
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr

080081e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	f003 031f 	and.w	r3, r3, #31
 80081f2:	2201      	movs	r2, #1
 80081f4:	fa02 f303 	lsl.w	r3, r2, r3
 80081f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a1a      	ldr	r2, [r3, #32]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	43db      	mvns	r3, r3
 8008202:	401a      	ands	r2, r3
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6a1a      	ldr	r2, [r3, #32]
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f003 031f 	and.w	r3, r3, #31
 8008212:	6879      	ldr	r1, [r7, #4]
 8008214:	fa01 f303 	lsl.w	r3, r1, r3
 8008218:	431a      	orrs	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	621a      	str	r2, [r3, #32]
}
 800821e:	bf00      	nop
 8008220:	371c      	adds	r7, #28
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800823c:	2302      	movs	r3, #2
 800823e:	e05a      	b.n	80082f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68fa      	ldr	r2, [r7, #12]
 8008278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a20      	ldr	r2, [pc, #128]	@ (8008300 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d022      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1e      	ldr	r2, [pc, #120]	@ (8008304 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01d      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008296:	d018      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a1a      	ldr	r2, [pc, #104]	@ (8008308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d013      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a19      	ldr	r2, [pc, #100]	@ (800830c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d00e      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a17      	ldr	r2, [pc, #92]	@ (8008310 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d009      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d004      	beq.n	80082ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a14      	ldr	r2, [pc, #80]	@ (8008318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10c      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	4313      	orrs	r3, r2
 80082da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr
 8008300:	40012c00 	.word	0x40012c00
 8008304:	40013400 	.word	0x40013400
 8008308:	40000400 	.word	0x40000400
 800830c:	40000800 	.word	0x40000800
 8008310:	40000c00 	.word	0x40000c00
 8008314:	40014c00 	.word	0x40014c00
 8008318:	40001800 	.word	0x40001800

0800831c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008330:	2b01      	cmp	r3, #1
 8008332:	d101      	bne.n	8008338 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008334:	2302      	movs	r3, #2
 8008336:	e03d      	b.n	80083b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	4313      	orrs	r3, r2
 8008368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4313      	orrs	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	691b      	ldr	r3, [r3, #16]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	695b      	ldr	r3, [r3, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	4313      	orrs	r3, r2
 80083a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2200      	movs	r2, #0
 80083ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	bc80      	pop	{r7}
 80083e0:	4770      	bx	lr

080083e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e042      	b.n	800847a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f7fa f8e9 	bl	80025e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2224      	movs	r2, #36	@ 0x24
 8008412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008424:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 ffc0 	bl	80093ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	691a      	ldr	r2, [r3, #16]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800843a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	695a      	ldr	r2, [r3, #20]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800844a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800845a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2220      	movs	r2, #32
 8008466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
	...

08008484 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b08c      	sub	sp, #48	@ 0x30
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b20      	cmp	r3, #32
 800849c:	d156      	bne.n	800854c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d002      	beq.n	80084aa <HAL_UART_Transmit_DMA+0x26>
 80084a4:	88fb      	ldrh	r3, [r7, #6]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d101      	bne.n	80084ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	e04f      	b.n	800854e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	88fa      	ldrh	r2, [r7, #6]
 80084b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	88fa      	ldrh	r2, [r7, #6]
 80084be:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2221      	movs	r2, #33	@ 0x21
 80084ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084d2:	4a21      	ldr	r2, [pc, #132]	@ (8008558 <HAL_UART_Transmit_DMA+0xd4>)
 80084d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084da:	4a20      	ldr	r2, [pc, #128]	@ (800855c <HAL_UART_Transmit_DMA+0xd8>)
 80084dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008560 <HAL_UART_Transmit_DMA+0xdc>)
 80084e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	2200      	movs	r2, #0
 80084ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80084ee:	f107 0308 	add.w	r3, r7, #8
 80084f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80084f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fa:	6819      	ldr	r1, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3304      	adds	r3, #4
 8008502:	461a      	mov	r2, r3
 8008504:	88fb      	ldrh	r3, [r7, #6]
 8008506:	f7fc ff45 	bl	8005394 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008512:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3314      	adds	r3, #20
 800851a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	e853 3f00 	ldrex	r3, [r3]
 8008522:	617b      	str	r3, [r7, #20]
   return(result);
 8008524:	697b      	ldr	r3, [r7, #20]
 8008526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800852a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3314      	adds	r3, #20
 8008532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008534:	627a      	str	r2, [r7, #36]	@ 0x24
 8008536:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008538:	6a39      	ldr	r1, [r7, #32]
 800853a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800853c:	e841 2300 	strex	r3, r2, [r1]
 8008540:	61fb      	str	r3, [r7, #28]
   return(result);
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d1e5      	bne.n	8008514 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008548:	2300      	movs	r3, #0
 800854a:	e000      	b.n	800854e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800854c:	2302      	movs	r3, #2
  }
}
 800854e:	4618      	mov	r0, r3
 8008550:	3730      	adds	r7, #48	@ 0x30
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	08008c41 	.word	0x08008c41
 800855c:	08008cdb 	.word	0x08008cdb
 8008560:	08008e5f 	.word	0x08008e5f

08008564 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	4613      	mov	r3, r2
 8008570:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008578:	b2db      	uxtb	r3, r3
 800857a:	2b20      	cmp	r3, #32
 800857c:	d112      	bne.n	80085a4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d002      	beq.n	800858a <HAL_UART_Receive_DMA+0x26>
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e00b      	b.n	80085a6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	461a      	mov	r2, r3
 8008598:	68b9      	ldr	r1, [r7, #8]
 800859a:	68f8      	ldr	r0, [r7, #12]
 800859c:	f000 fcaa 	bl	8008ef4 <UART_Start_Receive_DMA>
 80085a0:	4603      	mov	r3, r0
 80085a2:	e000      	b.n	80085a6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80085a4:	2302      	movs	r3, #2
  }
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b090      	sub	sp, #64	@ 0x40
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695b      	ldr	r3, [r3, #20]
 80085c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	bf14      	ite	ne
 80085c8:	2301      	movne	r3, #1
 80085ca:	2300      	moveq	r3, #0
 80085cc:	b2db      	uxtb	r3, r3
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	2b21      	cmp	r3, #33	@ 0x21
 80085da:	d128      	bne.n	800862e <HAL_UART_DMAStop+0x80>
 80085dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d025      	beq.n	800862e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3314      	adds	r3, #20
 80085e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	623b      	str	r3, [r7, #32]
   return(result);
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3314      	adds	r3, #20
 8008600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008602:	633a      	str	r2, [r7, #48]	@ 0x30
 8008604:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008606:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008608:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800860a:	e841 2300 	strex	r3, r2, [r1]
 800860e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1e5      	bne.n	80085e2 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800861a:	2b00      	cmp	r3, #0
 800861c:	d004      	beq.n	8008628 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008622:	4618      	mov	r0, r3
 8008624:	f7fc ff16 	bl	8005454 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fcfd 	bl	8009028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	bf14      	ite	ne
 800863c:	2301      	movne	r3, #1
 800863e:	2300      	moveq	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800864a:	b2db      	uxtb	r3, r3
 800864c:	2b22      	cmp	r3, #34	@ 0x22
 800864e:	d128      	bne.n	80086a2 <HAL_UART_DMAStop+0xf4>
 8008650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008652:	2b00      	cmp	r3, #0
 8008654:	d025      	beq.n	80086a2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3314      	adds	r3, #20
 800865c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	60fb      	str	r3, [r7, #12]
   return(result);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3314      	adds	r3, #20
 8008674:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008676:	61fa      	str	r2, [r7, #28]
 8008678:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	69b9      	ldr	r1, [r7, #24]
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	617b      	str	r3, [r7, #20]
   return(result);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d004      	beq.n	800869c <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008696:	4618      	mov	r0, r3
 8008698:	f7fc fedc 	bl	8005454 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fcea 	bl	8009076 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3740      	adds	r7, #64	@ 0x40
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b0ba      	sub	sp, #232	@ 0xe8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80086d8:	2300      	movs	r3, #0
 80086da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80086de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80086ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10f      	bne.n	8008712 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80086f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d009      	beq.n	8008712 <HAL_UART_IRQHandler+0x66>
 80086fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008702:	f003 0320 	and.w	r3, r3, #32
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fd90 	bl	8009230 <UART_Receive_IT>
      return;
 8008710:	e25b      	b.n	8008bca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008712:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008716:	2b00      	cmp	r3, #0
 8008718:	f000 80de 	beq.w	80088d8 <HAL_UART_IRQHandler+0x22c>
 800871c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008720:	f003 0301 	and.w	r3, r3, #1
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800872c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008730:	2b00      	cmp	r3, #0
 8008732:	f000 80d1 	beq.w	80088d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800873a:	f003 0301 	and.w	r3, r3, #1
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00b      	beq.n	800875a <HAL_UART_IRQHandler+0xae>
 8008742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d005      	beq.n	800875a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f043 0201 	orr.w	r2, r3, #1
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800875a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800875e:	f003 0304 	and.w	r3, r3, #4
 8008762:	2b00      	cmp	r3, #0
 8008764:	d00b      	beq.n	800877e <HAL_UART_IRQHandler+0xd2>
 8008766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800876a:	f003 0301 	and.w	r3, r3, #1
 800876e:	2b00      	cmp	r3, #0
 8008770:	d005      	beq.n	800877e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008776:	f043 0202 	orr.w	r2, r3, #2
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800877e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008782:	f003 0302 	and.w	r3, r3, #2
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00b      	beq.n	80087a2 <HAL_UART_IRQHandler+0xf6>
 800878a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800878e:	f003 0301 	and.w	r3, r3, #1
 8008792:	2b00      	cmp	r3, #0
 8008794:	d005      	beq.n	80087a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800879a:	f043 0204 	orr.w	r2, r3, #4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80087a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087a6:	f003 0308 	and.w	r3, r3, #8
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d011      	beq.n	80087d2 <HAL_UART_IRQHandler+0x126>
 80087ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d105      	bne.n	80087c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80087ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087be:	f003 0301 	and.w	r3, r3, #1
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d005      	beq.n	80087d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ca:	f043 0208 	orr.w	r2, r3, #8
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f000 81f2 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e0:	f003 0320 	and.w	r3, r3, #32
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <HAL_UART_IRQHandler+0x14e>
 80087e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 fd1b 	bl	8009230 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	695b      	ldr	r3, [r3, #20]
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	bf14      	ite	ne
 8008808:	2301      	movne	r3, #1
 800880a:	2300      	moveq	r3, #0
 800880c:	b2db      	uxtb	r3, r3
 800880e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008816:	f003 0308 	and.w	r3, r3, #8
 800881a:	2b00      	cmp	r3, #0
 800881c:	d103      	bne.n	8008826 <HAL_UART_IRQHandler+0x17a>
 800881e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008822:	2b00      	cmp	r3, #0
 8008824:	d04f      	beq.n	80088c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 fc25 	bl	8009076 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	695b      	ldr	r3, [r3, #20]
 8008832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008836:	2b00      	cmp	r3, #0
 8008838:	d041      	beq.n	80088be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	3314      	adds	r3, #20
 8008840:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008850:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008854:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3314      	adds	r3, #20
 8008862:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008866:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800886a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008872:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800887e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1d9      	bne.n	800883a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d013      	beq.n	80088b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008892:	4a7e      	ldr	r2, [pc, #504]	@ (8008a8c <HAL_UART_IRQHandler+0x3e0>)
 8008894:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800889a:	4618      	mov	r0, r3
 800889c:	f7fc fe16 	bl	80054cc <HAL_DMA_Abort_IT>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d016      	beq.n	80088d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088b4:	e00e      	b.n	80088d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f9ae 	bl	8008c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088bc:	e00a      	b.n	80088d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9aa 	bl	8008c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	e006      	b.n	80088d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f000 f9a6 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80088d2:	e175      	b.n	8008bc0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088d4:	bf00      	nop
    return;
 80088d6:	e173      	b.n	8008bc0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088dc:	2b01      	cmp	r3, #1
 80088de:	f040 814f 	bne.w	8008b80 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f000 8148 	beq.w	8008b80 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80088f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088f4:	f003 0310 	and.w	r3, r3, #16
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 8141 	beq.w	8008b80 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80088fe:	2300      	movs	r3, #0
 8008900:	60bb      	str	r3, [r7, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	60bb      	str	r3, [r7, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	60bb      	str	r3, [r7, #8]
 8008912:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800891e:	2b00      	cmp	r3, #0
 8008920:	f000 80b6 	beq.w	8008a90 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008930:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8145 	beq.w	8008bc4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800893e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008942:	429a      	cmp	r2, r3
 8008944:	f080 813e 	bcs.w	8008bc4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800894e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	2b20      	cmp	r3, #32
 8008958:	f000 8088 	beq.w	8008a6c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	330c      	adds	r3, #12
 8008962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008966:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800896a:	e853 3f00 	ldrex	r3, [r3]
 800896e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008972:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008976:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800897a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	330c      	adds	r3, #12
 8008984:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008988:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800898c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008994:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008998:	e841 2300 	strex	r3, r2, [r1]
 800899c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80089a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1d9      	bne.n	800895c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3314      	adds	r3, #20
 80089ae:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b2:	e853 3f00 	ldrex	r3, [r3]
 80089b6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80089b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089ba:	f023 0301 	bic.w	r3, r3, #1
 80089be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3314      	adds	r3, #20
 80089c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80089cc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80089d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80089d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80089de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e1      	bne.n	80089a8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3314      	adds	r3, #20
 80089ea:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80089f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3314      	adds	r3, #20
 8008a04:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008a08:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008a0e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e3      	bne.n	80089e4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a3c:	f023 0310 	bic.w	r3, r3, #16
 8008a40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	330c      	adds	r3, #12
 8008a4a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008a4e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a50:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a56:	e841 2300 	strex	r3, r2, [r1]
 8008a5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1e3      	bne.n	8008a2a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fc fcf4 	bl	8005454 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2202      	movs	r2, #2
 8008a70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	4619      	mov	r1, r3
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f8d1 	bl	8008c2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008a88:	e09c      	b.n	8008bc4 <HAL_UART_IRQHandler+0x518>
 8008a8a:	bf00      	nop
 8008a8c:	0800913b 	.word	0x0800913b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008a98:	b29b      	uxth	r3, r3
 8008a9a:	1ad3      	subs	r3, r2, r3
 8008a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	f000 808e 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008aac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f000 8089 	beq.w	8008bc8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	330c      	adds	r3, #12
 8008abc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008acc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008ada:	647a      	str	r2, [r7, #68]	@ 0x44
 8008adc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ade:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1e3      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	3314      	adds	r3, #20
 8008af4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	e853 3f00 	ldrex	r3, [r3]
 8008afc:	623b      	str	r3, [r7, #32]
   return(result);
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3314      	adds	r3, #20
 8008b0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008b12:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e3      	bne.n	8008aee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	330c      	adds	r3, #12
 8008b3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	e853 3f00 	ldrex	r3, [r3]
 8008b42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0310 	bic.w	r3, r3, #16
 8008b4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	330c      	adds	r3, #12
 8008b54:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008b58:	61fa      	str	r2, [r7, #28]
 8008b5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5c:	69b9      	ldr	r1, [r7, #24]
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	e841 2300 	strex	r3, r2, [r1]
 8008b64:	617b      	str	r3, [r7, #20]
   return(result);
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d1e3      	bne.n	8008b34 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 f856 	bl	8008c2a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b7e:	e023      	b.n	8008bc8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x4f4>
 8008b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fae2 	bl	8009162 <UART_Transmit_IT>
    return;
 8008b9e:	e014      	b.n	8008bca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ba4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d00e      	beq.n	8008bca <HAL_UART_IRQHandler+0x51e>
 8008bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d008      	beq.n	8008bca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fb21 	bl	8009200 <UART_EndTransmit_IT>
    return;
 8008bbe:	e004      	b.n	8008bca <HAL_UART_IRQHandler+0x51e>
    return;
 8008bc0:	bf00      	nop
 8008bc2:	e002      	b.n	8008bca <HAL_UART_IRQHandler+0x51e>
      return;
 8008bc4:	bf00      	nop
 8008bc6:	e000      	b.n	8008bca <HAL_UART_IRQHandler+0x51e>
      return;
 8008bc8:	bf00      	nop
  }
}
 8008bca:	37e8      	adds	r7, #232	@ 0xe8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bc80      	pop	{r7}
 8008be0:	4770      	bx	lr

08008be2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008bea:	bf00      	nop
 8008bec:	370c      	adds	r7, #12
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008c06:	b480      	push	{r7}
 8008c08:	b083      	sub	sp, #12
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bc80      	pop	{r7}
 8008c28:	4770      	bx	lr

08008c2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c2a:	b480      	push	{r7}
 8008c2c:	b083      	sub	sp, #12
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bc80      	pop	{r7}
 8008c3e:	4770      	bx	lr

08008c40 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b090      	sub	sp, #64	@ 0x40
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0320 	and.w	r3, r3, #32
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d137      	bne.n	8008ccc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c5e:	2200      	movs	r2, #0
 8008c60:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	3314      	adds	r3, #20
 8008c68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	e853 3f00 	ldrex	r3, [r3]
 8008c70:	623b      	str	r3, [r7, #32]
   return(result);
 8008c72:	6a3b      	ldr	r3, [r7, #32]
 8008c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	3314      	adds	r3, #20
 8008c80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c82:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e5      	bne.n	8008c62 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	330c      	adds	r3, #12
 8008c9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	330c      	adds	r3, #12
 8008cb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cb6:	61fa      	str	r2, [r7, #28]
 8008cb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cba:	69b9      	ldr	r1, [r7, #24]
 8008cbc:	69fa      	ldr	r2, [r7, #28]
 8008cbe:	e841 2300 	strex	r3, r2, [r1]
 8008cc2:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1e5      	bne.n	8008c96 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cca:	e002      	b.n	8008cd2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008ccc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008cce:	f7ff ff7f 	bl	8008bd0 <HAL_UART_TxCpltCallback>
}
 8008cd2:	bf00      	nop
 8008cd4:	3740      	adds	r7, #64	@ 0x40
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ce6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ce8:	68f8      	ldr	r0, [r7, #12]
 8008cea:	f7ff ff7a 	bl	8008be2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cee:	bf00      	nop
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b09c      	sub	sp, #112	@ 0x70
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d02:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f003 0320 	and.w	r3, r3, #32
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d172      	bne.n	8008df8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d14:	2200      	movs	r2, #0
 8008d16:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d22:	e853 3f00 	ldrex	r3, [r3]
 8008d26:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	330c      	adds	r3, #12
 8008d36:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008d38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008d3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d40:	e841 2300 	strex	r3, r2, [r1]
 8008d44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d1e5      	bne.n	8008d18 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3314      	adds	r3, #20
 8008d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d5e:	f023 0301 	bic.w	r3, r3, #1
 8008d62:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	3314      	adds	r3, #20
 8008d6a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d6c:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d6e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e5      	bne.n	8008d4c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3314      	adds	r3, #20
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d96:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3314      	adds	r3, #20
 8008d9e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008da0:	633a      	str	r2, [r7, #48]	@ 0x30
 8008da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008da8:	e841 2300 	strex	r3, r2, [r1]
 8008dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d1e5      	bne.n	8008d80 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008db4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008db6:	2220      	movs	r2, #32
 8008db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d119      	bne.n	8008df8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	330c      	adds	r3, #12
 8008dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f023 0310 	bic.w	r3, r3, #16
 8008dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ddc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	330c      	adds	r3, #12
 8008de2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008de4:	61fa      	str	r2, [r7, #28]
 8008de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	69b9      	ldr	r1, [r7, #24]
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	617b      	str	r3, [r7, #20]
   return(result);
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e5      	bne.n	8008dc4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d106      	bne.n	8008e14 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008e08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e0e:	f7ff ff0c 	bl	8008c2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e12:	e002      	b.n	8008e1a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008e14:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008e16:	f7ff feed 	bl	8008bf4 <HAL_UART_RxCpltCallback>
}
 8008e1a:	bf00      	nop
 8008e1c:	3770      	adds	r7, #112	@ 0x70
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}

08008e22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e22:	b580      	push	{r7, lr}
 8008e24:	b084      	sub	sp, #16
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2201      	movs	r2, #1
 8008e34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d108      	bne.n	8008e50 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	4619      	mov	r1, r3
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff feee 	bl	8008c2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e4e:	e002      	b.n	8008e56 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f7ff fed8 	bl	8008c06 <HAL_UART_RxHalfCpltCallback>
}
 8008e56:	bf00      	nop
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b084      	sub	sp, #16
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e6e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	bf14      	ite	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	2300      	moveq	r3, #0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b21      	cmp	r3, #33	@ 0x21
 8008e90:	d108      	bne.n	8008ea4 <UART_DMAError+0x46>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d005      	beq.n	8008ea4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008e9e:	68b8      	ldr	r0, [r7, #8]
 8008ea0:	f000 f8c2 	bl	8009028 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	bf14      	ite	ne
 8008eb2:	2301      	movne	r3, #1
 8008eb4:	2300      	moveq	r3, #0
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	2b22      	cmp	r3, #34	@ 0x22
 8008ec4:	d108      	bne.n	8008ed8 <UART_DMAError+0x7a>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008ed2:	68b8      	ldr	r0, [r7, #8]
 8008ed4:	f000 f8cf 	bl	8009076 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008edc:	f043 0210 	orr.w	r2, r3, #16
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ee4:	68b8      	ldr	r0, [r7, #8]
 8008ee6:	f7ff fe97 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b098      	sub	sp, #96	@ 0x60
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	4613      	mov	r3, r2
 8008f00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	88fa      	ldrh	r2, [r7, #6]
 8008f0c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2222      	movs	r2, #34	@ 0x22
 8008f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f20:	4a3e      	ldr	r2, [pc, #248]	@ (800901c <UART_Start_Receive_DMA+0x128>)
 8008f22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f28:	4a3d      	ldr	r2, [pc, #244]	@ (8009020 <UART_Start_Receive_DMA+0x12c>)
 8008f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f30:	4a3c      	ldr	r2, [pc, #240]	@ (8009024 <UART_Start_Receive_DMA+0x130>)
 8008f32:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f38:	2200      	movs	r2, #0
 8008f3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	88fb      	ldrh	r3, [r7, #6]
 8008f54:	f7fc fa1e 	bl	8005394 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008f58:	2300      	movs	r3, #0
 8008f5a:	613b      	str	r3, [r7, #16]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	613b      	str	r3, [r7, #16]
 8008f6c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d019      	beq.n	8008faa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	330c      	adds	r3, #12
 8008f7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	330c      	adds	r3, #12
 8008f94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008f96:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008f98:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008f9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3314      	adds	r3, #20
 8008fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fb4:	e853 3f00 	ldrex	r3, [r3]
 8008fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	f043 0301 	orr.w	r3, r3, #1
 8008fc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3314      	adds	r3, #20
 8008fc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fca:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fd2:	e841 2300 	strex	r3, r2, [r1]
 8008fd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1e5      	bne.n	8008faa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	3314      	adds	r3, #20
 8008fe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	e853 3f00 	ldrex	r3, [r3]
 8008fec:	617b      	str	r3, [r7, #20]
   return(result);
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ff4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3314      	adds	r3, #20
 8008ffc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008ffe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	6a39      	ldr	r1, [r7, #32]
 8009004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	61fb      	str	r3, [r7, #28]
   return(result);
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d1e5      	bne.n	8008fde <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3760      	adds	r7, #96	@ 0x60
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	08008cf7 	.word	0x08008cf7
 8009020:	08008e23 	.word	0x08008e23
 8009024:	08008e5f 	.word	0x08008e5f

08009028 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b089      	sub	sp, #36	@ 0x24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	330c      	adds	r3, #12
 8009036:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	e853 3f00 	ldrex	r3, [r3]
 800903e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009046:	61fb      	str	r3, [r7, #28]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	330c      	adds	r3, #12
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	61ba      	str	r2, [r7, #24]
 8009052:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009054:	6979      	ldr	r1, [r7, #20]
 8009056:	69ba      	ldr	r2, [r7, #24]
 8009058:	e841 2300 	strex	r3, r2, [r1]
 800905c:	613b      	str	r3, [r7, #16]
   return(result);
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e5      	bne.n	8009030 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2220      	movs	r2, #32
 8009068:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800906c:	bf00      	nop
 800906e:	3724      	adds	r7, #36	@ 0x24
 8009070:	46bd      	mov	sp, r7
 8009072:	bc80      	pop	{r7}
 8009074:	4770      	bx	lr

08009076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009076:	b480      	push	{r7}
 8009078:	b095      	sub	sp, #84	@ 0x54
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	330c      	adds	r3, #12
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009088:	e853 3f00 	ldrex	r3, [r3]
 800908c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800908e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	330c      	adds	r3, #12
 800909c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800909e:	643a      	str	r2, [r7, #64]	@ 0x40
 80090a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80090a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80090a6:	e841 2300 	strex	r3, r2, [r1]
 80090aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80090ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1e5      	bne.n	800907e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3314      	adds	r3, #20
 80090b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ba:	6a3b      	ldr	r3, [r7, #32]
 80090bc:	e853 3f00 	ldrex	r3, [r3]
 80090c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	3314      	adds	r3, #20
 80090d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80090d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80090d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090da:	e841 2300 	strex	r3, r2, [r1]
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1e5      	bne.n	80090b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d119      	bne.n	8009122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	330c      	adds	r3, #12
 80090f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f023 0310 	bic.w	r3, r3, #16
 8009104:	647b      	str	r3, [r7, #68]	@ 0x44
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	330c      	adds	r3, #12
 800910c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800910e:	61ba      	str	r2, [r7, #24]
 8009110:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6979      	ldr	r1, [r7, #20]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	613b      	str	r3, [r7, #16]
   return(result);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e5      	bne.n	80090ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009130:	bf00      	nop
 8009132:	3754      	adds	r7, #84	@ 0x54
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr

0800913a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009146:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fd5f 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800915a:	bf00      	nop
 800915c:	3710      	adds	r7, #16
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009162:	b480      	push	{r7}
 8009164:	b085      	sub	sp, #20
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009170:	b2db      	uxtb	r3, r3
 8009172:	2b21      	cmp	r3, #33	@ 0x21
 8009174:	d13e      	bne.n	80091f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800917e:	d114      	bne.n	80091aa <UART_Transmit_IT+0x48>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d110      	bne.n	80091aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	881b      	ldrh	r3, [r3, #0]
 8009192:	461a      	mov	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800919c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	1c9a      	adds	r2, r3, #2
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	621a      	str	r2, [r3, #32]
 80091a8:	e008      	b.n	80091bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	1c59      	adds	r1, r3, #1
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	6211      	str	r1, [r2, #32]
 80091b4:	781a      	ldrb	r2, [r3, #0]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	4619      	mov	r1, r3
 80091ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10f      	bne.n	80091f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68da      	ldr	r2, [r3, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68da      	ldr	r2, [r3, #12]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80091ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	e000      	b.n	80091f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80091f4:	2302      	movs	r3, #2
  }
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr

08009200 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009216:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2220      	movs	r2, #32
 800921c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff fcd5 	bl	8008bd0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3708      	adds	r7, #8
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b08c      	sub	sp, #48	@ 0x30
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b22      	cmp	r3, #34	@ 0x22
 8009242:	f040 80ae 	bne.w	80093a2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800924e:	d117      	bne.n	8009280 <UART_Receive_IT+0x50>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d113      	bne.n	8009280 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009258:	2300      	movs	r3, #0
 800925a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009260:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800926e:	b29a      	uxth	r2, r3
 8009270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009272:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009278:	1c9a      	adds	r2, r3, #2
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	629a      	str	r2, [r3, #40]	@ 0x28
 800927e:	e026      	b.n	80092ce <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009284:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009286:	2300      	movs	r3, #0
 8009288:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	689b      	ldr	r3, [r3, #8]
 800928e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009292:	d007      	beq.n	80092a4 <UART_Receive_IT+0x74>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d10a      	bne.n	80092b2 <UART_Receive_IT+0x82>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d106      	bne.n	80092b2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ae:	701a      	strb	r2, [r3, #0]
 80092b0:	e008      	b.n	80092c4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092c2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	4619      	mov	r1, r3
 80092dc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d15d      	bne.n	800939e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	68da      	ldr	r2, [r3, #12]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f022 0220 	bic.w	r2, r2, #32
 80092f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68da      	ldr	r2, [r3, #12]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009300:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	695a      	ldr	r2, [r3, #20]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f022 0201 	bic.w	r2, r2, #1
 8009310:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2220      	movs	r2, #32
 8009316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009324:	2b01      	cmp	r3, #1
 8009326:	d135      	bne.n	8009394 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	330c      	adds	r3, #12
 8009334:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	e853 3f00 	ldrex	r3, [r3]
 800933c:	613b      	str	r3, [r7, #16]
   return(result);
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	f023 0310 	bic.w	r3, r3, #16
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	330c      	adds	r3, #12
 800934c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800934e:	623a      	str	r2, [r7, #32]
 8009350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	69f9      	ldr	r1, [r7, #28]
 8009354:	6a3a      	ldr	r2, [r7, #32]
 8009356:	e841 2300 	strex	r3, r2, [r1]
 800935a:	61bb      	str	r3, [r7, #24]
   return(result);
 800935c:	69bb      	ldr	r3, [r7, #24]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1e5      	bne.n	800932e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b10      	cmp	r3, #16
 800936e:	d10a      	bne.n	8009386 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800938a:	4619      	mov	r1, r3
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fc4c 	bl	8008c2a <HAL_UARTEx_RxEventCallback>
 8009392:	e002      	b.n	800939a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fc2d 	bl	8008bf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800939a:	2300      	movs	r3, #0
 800939c:	e002      	b.n	80093a4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800939e:	2300      	movs	r3, #0
 80093a0:	e000      	b.n	80093a4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80093a2:	2302      	movs	r3, #2
  }
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3730      	adds	r7, #48	@ 0x30
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68da      	ldr	r2, [r3, #12]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	689a      	ldr	r2, [r3, #8]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	431a      	orrs	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	4313      	orrs	r3, r2
 80093da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80093e6:	f023 030c 	bic.w	r3, r3, #12
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	6812      	ldr	r2, [r2, #0]
 80093ee:	68b9      	ldr	r1, [r7, #8]
 80093f0:	430b      	orrs	r3, r1
 80093f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	695b      	ldr	r3, [r3, #20]
 80093fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699a      	ldr	r2, [r3, #24]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a2c      	ldr	r2, [pc, #176]	@ (80094c0 <UART_SetConfig+0x114>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d103      	bne.n	800941c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009414:	f7fd fcc0 	bl	8006d98 <HAL_RCC_GetPCLK2Freq>
 8009418:	60f8      	str	r0, [r7, #12]
 800941a:	e002      	b.n	8009422 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800941c:	f7fd fca8 	bl	8006d70 <HAL_RCC_GetPCLK1Freq>
 8009420:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	4613      	mov	r3, r2
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	009a      	lsls	r2, r3, #2
 800942c:	441a      	add	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	fbb2 f3f3 	udiv	r3, r2, r3
 8009438:	4a22      	ldr	r2, [pc, #136]	@ (80094c4 <UART_SetConfig+0x118>)
 800943a:	fba2 2303 	umull	r2, r3, r2, r3
 800943e:	095b      	lsrs	r3, r3, #5
 8009440:	0119      	lsls	r1, r3, #4
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	4613      	mov	r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	4413      	add	r3, r2
 800944a:	009a      	lsls	r2, r3, #2
 800944c:	441a      	add	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	fbb2 f2f3 	udiv	r2, r2, r3
 8009458:	4b1a      	ldr	r3, [pc, #104]	@ (80094c4 <UART_SetConfig+0x118>)
 800945a:	fba3 0302 	umull	r0, r3, r3, r2
 800945e:	095b      	lsrs	r3, r3, #5
 8009460:	2064      	movs	r0, #100	@ 0x64
 8009462:	fb00 f303 	mul.w	r3, r0, r3
 8009466:	1ad3      	subs	r3, r2, r3
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	3332      	adds	r3, #50	@ 0x32
 800946c:	4a15      	ldr	r2, [pc, #84]	@ (80094c4 <UART_SetConfig+0x118>)
 800946e:	fba2 2303 	umull	r2, r3, r2, r3
 8009472:	095b      	lsrs	r3, r3, #5
 8009474:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009478:	4419      	add	r1, r3
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009a      	lsls	r2, r3, #2
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009490:	4b0c      	ldr	r3, [pc, #48]	@ (80094c4 <UART_SetConfig+0x118>)
 8009492:	fba3 0302 	umull	r0, r3, r3, r2
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	2064      	movs	r0, #100	@ 0x64
 800949a:	fb00 f303 	mul.w	r3, r0, r3
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	3332      	adds	r3, #50	@ 0x32
 80094a4:	4a07      	ldr	r2, [pc, #28]	@ (80094c4 <UART_SetConfig+0x118>)
 80094a6:	fba2 2303 	umull	r2, r3, r2, r3
 80094aa:	095b      	lsrs	r3, r3, #5
 80094ac:	f003 020f 	and.w	r2, r3, #15
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	440a      	add	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094b8:	bf00      	nop
 80094ba:	3710      	adds	r7, #16
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40013800 	.word	0x40013800
 80094c4:	51eb851f 	.word	0x51eb851f

080094c8 <memset>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	4402      	add	r2, r0
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d100      	bne.n	80094d2 <memset+0xa>
 80094d0:	4770      	bx	lr
 80094d2:	f803 1b01 	strb.w	r1, [r3], #1
 80094d6:	e7f9      	b.n	80094cc <memset+0x4>

080094d8 <__libc_init_array>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	2600      	movs	r6, #0
 80094dc:	4d0c      	ldr	r5, [pc, #48]	@ (8009510 <__libc_init_array+0x38>)
 80094de:	4c0d      	ldr	r4, [pc, #52]	@ (8009514 <__libc_init_array+0x3c>)
 80094e0:	1b64      	subs	r4, r4, r5
 80094e2:	10a4      	asrs	r4, r4, #2
 80094e4:	42a6      	cmp	r6, r4
 80094e6:	d109      	bne.n	80094fc <__libc_init_array+0x24>
 80094e8:	f000 f81a 	bl	8009520 <_init>
 80094ec:	2600      	movs	r6, #0
 80094ee:	4d0a      	ldr	r5, [pc, #40]	@ (8009518 <__libc_init_array+0x40>)
 80094f0:	4c0a      	ldr	r4, [pc, #40]	@ (800951c <__libc_init_array+0x44>)
 80094f2:	1b64      	subs	r4, r4, r5
 80094f4:	10a4      	asrs	r4, r4, #2
 80094f6:	42a6      	cmp	r6, r4
 80094f8:	d105      	bne.n	8009506 <__libc_init_array+0x2e>
 80094fa:	bd70      	pop	{r4, r5, r6, pc}
 80094fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009500:	4798      	blx	r3
 8009502:	3601      	adds	r6, #1
 8009504:	e7ee      	b.n	80094e4 <__libc_init_array+0xc>
 8009506:	f855 3b04 	ldr.w	r3, [r5], #4
 800950a:	4798      	blx	r3
 800950c:	3601      	adds	r6, #1
 800950e:	e7f2      	b.n	80094f6 <__libc_init_array+0x1e>
 8009510:	08009ae8 	.word	0x08009ae8
 8009514:	08009ae8 	.word	0x08009ae8
 8009518:	08009ae8 	.word	0x08009ae8
 800951c:	08009aec 	.word	0x08009aec

08009520 <_init>:
 8009520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009522:	bf00      	nop
 8009524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009526:	bc08      	pop	{r3}
 8009528:	469e      	mov	lr, r3
 800952a:	4770      	bx	lr

0800952c <_fini>:
 800952c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952e:	bf00      	nop
 8009530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009532:	bc08      	pop	{r3}
 8009534:	469e      	mov	lr, r3
 8009536:	4770      	bx	lr
