
UltraTherapy_SJTK_F103VGT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009780  080001e8  080001e8  000011e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  08009968  08009968  0000a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f18  08009f18  0000b198  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08009f18  08009f18  0000b198  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08009f18  08009f18  0000b198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f1c  08009f1c  0000af1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000198  20000000  08009f20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000198  0800a0b8  0000b198  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800a0b8  0000b830  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134c4  00000000  00000000  0000b1c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bcf  00000000  00000000  0001e685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00022258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e17  00000000  00000000  00023498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4c2  00000000  00000000  000242af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018d8b  00000000  00000000  00040771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a21b7  00000000  00000000  000594fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb6b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b70  00000000  00000000  000fb6f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00100268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	@ (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	@ (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000198 	.word	0x20000198
 8000204:	00000000 	.word	0x00000000
 8000208:	08009950 	.word	0x08009950

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	@ (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	@ (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	@ (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000019c 	.word	0x2000019c
 8000224:	08009950 	.word	0x08009950

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	@ 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	@ 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cd2:	2afd      	cmp	r2, #253	@ 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	@ 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	@ 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	@ 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <MX_ADC1_Init+0xf0>)
 800101e:	4a38      	ldr	r2, [pc, #224]	@ (8001100 <MX_ADC1_Init+0xf4>)
 8001020:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001022:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001024:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001028:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800102a:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <MX_ADC1_Init+0xf0>)
 800102c:	2201      	movs	r2, #1
 800102e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001030:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001032:	2200      	movs	r2, #0
 8001034:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001038:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800103c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001040:	2200      	movs	r2, #0
 8001042:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 5;
 8001044:	4b2d      	ldr	r3, [pc, #180]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001046:	2205      	movs	r2, #5
 8001048:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800104a:	482c      	ldr	r0, [pc, #176]	@ (80010fc <MX_ADC1_Init+0xf0>)
 800104c:	f003 fdaa 	bl	8004ba4 <HAL_ADC_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001056:	f000 fac1 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800105a:	230b      	movs	r3, #11
 800105c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800105e:	2301      	movs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001062:	2307      	movs	r3, #7
 8001064:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001066:	1d3b      	adds	r3, r7, #4
 8001068:	4619      	mov	r1, r3
 800106a:	4824      	ldr	r0, [pc, #144]	@ (80010fc <MX_ADC1_Init+0xf0>)
 800106c:	f003 ff7e 	bl	8004f6c <HAL_ADC_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 fab1 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800107a:	230c      	movs	r3, #12
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800107e:	2302      	movs	r3, #2
 8001080:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	481d      	ldr	r0, [pc, #116]	@ (80010fc <MX_ADC1_Init+0xf0>)
 8001088:	f003 ff70 	bl	8004f6c <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001092:	f000 faa3 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001096:	230d      	movs	r3, #13
 8001098:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800109a:	2303      	movs	r3, #3
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	4619      	mov	r1, r3
 80010a2:	4816      	ldr	r0, [pc, #88]	@ (80010fc <MX_ADC1_Init+0xf0>)
 80010a4:	f003 ff62 	bl	8004f6c <HAL_ADC_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80010ae:	f000 fa95 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010b2:	2310      	movs	r3, #16
 80010b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80010b6:	2304      	movs	r3, #4
 80010b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80010ba:	2306      	movs	r3, #6
 80010bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	1d3b      	adds	r3, r7, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <MX_ADC1_Init+0xf0>)
 80010c4:	f003 ff52 	bl	8004f6c <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80010ce:	f000 fa85 	bl	80015dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010d2:	2311      	movs	r3, #17
 80010d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80010d6:	2305      	movs	r3, #5
 80010d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80010da:	2307      	movs	r3, #7
 80010dc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_ADC1_Init+0xf0>)
 80010e4:	f003 ff42 	bl	8004f6c <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80010ee:	f000 fa75 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001b4 	.word	0x200001b4
 8001100:	40012400 	.word	0x40012400

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a29      	ldr	r2, [pc, #164]	@ (80011c4 <HAL_ADC_MspInit+0xc0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d14a      	bne.n	80011ba <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 800112a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800113c:	4b22      	ldr	r3, [pc, #136]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a21      	ldr	r2, [pc, #132]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 8001142:	f043 0310 	orr.w	r3, r3, #16
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <HAL_ADC_MspInit+0xc4>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = Temp_Sample_Pin|Current_Front_Pin|Current_After_Pin;
 8001154:	230e      	movs	r3, #14
 8001156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001158:	2303      	movs	r3, #3
 800115a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	481a      	ldr	r0, [pc, #104]	@ (80011cc <HAL_ADC_MspInit+0xc8>)
 8001164:	f005 faa6 	bl	80066b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001168:	4b19      	ldr	r3, [pc, #100]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 800116a:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <HAL_ADC_MspInit+0xd0>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b18      	ldr	r3, [pc, #96]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b16      	ldr	r3, [pc, #88]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b15      	ldr	r3, [pc, #84]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 8001182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001186:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 800118a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 8001192:	2220      	movs	r2, #32
 8001194:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 8001198:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800119e:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 80011a0:	f004 fa9a 	bl	80056d8 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_ADC_MspInit+0xaa>
    {
      Error_Handler();
 80011aa:	f000 fa17 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	4a06      	ldr	r2, [pc, #24]	@ (80011d0 <HAL_ADC_MspInit+0xcc>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3720      	adds	r7, #32
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012400 	.word	0x40012400
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40011000 	.word	0x40011000
 80011d0:	200001e4 	.word	0x200001e4
 80011d4:	40020008 	.word	0x40020008

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_DMA_Init+0x58>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a13      	ldr	r2, [pc, #76]	@ (8001230 <MX_DMA_Init+0x58>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_DMA_Init+0x58>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200b      	movs	r0, #11
 80011fc:	f004 fa35 	bl	800566a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001200:	200b      	movs	r0, #11
 8001202:	f004 fa4e 	bl	80056a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	200c      	movs	r0, #12
 800120c:	f004 fa2d 	bl	800566a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001210:	200c      	movs	r0, #12
 8001212:	f004 fa46 	bl	80056a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	200d      	movs	r0, #13
 800121c:	f004 fa25 	bl	800566a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001220:	200d      	movs	r0, #13
 8001222:	f004 fa3e 	bl	80056a2 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40021000 	.word	0x40021000

08001234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	@ 0x28
 8001238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0318 	add.w	r3, r7, #24
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001248:	4b7f      	ldr	r3, [pc, #508]	@ (8001448 <MX_GPIO_Init+0x214>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a7e      	ldr	r2, [pc, #504]	@ (8001448 <MX_GPIO_Init+0x214>)
 800124e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b7c      	ldr	r3, [pc, #496]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001260:	4b79      	ldr	r3, [pc, #484]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a78      	ldr	r2, [pc, #480]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b76      	ldr	r3, [pc, #472]	@ (8001448 <MX_GPIO_Init+0x214>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b73      	ldr	r3, [pc, #460]	@ (8001448 <MX_GPIO_Init+0x214>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a72      	ldr	r2, [pc, #456]	@ (8001448 <MX_GPIO_Init+0x214>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b70      	ldr	r3, [pc, #448]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	4b6d      	ldr	r3, [pc, #436]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	4a6c      	ldr	r2, [pc, #432]	@ (8001448 <MX_GPIO_Init+0x214>)
 8001296:	f043 0308 	orr.w	r3, r3, #8
 800129a:	6193      	str	r3, [r2, #24]
 800129c:	4b6a      	ldr	r3, [pc, #424]	@ (8001448 <MX_GPIO_Init+0x214>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012a8:	4b67      	ldr	r3, [pc, #412]	@ (8001448 <MX_GPIO_Init+0x214>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	4a66      	ldr	r2, [pc, #408]	@ (8001448 <MX_GPIO_Init+0x214>)
 80012ae:	f043 0320 	orr.w	r3, r3, #32
 80012b2:	6193      	str	r3, [r2, #24]
 80012b4:	4b64      	ldr	r3, [pc, #400]	@ (8001448 <MX_GPIO_Init+0x214>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	f003 0320 	and.w	r3, r3, #32
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin|V36CH1_4_EN_Pin|UltraEn_CH5_Pin
 80012c0:	2200      	movs	r2, #0
 80012c2:	f648 715e 	movw	r1, #36702	@ 0x8f5e
 80012c6:	4861      	ldr	r0, [pc, #388]	@ (800144c <MX_GPIO_Init+0x218>)
 80012c8:	f005 fb88 	bl	80069dc <HAL_GPIO_WritePin>
                          |UltraEn_CH1_Pin|UltraEn_CH2_Pin|UltraEn_CH3_Pin|UltraEn_CH4_Pin
                          |AD5160CH2_CS_Pin|AD5160CH1_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 80012cc:	2200      	movs	r2, #0
 80012ce:	f249 71f0 	movw	r1, #38896	@ 0x97f0
 80012d2:	485f      	ldr	r0, [pc, #380]	@ (8001450 <MX_GPIO_Init+0x21c>)
 80012d4:	f005 fb82 	bl	80069dc <HAL_GPIO_WritePin>
                          |AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin|UltraEn_CH6_Pin
                          |V36CH5_8_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorEn_CH5_Pin|MotorEn_CH6_Pin|AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin
 80012d8:	2200      	movs	r2, #0
 80012da:	f241 31b0 	movw	r1, #5040	@ 0x13b0
 80012de:	485d      	ldr	r0, [pc, #372]	@ (8001454 <MX_GPIO_Init+0x220>)
 80012e0:	f005 fb7c 	bl	80069dc <HAL_GPIO_WritePin>
                          |AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorEn_CH7_Pin|MotorEn_CH8_Pin|AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin
 80012e4:	2200      	movs	r2, #0
 80012e6:	f247 415b 	movw	r1, #29787	@ 0x745b
 80012ea:	485b      	ldr	r0, [pc, #364]	@ (8001458 <MX_GPIO_Init+0x224>)
 80012ec:	f005 fb76 	bl	80069dc <HAL_GPIO_WritePin>
                          |UltraEn_CH8_Pin|UltraEn_CH7_Pin|AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin
                          |AD9833CH1_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 80012f0:	2200      	movs	r2, #0
 80012f2:	f643 71ff 	movw	r1, #16383	@ 0x3fff
 80012f6:	4859      	ldr	r0, [pc, #356]	@ (800145c <MX_GPIO_Init+0x228>)
 80012f8:	f005 fb70 	bl	80069dc <HAL_GPIO_WritePin>
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : AD5160CH1_DATA_Pin AD5160CH1_CLK_Pin */
  GPIO_InitStruct.Pin = AD5160CH1_DATA_Pin|AD5160CH1_CLK_Pin;
 80012fc:	230c      	movs	r3, #12
 80012fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001300:	2311      	movs	r3, #17
 8001302:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800130c:	f107 0318 	add.w	r3, r7, #24
 8001310:	4619      	mov	r1, r3
 8001312:	484e      	ldr	r0, [pc, #312]	@ (800144c <MX_GPIO_Init+0x218>)
 8001314:	f005 f9ce 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : V36CH1_4_EN_Pin UltraEn_CH5_Pin UltraEn_CH1_Pin UltraEn_CH2_Pin
                           UltraEn_CH3_Pin UltraEn_CH4_Pin */
  GPIO_InitStruct.Pin = V36CH1_4_EN_Pin|UltraEn_CH5_Pin|UltraEn_CH1_Pin|UltraEn_CH2_Pin
 8001318:	f44f 6375 	mov.w	r3, #3920	@ 0xf50
 800131c:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH3_Pin|UltraEn_CH4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2302      	movs	r3, #2
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	4619      	mov	r1, r3
 8001330:	4846      	ldr	r0, [pc, #280]	@ (800144c <MX_GPIO_Init+0x218>)
 8001332:	f005 f9bf 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH1_Pin MotorEn_CH2_Pin MotorEn_CH3_Pin MotorEn_CH4_Pin
                           UltraEn_CH6_Pin V36CH5_8_EN_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH1_Pin|MotorEn_CH2_Pin|MotorEn_CH3_Pin|MotorEn_CH4_Pin
 8001336:	f249 03f0 	movw	r3, #37104	@ 0x90f0
 800133a:	61bb      	str	r3, [r7, #24]
                          |UltraEn_CH6_Pin|V36CH5_8_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2302      	movs	r3, #2
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4619      	mov	r1, r3
 800134e:	4840      	ldr	r0, [pc, #256]	@ (8001450 <MX_GPIO_Init+0x21c>)
 8001350:	f005 f9b0 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH5_Pin MotorEn_CH6_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH5_Pin|MotorEn_CH6_Pin;
 8001354:	2330      	movs	r3, #48	@ 0x30
 8001356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2302      	movs	r3, #2
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4619      	mov	r1, r3
 800136a:	483a      	ldr	r0, [pc, #232]	@ (8001454 <MX_GPIO_Init+0x220>)
 800136c:	f005 f9a2 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorEn_CH7_Pin MotorEn_CH8_Pin UltraEn_CH8_Pin UltraEn_CH7_Pin */
  GPIO_InitStruct.Pin = MotorEn_CH7_Pin|MotorEn_CH8_Pin|UltraEn_CH8_Pin|UltraEn_CH7_Pin;
 8001370:	f246 0303 	movw	r3, #24579	@ 0x6003
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2302      	movs	r3, #2
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	4619      	mov	r1, r3
 8001388:	4833      	ldr	r0, [pc, #204]	@ (8001458 <MX_GPIO_Init+0x224>)
 800138a:	f005 f993 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5160CH2_CS_Pin AD5160CH1_CS_Pin */
  GPIO_InitStruct.Pin = AD5160CH2_CS_Pin|AD5160CH1_CS_Pin;
 800138e:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001392:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4619      	mov	r1, r3
 80013a6:	4829      	ldr	r0, [pc, #164]	@ (800144c <MX_GPIO_Init+0x218>)
 80013a8:	f005 f984 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD5160CH2_DATA_Pin AD5160CH2_CLK_Pin */
  GPIO_InitStruct.Pin = AD5160CH2_DATA_Pin|AD5160CH2_CLK_Pin;
 80013ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013b2:	2311      	movs	r3, #17
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ba:	2303      	movs	r3, #3
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4824      	ldr	r0, [pc, #144]	@ (8001458 <MX_GPIO_Init+0x224>)
 80013c6:	f005 f975 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH8_SCLK_Pin AD9833CH8_SDATA_Pin AD9833CH8_FSYNC_Pin AD9833CH7_SCLK_Pin
                           AD9833CH7_SDATA_Pin AD9833CH7_FSYNC_Pin AD9833CH4_SDATA_Pin AD9833CH4_FSYNC_Pin
                           AD9833CH3_SCLK_Pin AD9833CH3_SDATA_Pin AD9833CH3_FSYNC_Pin AD9833CH2_SCLK_Pin
                           AD9833CH2_SDATA_Pin AD9833CH2_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH8_SCLK_Pin|AD9833CH8_SDATA_Pin|AD9833CH8_FSYNC_Pin|AD9833CH7_SCLK_Pin
 80013ca:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 80013ce:	61bb      	str	r3, [r7, #24]
                          |AD9833CH7_SDATA_Pin|AD9833CH7_FSYNC_Pin|AD9833CH4_SDATA_Pin|AD9833CH4_FSYNC_Pin
                          |AD9833CH3_SCLK_Pin|AD9833CH3_SDATA_Pin|AD9833CH3_FSYNC_Pin|AD9833CH2_SCLK_Pin
                          |AD9833CH2_SDATA_Pin|AD9833CH2_FSYNC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	4619      	mov	r1, r3
 80013e2:	481e      	ldr	r0, [pc, #120]	@ (800145c <MX_GPIO_Init+0x228>)
 80013e4:	f005 f966 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH6_SCLK_Pin AD9833CH6_SDATA_Pin AD9833CH6_FSYNC_Pin AD9833CH4_SCLK_Pin */
  GPIO_InitStruct.Pin = AD9833CH6_SCLK_Pin|AD9833CH6_SDATA_Pin|AD9833CH6_FSYNC_Pin|AD9833CH4_SCLK_Pin;
 80013e8:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80013ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0318 	add.w	r3, r7, #24
 80013fe:	4619      	mov	r1, r3
 8001400:	4814      	ldr	r0, [pc, #80]	@ (8001454 <MX_GPIO_Init+0x220>)
 8001402:	f005 f957 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH5_SCLK_Pin AD9833CH5_SDATA_Pin AD9833CH5_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH5_SCLK_Pin|AD9833CH5_SDATA_Pin|AD9833CH5_FSYNC_Pin;
 8001406:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140c:	2301      	movs	r3, #1
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	4619      	mov	r1, r3
 800141e:	480c      	ldr	r0, [pc, #48]	@ (8001450 <MX_GPIO_Init+0x21c>)
 8001420:	f005 f948 	bl	80066b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9833CH1_SCLK_Pin AD9833CH1_SDATA_Pin AD9833CH1_FSYNC_Pin */
  GPIO_InitStruct.Pin = AD9833CH1_SCLK_Pin|AD9833CH1_SDATA_Pin|AD9833CH1_FSYNC_Pin;
 8001424:	2358      	movs	r3, #88	@ 0x58
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001430:	2303      	movs	r3, #3
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4619      	mov	r1, r3
 800143a:	4807      	ldr	r0, [pc, #28]	@ (8001458 <MX_GPIO_Init+0x224>)
 800143c:	f005 f93a 	bl	80066b4 <HAL_GPIO_Init>

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	@ 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40021000 	.word	0x40021000
 800144c:	40011800 	.word	0x40011800
 8001450:	40010800 	.word	0x40010800
 8001454:	40011000 	.word	0x40011000
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011400 	.word	0x40011400

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001464:	f003 fb18 	bl	8004a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001468:	f000 f83c 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146c:	f7ff fee2 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8001470:	f7ff feb2 	bl	80011d8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001474:	f7ff fdca 	bl	800100c <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8001478:	f001 f87c 	bl	8002574 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800147c:	f000 f94c 	bl	8001718 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001480:	f000 f9e8 	bl	8001854 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001484:	f000 fa5c 	bl	8001940 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001488:	f000 fad0 	bl	8001a2c <MX_TIM4_Init>
  MX_TIM8_Init();
 800148c:	f000 fbee 	bl	8001c6c <MX_TIM8_Init>
  MX_TIM9_Init();
 8001490:	f000 fc8c 	bl	8001dac <MX_TIM9_Init>
  MX_TIM10_Init();
 8001494:	f000 fcec 	bl	8001e70 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001498:	f000 fd38 	bl	8001f0c <MX_TIM11_Init>
  MX_TIM12_Init();
 800149c:	f000 fd84 	bl	8001fa8 <MX_TIM12_Init>
  MX_TIM5_Init();
 80014a0:	f000 fb3a 	bl	8001b18 <MX_TIM5_Init>
  MX_TIM6_Init();
 80014a4:	f000 fbae 	bl	8001c04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DevSystem_Init();
 80014a8:	f001 f972 	bl	8002790 <DevSystem_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 80014ac:	480b      	ldr	r0, [pc, #44]	@ (80014dc <main+0x7c>)
 80014ae:	f006 f927 	bl	8007700 <HAL_TIM_Base_Start_IT>
  HAL_Delay(10);
 80014b2:	200a      	movs	r0, #10
 80014b4:	f003 fb52 	bl	8004b5c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TaskCount > 100)
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <main+0x80>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b64      	cmp	r3, #100	@ 0x64
 80014be:	d909      	bls.n	80014d4 <main+0x74>
	  {
		  DevAD5160Func_Main();
 80014c0:	f001 fed2 	bl	8003268 <DevAD5160Func_Main>
		  DevAD9833Set_Main();
 80014c4:	f002 f8ea 	bl	800369c <DevAD9833Set_Main>
		  DevADC1Func_Main();
 80014c8:	f002 fa02 	bl	80038d0 <DevADC1Func_Main>
		  DevFlashWrite_Main();
 80014cc:	f002 fd20 	bl	8003f10 <DevFlashWrite_Main>
		  DevPwmFunc_Main();
 80014d0:	f002 fe0e 	bl	80040f0 <DevPwmFunc_Main>
	  }
	  AppMainFunc();
 80014d4:	f001 f97c 	bl	80027d0 <AppMainFunc>
	  if(TaskCount > 100)
 80014d8:	e7ee      	b.n	80014b8 <main+0x58>
 80014da:	bf00      	nop
 80014dc:	20000394 	.word	0x20000394
 80014e0:	20000228 	.word	0x20000228

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b096      	sub	sp, #88	@ 0x58
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014ee:	2228      	movs	r2, #40	@ 0x28
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f008 fa00 	bl	80098f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
 8001516:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001520:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001526:	2301      	movs	r3, #1
 8001528:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152a:	2302      	movs	r3, #2
 800152c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800152e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001532:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001534:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001538:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800153e:	4618      	mov	r0, r3
 8001540:	f005 fa64 	bl	8006a0c <HAL_RCC_OscConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800154a:	f000 f847 	bl	80015dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f005 fccf 	bl	8006f10 <HAL_RCC_ClockConfig>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001578:	f000 f830 	bl	80015dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800157c:	2302      	movs	r3, #2
 800157e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001580:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001584:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f005 fe4f 	bl	800722c <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001594:	f000 f822 	bl	80015dc <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3758      	adds	r7, #88	@ 0x58
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
	//100us
	if(htim->Instance == TIM6)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a08      	ldr	r2, [pc, #32]	@ (80015d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d109      	bne.n	80015c6 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		UltraWorkTime++;
 80015b2:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80015ba:	6013      	str	r3, [r2, #0]
		TaskCount++;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	3301      	adds	r3, #1
 80015c2:	4a05      	ldr	r2, [pc, #20]	@ (80015d8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015c4:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 1 */
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	40001000 	.word	0x40001000
 80015d4:	20000618 	.word	0x20000618
 80015d8:	20000228 	.word	0x20000228

080015dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015e0:	b672      	cpsid	i
}
 80015e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <Error_Handler+0x8>

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015ee:	4b15      	ldr	r3, [pc, #84]	@ (8001644 <HAL_MspInit+0x5c>)
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	4a14      	ldr	r2, [pc, #80]	@ (8001644 <HAL_MspInit+0x5c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6193      	str	r3, [r2, #24]
 80015fa:	4b12      	ldr	r3, [pc, #72]	@ (8001644 <HAL_MspInit+0x5c>)
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <HAL_MspInit+0x5c>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_MspInit+0x5c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <HAL_MspInit+0x5c>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800161e:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <HAL_MspInit+0x60>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	4a04      	ldr	r2, [pc, #16]	@ (8001648 <HAL_MspInit+0x60>)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163a:	bf00      	nop
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr

08001698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800169c:	f003 fa42 	bl	8004b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a8:	4802      	ldr	r0, [pc, #8]	@ (80016b4 <DMA1_Channel1_IRQHandler+0x10>)
 80016aa:	f004 fa2f 	bl	8005b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001e4 	.word	0x200001e4

080016b8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <DMA1_Channel2_IRQHandler+0x10>)
 80016be:	f004 fa25 	bl	8005b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200005d0 	.word	0x200005d0

080016cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80016d0:	4802      	ldr	r0, [pc, #8]	@ (80016dc <DMA1_Channel3_IRQHandler+0x10>)
 80016d2:	f004 fa1b 	bl	8005b0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000058c 	.word	0x2000058c

080016e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <USART3_IRQHandler+0x14>)
 80016e6:	f007 f9f9 	bl	8008adc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_IdleCallback(&huart3);
 80016ea:	4802      	ldr	r0, [pc, #8]	@ (80016f4 <USART3_IRQHandler+0x14>)
 80016ec:	f003 f8c0 	bl	8004870 <HAL_UART_IdleCallback>
  /* USER CODE END USART3_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000544 	.word	0x20000544

080016f8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016fc:	4802      	ldr	r0, [pc, #8]	@ (8001708 <TIM6_IRQHandler+0x10>)
 80016fe:	f006 f9fd 	bl	8007afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000394 	.word	0x20000394

0800170c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <MX_TIM1_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b096      	sub	sp, #88	@ 0x58
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800171e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800172c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2220      	movs	r2, #32
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f008 f8d1 	bl	80098f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <MX_TIM1_Init+0x134>)
 8001758:	4a3d      	ldr	r2, [pc, #244]	@ (8001850 <MX_TIM1_Init+0x138>)
 800175a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 800175c:	4b3b      	ldr	r3, [pc, #236]	@ (800184c <MX_TIM1_Init+0x134>)
 800175e:	2247      	movs	r2, #71	@ 0x47
 8001760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <MX_TIM1_Init+0x134>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001768:	4b38      	ldr	r3, [pc, #224]	@ (800184c <MX_TIM1_Init+0x134>)
 800176a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800176e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b36      	ldr	r3, [pc, #216]	@ (800184c <MX_TIM1_Init+0x134>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001776:	4b35      	ldr	r3, [pc, #212]	@ (800184c <MX_TIM1_Init+0x134>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b33      	ldr	r3, [pc, #204]	@ (800184c <MX_TIM1_Init+0x134>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001782:	4832      	ldr	r0, [pc, #200]	@ (800184c <MX_TIM1_Init+0x134>)
 8001784:	f005 fee0 	bl	8007548 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800178e:	f7ff ff25 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001798:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800179c:	4619      	mov	r1, r3
 800179e:	482b      	ldr	r0, [pc, #172]	@ (800184c <MX_TIM1_Init+0x134>)
 80017a0:	f006 fb5e 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017aa:	f7ff ff17 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ae:	4827      	ldr	r0, [pc, #156]	@ (800184c <MX_TIM1_Init+0x134>)
 80017b0:	f006 f814 	bl	80077dc <HAL_TIM_PWM_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017ba:	f7ff ff0f 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017ca:	4619      	mov	r1, r3
 80017cc:	481f      	ldr	r0, [pc, #124]	@ (800184c <MX_TIM1_Init+0x134>)
 80017ce:	f006 ff43 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017d8:	f7ff ff00 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017dc:	2360      	movs	r3, #96	@ 0x60
 80017de:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017ec:	2300      	movs	r3, #0
 80017ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f8:	220c      	movs	r2, #12
 80017fa:	4619      	mov	r1, r3
 80017fc:	4813      	ldr	r0, [pc, #76]	@ (800184c <MX_TIM1_Init+0x134>)
 80017fe:	f006 fa6d 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001808:	f7ff fee8 	bl	80015dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800180c:	2300      	movs	r3, #0
 800180e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001820:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001824:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	4619      	mov	r1, r3
 800182e:	4807      	ldr	r0, [pc, #28]	@ (800184c <MX_TIM1_Init+0x134>)
 8001830:	f006 ff8c 	bl	800874c <HAL_TIMEx_ConfigBreakDeadTime>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800183a:	f7ff fecf 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800183e:	4803      	ldr	r0, [pc, #12]	@ (800184c <MX_TIM1_Init+0x134>)
 8001840:	f000 fd00 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001844:	bf00      	nop
 8001846:	3758      	adds	r7, #88	@ 0x58
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000022c 	.word	0x2000022c
 8001850:	40012c00 	.word	0x40012c00

08001854 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08e      	sub	sp, #56	@ 0x38
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001884:	4b2d      	ldr	r3, [pc, #180]	@ (800193c <MX_TIM2_Init+0xe8>)
 8001886:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800188a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <MX_TIM2_Init+0xe8>)
 800188e:	2247      	movs	r2, #71	@ 0x47
 8001890:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <MX_TIM2_Init+0xe8>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8001898:	4b28      	ldr	r3, [pc, #160]	@ (800193c <MX_TIM2_Init+0xe8>)
 800189a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800189e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b26      	ldr	r3, [pc, #152]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b25      	ldr	r3, [pc, #148]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ac:	4823      	ldr	r0, [pc, #140]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018ae:	f005 fe4b 	bl	8007548 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80018b8:	f7ff fe90 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018c6:	4619      	mov	r1, r3
 80018c8:	481c      	ldr	r0, [pc, #112]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018ca:	f006 fac9 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80018d4:	f7ff fe82 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018d8:	4818      	ldr	r0, [pc, #96]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018da:	f005 ff7f 	bl	80077dc <HAL_TIM_PWM_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80018e4:	f7ff fe7a 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e8:	2300      	movs	r3, #0
 80018ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018f0:	f107 0320 	add.w	r3, r7, #32
 80018f4:	4619      	mov	r1, r3
 80018f6:	4811      	ldr	r0, [pc, #68]	@ (800193c <MX_TIM2_Init+0xe8>)
 80018f8:	f006 feae 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001902:	f7ff fe6b 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001906:	2360      	movs	r3, #96	@ 0x60
 8001908:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	220c      	movs	r2, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	@ (800193c <MX_TIM2_Init+0xe8>)
 800191e:	f006 f9dd 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001928:	f7ff fe58 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800192c:	4803      	ldr	r0, [pc, #12]	@ (800193c <MX_TIM2_Init+0xe8>)
 800192e:	f000 fc89 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3738      	adds	r7, #56	@ 0x38
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000274 	.word	0x20000274

08001940 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08e      	sub	sp, #56	@ 0x38
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001946:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
 800194e:	605a      	str	r2, [r3, #4]
 8001950:	609a      	str	r2, [r3, #8]
 8001952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001954:	f107 0320 	add.w	r3, r7, #32
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
 800196c:	615a      	str	r2, [r3, #20]
 800196e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001970:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001972:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <MX_TIM3_Init+0xe8>)
 8001974:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001976:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001978:	2247      	movs	r2, #71	@ 0x47
 800197a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197c:	4b29      	ldr	r3, [pc, #164]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001982:	4b28      	ldr	r3, [pc, #160]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001984:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001988:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198a:	4b26      	ldr	r3, [pc, #152]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001990:	4b24      	ldr	r3, [pc, #144]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001996:	4823      	ldr	r0, [pc, #140]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001998:	f005 fdd6 	bl	8007548 <HAL_TIM_Base_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019a2:	f7ff fe1b 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019b0:	4619      	mov	r1, r3
 80019b2:	481c      	ldr	r0, [pc, #112]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 80019b4:	f006 fa54 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019be:	f7ff fe0d 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019c2:	4818      	ldr	r0, [pc, #96]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 80019c4:	f005 ff0a 	bl	80077dc <HAL_TIM_PWM_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019ce:	f7ff fe05 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019da:	f107 0320 	add.w	r3, r7, #32
 80019de:	4619      	mov	r1, r3
 80019e0:	4810      	ldr	r0, [pc, #64]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 80019e2:	f006 fe39 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019ec:	f7ff fdf6 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f0:	2360      	movs	r3, #96	@ 0x60
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2204      	movs	r2, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4807      	ldr	r0, [pc, #28]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001a08:	f006 f968 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a12:	f7ff fde3 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a16:	4803      	ldr	r0, [pc, #12]	@ (8001a24 <MX_TIM3_Init+0xe4>)
 8001a18:	f000 fc14 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001a1c:	bf00      	nop
 8001a1e:	3738      	adds	r7, #56	@ 0x38
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	200002bc 	.word	0x200002bc
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08e      	sub	sp, #56	@ 0x38
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b14 <MX_TIM4_Init+0xe8>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001a62:	4b2b      	ldr	r3, [pc, #172]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a64:	2247      	movs	r2, #71	@ 0x47
 8001a66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b29      	ldr	r3, [pc, #164]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001a6e:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a70:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b26      	ldr	r3, [pc, #152]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a82:	4823      	ldr	r0, [pc, #140]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001a84:	f005 fd60 	bl	8007548 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a8e:	f7ff fda5 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	481c      	ldr	r0, [pc, #112]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001aa0:	f006 f9de 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001aaa:	f7ff fd97 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aae:	4818      	ldr	r0, [pc, #96]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001ab0:	f005 fe94 	bl	80077dc <HAL_TIM_PWM_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001aba:	f7ff fd8f 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	4619      	mov	r1, r3
 8001acc:	4810      	ldr	r0, [pc, #64]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001ace:	f006 fdc3 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ad8:	f7ff fd80 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	@ 0x60
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2204      	movs	r2, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4807      	ldr	r0, [pc, #28]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001af4:	f006 f8f2 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001afe:	f7ff fd6d 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b02:	4803      	ldr	r0, [pc, #12]	@ (8001b10 <MX_TIM4_Init+0xe4>)
 8001b04:	f000 fb9e 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001b08:	bf00      	nop
 8001b0a:	3738      	adds	r7, #56	@ 0x38
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20000304 	.word	0x20000304
 8001b14:	40000800 	.word	0x40000800

08001b18 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	@ 0x38
 8001b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
 8001b26:	605a      	str	r2, [r3, #4]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2c:	f107 0320 	add.w	r3, r7, #32
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	609a      	str	r2, [r3, #8]
 8001b40:	60da      	str	r2, [r3, #12]
 8001b42:	611a      	str	r2, [r3, #16]
 8001b44:	615a      	str	r2, [r3, #20]
 8001b46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c00 <MX_TIM5_Init+0xe8>)
 8001b4c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 72-1;
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b50:	2247      	movs	r2, #71	@ 0x47
 8001b52:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b54:	4b29      	ldr	r3, [pc, #164]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000;
 8001b5a:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b5c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001b60:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b62:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b6e:	4823      	ldr	r0, [pc, #140]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b70:	f005 fcea 	bl	8007548 <HAL_TIM_Base_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001b7a:	f7ff fd2f 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b84:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481c      	ldr	r0, [pc, #112]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b8c:	f006 f968 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001b96:	f7ff fd21 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b9a:	4818      	ldr	r0, [pc, #96]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001b9c:	f005 fe1e 	bl	80077dc <HAL_TIM_PWM_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001ba6:	f7ff fd19 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bb2:	f107 0320 	add.w	r3, r7, #32
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001bba:	f006 fd4d 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001bc4:	f7ff fd0a 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc8:	2360      	movs	r3, #96	@ 0x60
 8001bca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	2208      	movs	r2, #8
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001be0:	f006 f87c 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001bea:	f7ff fcf7 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001bee:	4803      	ldr	r0, [pc, #12]	@ (8001bfc <MX_TIM5_Init+0xe4>)
 8001bf0:	f000 fb28 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	@ 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000034c 	.word	0x2000034c
 8001c00:	40000c00 	.word	0x40000c00

08001c04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c0a:	463b      	mov	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c14:	4a14      	ldr	r2, [pc, #80]	@ (8001c68 <MX_TIM6_Init+0x64>)
 8001c16:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c1a:	2247      	movs	r2, #71	@ 0x47
 8001c1c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001c24:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c26:	2263      	movs	r2, #99	@ 0x63
 8001c28:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c30:	480c      	ldr	r0, [pc, #48]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c32:	f005 fc89 	bl	8007548 <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8001c3c:	f7ff fcce 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c48:	463b      	mov	r3, r7
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4805      	ldr	r0, [pc, #20]	@ (8001c64 <MX_TIM6_Init+0x60>)
 8001c4e:	f006 fd03 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8001c58:	f7ff fcc0 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000394 	.word	0x20000394
 8001c68:	40001000 	.word	0x40001000

08001c6c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b096      	sub	sp, #88	@ 0x58
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c72:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c80:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]
 8001c9a:	615a      	str	r2, [r3, #20]
 8001c9c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f007 fe27 	bl	80098f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cac:	4a3e      	ldr	r2, [pc, #248]	@ (8001da8 <MX_TIM8_Init+0x13c>)
 8001cae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 72-1;
 8001cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cb2:	2247      	movs	r2, #71	@ 0x47
 8001cb4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000;
 8001cbc:	4b39      	ldr	r3, [pc, #228]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cbe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cc2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b37      	ldr	r3, [pc, #220]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cca:	4b36      	ldr	r3, [pc, #216]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b34      	ldr	r3, [pc, #208]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cd6:	4833      	ldr	r0, [pc, #204]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cd8:	f005 fc36 	bl	8007548 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001ce2:	f7ff fc7b 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cea:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	482c      	ldr	r0, [pc, #176]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001cf4:	f006 f8b4 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cfe:	f7ff fc6d 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d02:	4828      	ldr	r0, [pc, #160]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001d04:	f005 fd6a 	bl	80077dc <HAL_TIM_PWM_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001d0e:	f7ff fc65 	bl	80015dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4820      	ldr	r0, [pc, #128]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001d22:	f006 fc99 	bl	8008658 <HAL_TIMEx_MasterConfigSynchronization>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d2c:	f7ff fc56 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d30:	2360      	movs	r3, #96	@ 0x60
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4813      	ldr	r0, [pc, #76]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001d56:	f005 ffc1 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d60:	f7ff fc3c 	bl	80015dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001d88:	f006 fce0 	bl	800874c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8001d92:	f7ff fc23 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d96:	4803      	ldr	r0, [pc, #12]	@ (8001da4 <MX_TIM8_Init+0x138>)
 8001d98:	f000 fa54 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001d9c:	bf00      	nop
 8001d9e:	3758      	adds	r7, #88	@ 0x58
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200003dc 	.word	0x200003dc
 8001da8:	40013400 	.word	0x40013400

08001dac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08c      	sub	sp, #48	@ 0x30
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0320 	add.w	r3, r7, #32
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	615a      	str	r2, [r3, #20]
 8001dd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001dd4:	4a25      	ldr	r2, [pc, #148]	@ (8001e6c <MX_TIM9_Init+0xc0>)
 8001dd6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 72-1;
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001dda:	2247      	movs	r2, #71	@ 0x47
 8001ddc:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b22      	ldr	r3, [pc, #136]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4255;
 8001de4:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001de6:	f241 029f 	movw	r2, #4255	@ 0x109f
 8001dea:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001df8:	481b      	ldr	r0, [pc, #108]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001dfa:	f005 fba5 	bl	8007548 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001e04:	f7ff fbea 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0320 	add.w	r3, r7, #32
 8001e12:	4619      	mov	r1, r3
 8001e14:	4814      	ldr	r0, [pc, #80]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001e16:	f006 f823 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001e20:	f7ff fbdc 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e24:	4810      	ldr	r0, [pc, #64]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001e26:	f005 fcd9 	bl	80077dc <HAL_TIM_PWM_Init>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e30:	f7ff fbd4 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e34:	2360      	movs	r3, #96	@ 0x60
 8001e36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e44:	1d3b      	adds	r3, r7, #4
 8001e46:	2204      	movs	r2, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4807      	ldr	r0, [pc, #28]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001e4c:	f005 ff46 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 8001e56:	f7ff fbc1 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e5a:	4803      	ldr	r0, [pc, #12]	@ (8001e68 <MX_TIM9_Init+0xbc>)
 8001e5c:	f000 f9f2 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	@ 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20000424 	.word	0x20000424
 8001e6c:	40014c00 	.word	0x40014c00

08001e70 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e76:	1d3b      	adds	r3, r7, #4
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
 8001e86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001f08 <MX_TIM10_Init+0x98>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001e90:	2247      	movs	r2, #71	@ 0x47
 8001e92:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001e9c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001ea0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001eae:	4815      	ldr	r0, [pc, #84]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001eb0:	f005 fb4a 	bl	8007548 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001eba:	f7ff fb8f 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001ebe:	4811      	ldr	r0, [pc, #68]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001ec0:	f005 fc8c 	bl	80077dc <HAL_TIM_PWM_Init>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001eca:	f7ff fb87 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ece:	2360      	movs	r3, #96	@ 0x60
 8001ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4807      	ldr	r0, [pc, #28]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001ee6:	f005 fef9 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001ef0:	f7ff fb74 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001ef4:	4803      	ldr	r0, [pc, #12]	@ (8001f04 <MX_TIM10_Init+0x94>)
 8001ef6:	f000 f9a5 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001efa:	bf00      	nop
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000046c 	.word	0x2000046c
 8001f08:	40015000 	.word	0x40015000

08001f0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001f24:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <MX_TIM11_Init+0x98>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 72-1;
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f2c:	2247      	movs	r2, #71	@ 0x47
 8001f2e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f38:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001f3c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001f4a:	4815      	ldr	r0, [pc, #84]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f4c:	f005 fafc 	bl	8007548 <HAL_TIM_Base_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001f56:	f7ff fb41 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001f5a:	4811      	ldr	r0, [pc, #68]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f5c:	f005 fc3e 	bl	80077dc <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001f66:	f7ff fb39 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f6a:	2360      	movs	r3, #96	@ 0x60
 8001f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f7a:	1d3b      	adds	r3, r7, #4
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4807      	ldr	r0, [pc, #28]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f82:	f005 feab 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001f8c:	f7ff fb26 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001f90:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <MX_TIM11_Init+0x94>)
 8001f92:	f000 f957 	bl	8002244 <HAL_TIM_MspPostInit>

}
 8001f96:	bf00      	nop
 8001f98:	3720      	adds	r7, #32
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200004b4 	.word	0x200004b4
 8001fa4:	40015400 	.word	0x40015400

08001fa8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08c      	sub	sp, #48	@ 0x30
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fd0:	4a25      	ldr	r2, [pc, #148]	@ (8002068 <MX_TIM12_Init+0xc0>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 72-1;
 8001fd4:	4b23      	ldr	r3, [pc, #140]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fd6:	2247      	movs	r2, #71	@ 0x47
 8001fd8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 10000;
 8001fe0:	4b20      	ldr	r3, [pc, #128]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fe2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001fe6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b1d      	ldr	r3, [pc, #116]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ff4:	481b      	ldr	r0, [pc, #108]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8001ff6:	f005 faa7 	bl	8007548 <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8002000:	f7ff faec 	bl	80015dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002008:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4619      	mov	r1, r3
 8002010:	4814      	ldr	r0, [pc, #80]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002012:	f005 ff25 	bl	8007e60 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800201c:	f7ff fade 	bl	80015dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002020:	4810      	ldr	r0, [pc, #64]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002022:	f005 fbdb 	bl	80077dc <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800202c:	f7ff fad6 	bl	80015dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002030:	2360      	movs	r3, #96	@ 0x60
 8002032:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2204      	movs	r2, #4
 8002044:	4619      	mov	r1, r3
 8002046:	4807      	ldr	r0, [pc, #28]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002048:	f005 fe48 	bl	8007cdc <HAL_TIM_PWM_ConfigChannel>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8002052:	f7ff fac3 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002056:	4803      	ldr	r0, [pc, #12]	@ (8002064 <MX_TIM12_Init+0xbc>)
 8002058:	f000 f8f4 	bl	8002244 <HAL_TIM_MspPostInit>

}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	@ 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200004fc 	.word	0x200004fc
 8002068:	40001800 	.word	0x40001800

0800206c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b08e      	sub	sp, #56	@ 0x38
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a67      	ldr	r2, [pc, #412]	@ (8002218 <HAL_TIM_Base_MspInit+0x1ac>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d10c      	bne.n	8002098 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800207e:	4b67      	ldr	r3, [pc, #412]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	4a66      	ldr	r2, [pc, #408]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002084:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002088:	6193      	str	r3, [r2, #24]
 800208a:	4b64      	ldr	r3, [pc, #400]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002092:	637b      	str	r3, [r7, #52]	@ 0x34
 8002094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002096:	e0ba      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a0:	d10c      	bne.n	80020bc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a2:	4b5e      	ldr	r3, [pc, #376]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a5d      	ldr	r2, [pc, #372]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b5b      	ldr	r3, [pc, #364]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80020b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80020ba:	e0a8      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM3)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a57      	ldr	r2, [pc, #348]	@ (8002220 <HAL_TIM_Base_MspInit+0x1b4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d10c      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020c6:	4b55      	ldr	r3, [pc, #340]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a54      	ldr	r2, [pc, #336]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b52      	ldr	r3, [pc, #328]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020de:	e096      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002224 <HAL_TIM_Base_MspInit+0x1b8>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10c      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ea:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4a4b      	ldr	r2, [pc, #300]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	61d3      	str	r3, [r2, #28]
 80020f6:	4b49      	ldr	r3, [pc, #292]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f003 0304 	and.w	r3, r3, #4
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8002102:	e084      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM5)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a47      	ldr	r2, [pc, #284]	@ (8002228 <HAL_TIM_Base_MspInit+0x1bc>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10c      	bne.n	8002128 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800210e:	4b43      	ldr	r3, [pc, #268]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a42      	ldr	r2, [pc, #264]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	61d3      	str	r3, [r2, #28]
 800211a:	4b40      	ldr	r3, [pc, #256]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
 8002124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002126:	e072      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM6)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a3f      	ldr	r2, [pc, #252]	@ (800222c <HAL_TIM_Base_MspInit+0x1c0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d114      	bne.n	800215c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002132:	4b3a      	ldr	r3, [pc, #232]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a39      	ldr	r2, [pc, #228]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b37      	ldr	r3, [pc, #220]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	623b      	str	r3, [r7, #32]
 8002148:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	2100      	movs	r1, #0
 800214e:	2036      	movs	r0, #54	@ 0x36
 8002150:	f003 fa8b 	bl	800566a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002154:	2036      	movs	r0, #54	@ 0x36
 8002156:	f003 faa4 	bl	80056a2 <HAL_NVIC_EnableIRQ>
}
 800215a:	e058      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM8)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a33      	ldr	r2, [pc, #204]	@ (8002230 <HAL_TIM_Base_MspInit+0x1c4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10c      	bne.n	8002180 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002166:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4a2c      	ldr	r2, [pc, #176]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 800216c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002170:	6193      	str	r3, [r2, #24]
 8002172:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800217a:	61fb      	str	r3, [r7, #28]
 800217c:	69fb      	ldr	r3, [r7, #28]
}
 800217e:	e046      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM9)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a2b      	ldr	r2, [pc, #172]	@ (8002234 <HAL_TIM_Base_MspInit+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d10c      	bne.n	80021a4 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800218a:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4a23      	ldr	r2, [pc, #140]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002190:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002194:	6193      	str	r3, [r2, #24]
 8002196:	4b21      	ldr	r3, [pc, #132]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800219e:	61bb      	str	r3, [r7, #24]
 80021a0:	69bb      	ldr	r3, [r7, #24]
}
 80021a2:	e034      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM10)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a23      	ldr	r2, [pc, #140]	@ (8002238 <HAL_TIM_Base_MspInit+0x1cc>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10c      	bne.n	80021c8 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80021ae:	4b1b      	ldr	r3, [pc, #108]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	4a1a      	ldr	r2, [pc, #104]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021b8:	6193      	str	r3, [r2, #24]
 80021ba:	4b18      	ldr	r3, [pc, #96]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
}
 80021c6:	e022      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM11)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <HAL_TIM_Base_MspInit+0x1d0>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10c      	bne.n	80021ec <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021d2:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	4a11      	ldr	r2, [pc, #68]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021dc:	6193      	str	r3, [r2, #24]
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	693b      	ldr	r3, [r7, #16]
}
 80021ea:	e010      	b.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
  else if(tim_baseHandle->Instance==TIM12)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <HAL_TIM_Base_MspInit+0x1d4>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d10b      	bne.n	800220e <HAL_TIM_Base_MspInit+0x1a2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80021f6:	4b09      	ldr	r3, [pc, #36]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 80021fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002200:	61d3      	str	r3, [r2, #28]
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_TIM_Base_MspInit+0x1b0>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
}
 800220e:	bf00      	nop
 8002210:	3738      	adds	r7, #56	@ 0x38
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40012c00 	.word	0x40012c00
 800221c:	40021000 	.word	0x40021000
 8002220:	40000400 	.word	0x40000400
 8002224:	40000800 	.word	0x40000800
 8002228:	40000c00 	.word	0x40000c00
 800222c:	40001000 	.word	0x40001000
 8002230:	40013400 	.word	0x40013400
 8002234:	40014c00 	.word	0x40014c00
 8002238:	40015000 	.word	0x40015000
 800223c:	40015400 	.word	0x40015400
 8002240:	40001800 	.word	0x40001800

08002244 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b094      	sub	sp, #80	@ 0x50
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a93      	ldr	r2, [pc, #588]	@ (80024ac <HAL_TIM_MspPostInit+0x268>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d12b      	bne.n	80022bc <HAL_TIM_MspPostInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002264:	4b92      	ldr	r3, [pc, #584]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a91      	ldr	r2, [pc, #580]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800226a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b8f      	ldr	r3, [pc, #572]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002278:	633b      	str	r3, [r7, #48]	@ 0x30
 800227a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800227c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2302      	movs	r3, #2
 8002288:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800228a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800228e:	4619      	mov	r1, r3
 8002290:	4888      	ldr	r0, [pc, #544]	@ (80024b4 <HAL_TIM_MspPostInit+0x270>)
 8002292:	f004 fa0f 	bl	80066b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM1_ENABLE();
 8002296:	4b88      	ldr	r3, [pc, #544]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	647b      	str	r3, [r7, #68]	@ 0x44
 800229c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800229e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80022a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80022aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80022b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b4:	4a80      	ldr	r2, [pc, #512]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 80022b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b8:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80022ba:	e14e      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c4:	d12b      	bne.n	800231e <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	4b7a      	ldr	r3, [pc, #488]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	4a79      	ldr	r2, [pc, #484]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80022cc:	f043 0308 	orr.w	r3, r3, #8
 80022d0:	6193      	str	r3, [r2, #24]
 80022d2:	4b77      	ldr	r3, [pc, #476]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80022e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2302      	movs	r3, #2
 80022ea:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80022f0:	4619      	mov	r1, r3
 80022f2:	4872      	ldr	r0, [pc, #456]	@ (80024bc <HAL_TIM_MspPostInit+0x278>)
 80022f4:	f004 f9de 	bl	80066b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80022f8:	4b6f      	ldr	r3, [pc, #444]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002308:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002316:	4a68      	ldr	r2, [pc, #416]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 8002318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800231a:	6053      	str	r3, [r2, #4]
}
 800231c:	e11d      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM3)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a67      	ldr	r2, [pc, #412]	@ (80024c0 <HAL_TIM_MspPostInit+0x27c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d12a      	bne.n	800237e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002328:	4b61      	ldr	r3, [pc, #388]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4a60      	ldr	r2, [pc, #384]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800232e:	f043 0308 	orr.w	r3, r3, #8
 8002332:	6193      	str	r3, [r2, #24]
 8002334:	4b5e      	ldr	r3, [pc, #376]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800233e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002340:	2320      	movs	r3, #32
 8002342:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2302      	movs	r3, #2
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002350:	4619      	mov	r1, r3
 8002352:	485a      	ldr	r0, [pc, #360]	@ (80024bc <HAL_TIM_MspPostInit+0x278>)
 8002354:	f004 f9ae 	bl	80066b4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8002358:	4b57      	ldr	r3, [pc, #348]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800235e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002360:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002364:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002368:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800236c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800236e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002370:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002376:	4a50      	ldr	r2, [pc, #320]	@ (80024b8 <HAL_TIM_MspPostInit+0x274>)
 8002378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800237a:	6053      	str	r3, [r2, #4]
}
 800237c:	e0ed      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM4)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a50      	ldr	r2, [pc, #320]	@ (80024c4 <HAL_TIM_MspPostInit+0x280>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d118      	bne.n	80023ba <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	4b49      	ldr	r3, [pc, #292]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	4a48      	ldr	r2, [pc, #288]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800238e:	f043 0308 	orr.w	r3, r3, #8
 8002392:	6193      	str	r3, [r2, #24]
 8002394:	4b46      	ldr	r3, [pc, #280]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a8:	2302      	movs	r3, #2
 80023aa:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023b0:	4619      	mov	r1, r3
 80023b2:	4842      	ldr	r0, [pc, #264]	@ (80024bc <HAL_TIM_MspPostInit+0x278>)
 80023b4:	f004 f97e 	bl	80066b4 <HAL_GPIO_Init>
}
 80023b8:	e0cf      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM5)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a42      	ldr	r2, [pc, #264]	@ (80024c8 <HAL_TIM_MspPostInit+0x284>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d118      	bne.n	80023f6 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a39      	ldr	r2, [pc, #228]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	6193      	str	r3, [r2, #24]
 80023d0:	4b37      	ldr	r3, [pc, #220]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023dc:	2304      	movs	r3, #4
 80023de:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2302      	movs	r3, #2
 80023e6:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80023ec:	4619      	mov	r1, r3
 80023ee:	4837      	ldr	r0, [pc, #220]	@ (80024cc <HAL_TIM_MspPostInit+0x288>)
 80023f0:	f004 f960 	bl	80066b4 <HAL_GPIO_Init>
}
 80023f4:	e0b1      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM8)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a35      	ldr	r2, [pc, #212]	@ (80024d0 <HAL_TIM_MspPostInit+0x28c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d118      	bne.n	8002432 <HAL_TIM_MspPostInit+0x1ee>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002400:	4b2b      	ldr	r3, [pc, #172]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	4a2a      	ldr	r2, [pc, #168]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002406:	f043 0310 	orr.w	r3, r3, #16
 800240a:	6193      	str	r3, [r2, #24]
 800240c:	4b28      	ldr	r3, [pc, #160]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002418:	2340      	movs	r3, #64	@ 0x40
 800241a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2302      	movs	r3, #2
 8002422:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002424:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002428:	4619      	mov	r1, r3
 800242a:	482a      	ldr	r0, [pc, #168]	@ (80024d4 <HAL_TIM_MspPostInit+0x290>)
 800242c:	f004 f942 	bl	80066b4 <HAL_GPIO_Init>
}
 8002430:	e093      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM9)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_TIM_MspPostInit+0x294>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d118      	bne.n	800246e <HAL_TIM_MspPostInit+0x22a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800243c:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	4a1b      	ldr	r2, [pc, #108]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	6193      	str	r3, [r2, #24]
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002454:	2308      	movs	r3, #8
 8002456:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245c:	2302      	movs	r3, #2
 800245e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002464:	4619      	mov	r1, r3
 8002466:	4819      	ldr	r0, [pc, #100]	@ (80024cc <HAL_TIM_MspPostInit+0x288>)
 8002468:	f004 f924 	bl	80066b4 <HAL_GPIO_Init>
}
 800246c:	e075      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM10)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1a      	ldr	r2, [pc, #104]	@ (80024dc <HAL_TIM_MspPostInit+0x298>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d133      	bne.n	80024e0 <HAL_TIM_MspPostInit+0x29c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002478:	4b0d      	ldr	r3, [pc, #52]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a0c      	ldr	r2, [pc, #48]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 800247e:	f043 0308 	orr.w	r3, r3, #8
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <HAL_TIM_MspPostInit+0x26c>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002494:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249a:	2302      	movs	r3, #2
 800249c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024a2:	4619      	mov	r1, r3
 80024a4:	4805      	ldr	r0, [pc, #20]	@ (80024bc <HAL_TIM_MspPostInit+0x278>)
 80024a6:	f004 f905 	bl	80066b4 <HAL_GPIO_Init>
}
 80024aa:	e056      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
 80024ac:	40012c00 	.word	0x40012c00
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40011800 	.word	0x40011800
 80024b8:	40010000 	.word	0x40010000
 80024bc:	40010c00 	.word	0x40010c00
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800
 80024c8:	40000c00 	.word	0x40000c00
 80024cc:	40010800 	.word	0x40010800
 80024d0:	40013400 	.word	0x40013400
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40014c00 	.word	0x40014c00
 80024dc:	40015000 	.word	0x40015000
  else if(timHandle->Instance==TIM11)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002564 <HAL_TIM_MspPostInit+0x320>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d119      	bne.n	800251e <HAL_TIM_MspPostInit+0x2da>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 80024f0:	f043 0308 	orr.w	r3, r3, #8
 80024f4:	6193      	str	r3, [r2, #24]
 80024f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002502:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2302      	movs	r3, #2
 800250e:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002510:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002514:	4619      	mov	r1, r3
 8002516:	4815      	ldr	r0, [pc, #84]	@ (800256c <HAL_TIM_MspPostInit+0x328>)
 8002518:	f004 f8cc 	bl	80066b4 <HAL_GPIO_Init>
}
 800251c:	e01d      	b.n	800255a <HAL_TIM_MspPostInit+0x316>
  else if(timHandle->Instance==TIM12)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a13      	ldr	r2, [pc, #76]	@ (8002570 <HAL_TIM_MspPostInit+0x32c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d118      	bne.n	800255a <HAL_TIM_MspPostInit+0x316>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002528:	4b0f      	ldr	r3, [pc, #60]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	4a0e      	ldr	r2, [pc, #56]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 800252e:	f043 0308 	orr.w	r3, r3, #8
 8002532:	6193      	str	r3, [r2, #24]
 8002534:	4b0c      	ldr	r3, [pc, #48]	@ (8002568 <HAL_TIM_MspPostInit+0x324>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002540:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002546:	2302      	movs	r3, #2
 8002548:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2302      	movs	r3, #2
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800254e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	@ (800256c <HAL_TIM_MspPostInit+0x328>)
 8002556:	f004 f8ad 	bl	80066b4 <HAL_GPIO_Init>
}
 800255a:	bf00      	nop
 800255c:	3750      	adds	r7, #80	@ 0x50
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40015400 	.word	0x40015400
 8002568:	40021000 	.word	0x40021000
 800256c:	40010c00 	.word	0x40010c00
 8002570:	40001800 	.word	0x40001800

08002574 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 800257a:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <MX_USART3_UART_Init+0x50>)
 800257c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 8002580:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002586:	4b0e      	ldr	r3, [pc, #56]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002592:	4b0b      	ldr	r3, [pc, #44]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 8002594:	2200      	movs	r2, #0
 8002596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002598:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 800259a:	220c      	movs	r2, #12
 800259c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025a4:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025aa:	4805      	ldr	r0, [pc, #20]	@ (80025c0 <MX_USART3_UART_Init+0x4c>)
 80025ac:	f006 f931 	bl	8008812 <HAL_UART_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025b6:	f7ff f811 	bl	80015dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000544 	.word	0x20000544
 80025c4:	40004800 	.word	0x40004800

080025c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08a      	sub	sp, #40	@ 0x28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a50      	ldr	r2, [pc, #320]	@ (8002724 <HAL_UART_MspInit+0x15c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	f040 8098 	bne.w	800271a <HAL_UART_MspInit+0x152>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002728 <HAL_UART_MspInit+0x160>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	4a4e      	ldr	r2, [pc, #312]	@ (8002728 <HAL_UART_MspInit+0x160>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f4:	61d3      	str	r3, [r2, #28]
 80025f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002728 <HAL_UART_MspInit+0x160>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025fe:	613b      	str	r3, [r7, #16]
 8002600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002602:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <HAL_UART_MspInit+0x160>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	4a48      	ldr	r2, [pc, #288]	@ (8002728 <HAL_UART_MspInit+0x160>)
 8002608:	f043 0310 	orr.w	r3, r3, #16
 800260c:	6193      	str	r3, [r2, #24]
 800260e:	4b46      	ldr	r3, [pc, #280]	@ (8002728 <HAL_UART_MspInit+0x160>)
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	483f      	ldr	r0, [pc, #252]	@ (800272c <HAL_UART_MspInit+0x164>)
 8002630:	f004 f840 	bl	80066b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002634:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4838      	ldr	r0, [pc, #224]	@ (800272c <HAL_UART_MspInit+0x164>)
 800264a:	f004 f833 	bl	80066b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800264e:	4b38      	ldr	r3, [pc, #224]	@ (8002730 <HAL_UART_MspInit+0x168>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
 800266c:	4a30      	ldr	r2, [pc, #192]	@ (8002730 <HAL_UART_MspInit+0x168>)
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	6053      	str	r3, [r2, #4]

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8002672:	4b30      	ldr	r3, [pc, #192]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 8002674:	4a30      	ldr	r2, [pc, #192]	@ (8002738 <HAL_UART_MspInit+0x170>)
 8002676:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002678:	4b2e      	ldr	r3, [pc, #184]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 800267a:	2200      	movs	r2, #0
 800267c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800267e:	4b2d      	ldr	r3, [pc, #180]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002684:	4b2b      	ldr	r3, [pc, #172]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 8002686:	2280      	movs	r2, #128	@ 0x80
 8002688:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002696:	4b27      	ldr	r3, [pc, #156]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 8002698:	2200      	movs	r2, #0
 800269a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800269c:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026a2:	4824      	ldr	r0, [pc, #144]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 80026a4:	f003 f818 	bl	80056d8 <HAL_DMA_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 80026ae:	f7fe ff95 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 80026b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002734 <HAL_UART_MspInit+0x16c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80026be:	4b1f      	ldr	r3, [pc, #124]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002740 <HAL_UART_MspInit+0x178>)
 80026c2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026c6:	2210      	movs	r2, #16
 80026c8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026d2:	2280      	movs	r2, #128	@ 0x80
 80026d4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d6:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026dc:	4b17      	ldr	r3, [pc, #92]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80026ee:	4813      	ldr	r0, [pc, #76]	@ (800273c <HAL_UART_MspInit+0x174>)
 80026f0:	f002 fff2 	bl	80056d8 <HAL_DMA_Init>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80026fa:	f7fe ff6f 	bl	80015dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0e      	ldr	r2, [pc, #56]	@ (800273c <HAL_UART_MspInit+0x174>)
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <HAL_UART_MspInit+0x174>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800270a:	2200      	movs	r2, #0
 800270c:	2100      	movs	r1, #0
 800270e:	2027      	movs	r0, #39	@ 0x27
 8002710:	f002 ffab 	bl	800566a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002714:	2027      	movs	r0, #39	@ 0x27
 8002716:	f002 ffc4 	bl	80056a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800271a:	bf00      	nop
 800271c:	3728      	adds	r7, #40	@ 0x28
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	40004800 	.word	0x40004800
 8002728:	40021000 	.word	0x40021000
 800272c:	40011000 	.word	0x40011000
 8002730:	40010000 	.word	0x40010000
 8002734:	2000058c 	.word	0x2000058c
 8002738:	40020030 	.word	0x40020030
 800273c:	200005d0 	.word	0x200005d0
 8002740:	4002001c 	.word	0x4002001c

08002744 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002744:	f7fe ffe2 	bl	800170c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002748:	480b      	ldr	r0, [pc, #44]	@ (8002778 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800274a:	490c      	ldr	r1, [pc, #48]	@ (800277c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800274c:	4a0c      	ldr	r2, [pc, #48]	@ (8002780 <LoopFillZerobss+0x16>)
  movs r3, #0
 800274e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002750:	e002      	b.n	8002758 <LoopCopyDataInit>

08002752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002756:	3304      	adds	r3, #4

08002758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800275a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800275c:	d3f9      	bcc.n	8002752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800275e:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002760:	4c09      	ldr	r4, [pc, #36]	@ (8002788 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002764:	e001      	b.n	800276a <LoopFillZerobss>

08002766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002768:	3204      	adds	r2, #4

0800276a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800276a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800276c:	d3fb      	bcc.n	8002766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800276e:	f007 f8cb 	bl	8009908 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002772:	f7fe fe75 	bl	8001460 <main>
  bx lr
 8002776:	4770      	bx	lr
  ldr r0, =_sdata
 8002778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800277c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8002780:	08009f20 	.word	0x08009f20
  ldr r2, =_sbss
 8002784:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8002788:	20000830 	.word	0x20000830

0800278c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800278c:	e7fe      	b.n	800278c <ADC1_2_IRQHandler>
	...

08002790 <DevSystem_Init>:
static void UltraWorkModule_CycleMode(void);
static void UltraWorkModule_AlternateMode2(void);

/*系统初始化*/
void DevSystem_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
	DevParam_Init();
 8002794:	f001 fb06 	bl	8003da4 <DevParam_Init>
	DevAD9833Set_Init();
 8002798:	f000 fee4 	bl	8003564 <DevAD9833Set_Init>
	DevAD5160Func_Init();
 800279c:	f000 fd32 	bl	8003204 <DevAD5160Func_Init>
	DevADC1Func_Init();
 80027a0:	f001 f884 	bl	80038ac <DevADC1Func_Init>
	DevUart_Init();
 80027a4:	f002 f84c 	bl	8004840 <DevUart_Init>
	DevPwmFunc_Init();
 80027a8:	f001 fc30 	bl	800400c <DevPwmFunc_Init>

	HAL_GPIO_WritePin(V36CH1_4_EN_GPIO_Port, V36CH1_4_EN_Pin, GPIO_PIN_SET);
 80027ac:	2201      	movs	r2, #1
 80027ae:	2110      	movs	r1, #16
 80027b0:	4805      	ldr	r0, [pc, #20]	@ (80027c8 <DevSystem_Init+0x38>)
 80027b2:	f004 f913 	bl	80069dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(V36CH5_8_EN_GPIO_Port, V36CH5_8_EN_Pin, GPIO_PIN_SET);
 80027b6:	2201      	movs	r2, #1
 80027b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80027bc:	4803      	ldr	r0, [pc, #12]	@ (80027cc <DevSystem_Init+0x3c>)
 80027be:	f004 f90d 	bl	80069dc <HAL_GPIO_WritePin>
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40011800 	.word	0x40011800
 80027cc:	40010800 	.word	0x40010800

080027d0 <AppMainFunc>:

void AppMainFunc(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
	static uint8_t sWorkSta_old = DEVWORKSTART;
	uint8_t tag_i = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
	uint8_t mode = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	71bb      	strb	r3, [r7, #6]

	if(WorkSta == DEVWORKSTART)
 80027de:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <AppMainFunc+0xc0>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d125      	bne.n	8002832 <AppMainFunc+0x62>
		{
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], UltraEnFlg[tag_i]);
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
		}
#else
		mode = WorkModule;
 80027e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002894 <AppMainFunc+0xc4>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	71bb      	strb	r3, [r7, #6]

		switch(mode)
 80027ec:	79bb      	ldrb	r3, [r7, #6]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d817      	bhi.n	8002824 <AppMainFunc+0x54>
 80027f4:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <AppMainFunc+0x2c>)
 80027f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fa:	bf00      	nop
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002813 	.word	0x08002813
 8002804:	08002819 	.word	0x08002819
 8002808:	0800281f 	.word	0x0800281f
		{
		case SYNCMODE:
			/*同步模式 8探头同时工作*/
			UltraWorkModule_SyncMode();
 800280c:	f000 f894 	bl	8002938 <UltraWorkModule_SyncMode>
			break;
 8002810:	e00b      	b.n	800282a <AppMainFunc+0x5a>

		case ALTERMODE:
			/*交替模式 四探头为一组，两两交替*/
			UltraWorkModule_AlternateMode();
 8002812:	f000 f921 	bl	8002a58 <UltraWorkModule_AlternateMode>
			break;
 8002816:	e008      	b.n	800282a <AppMainFunc+0x5a>

		case CYCLEMODE:
			/*循环模式 8探头循环交替工作*/
			UltraWorkModule_CycleMode();
 8002818:	f000 fb68 	bl	8002eec <UltraWorkModule_CycleMode>
			break;
 800281c:	e005      	b.n	800282a <AppMainFunc+0x5a>

		case ALTERMODE2:
			/*交替模式2 2探头为一组，交替运行*/
			UltraWorkModule_AlternateMode2();
 800281e:	f000 fa7f 	bl	8002d20 <UltraWorkModule_AlternateMode2>
			break;
 8002822:	e002      	b.n	800282a <AppMainFunc+0x5a>

		default:
			UltraWorkModule_AlternateMode();
 8002824:	f000 f918 	bl	8002a58 <UltraWorkModule_AlternateMode>
			break;
 8002828:	bf00      	nop
		}

		sWorkSta_old = DEVWORKSTART;
 800282a:	4b1b      	ldr	r3, [pc, #108]	@ (8002898 <AppMainFunc+0xc8>)
 800282c:	2201      	movs	r2, #1
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e027      	b.n	8002882 <AppMainFunc+0xb2>
#endif
	}else
	{
		/*震动马达、超声复位*/
		if(sWorkSta_old == DEVWORKSTART)
 8002832:	4b19      	ldr	r3, [pc, #100]	@ (8002898 <AppMainFunc+0xc8>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d123      	bne.n	8002882 <AppMainFunc+0xb2>
		{
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800283a:	2300      	movs	r3, #0
 800283c:	71fb      	strb	r3, [r7, #7]
 800283e:	e01a      	b.n	8002876 <AppMainFunc+0xa6>
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	4a16      	ldr	r2, [pc, #88]	@ (800289c <AppMainFunc+0xcc>)
 8002844:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	4a15      	ldr	r2, [pc, #84]	@ (80028a0 <AppMainFunc+0xd0>)
 800284c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002850:	2200      	movs	r2, #0
 8002852:	4619      	mov	r1, r3
 8002854:	f004 f8c2 	bl	80069dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002858:	79fb      	ldrb	r3, [r7, #7]
 800285a:	4a12      	ldr	r2, [pc, #72]	@ (80028a4 <AppMainFunc+0xd4>)
 800285c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4a11      	ldr	r2, [pc, #68]	@ (80028a8 <AppMainFunc+0xd8>)
 8002864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002868:	2200      	movs	r2, #0
 800286a:	4619      	mov	r1, r3
 800286c:	f004 f8b6 	bl	80069dc <HAL_GPIO_WritePin>
			for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	3301      	adds	r3, #1
 8002874:	71fb      	strb	r3, [r7, #7]
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	2b07      	cmp	r3, #7
 800287a:	d9e1      	bls.n	8002840 <AppMainFunc+0x70>
			}
			sWorkSta_old = DEVWORKSTOP;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <AppMainFunc+0xc8>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
		}
	}
	UltraParamReload();			//超声参数装载
 8002882:	f000 f813 	bl	80028ac <UltraParamReload>
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000614 	.word	0x20000614
 8002894:	20000004 	.word	0x20000004
 8002898:	20000078 	.word	0x20000078
 800289c:	20000038 	.word	0x20000038
 80028a0:	20000068 	.word	0x20000068
 80028a4:	20000018 	.word	0x20000018
 80028a8:	20000058 	.word	0x20000058

080028ac <UltraParamReload>:
 *
 * 			超声参数重新装填
 *
 */
void UltraParamReload(void)
{
 80028ac:	b590      	push	{r4, r7, lr}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	71fb      	strb	r3, [r7, #7]

	/*参数修改后进行刷新*/
	if(ParamRefresh == 1)
 80028b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002920 <UltraParamReload+0x74>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d12c      	bne.n	8002918 <UltraParamReload+0x6c>
	{
		MotorEnableFlg = DevMotor_StaGet();
 80028be:	f002 f865 	bl	800498c <DevMotor_StaGet>
 80028c2:	4603      	mov	r3, r0
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b17      	ldr	r3, [pc, #92]	@ (8002924 <UltraParamReload+0x78>)
 80028c8:	701a      	strb	r2, [r3, #0]
		StimuTime = DevWork_StimuTimeGet();
 80028ca:	f002 f879 	bl	80049c0 <DevWork_StimuTimeGet>
 80028ce:	4603      	mov	r3, r0
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <UltraParamReload+0x7c>)
 80028d4:	801a      	strh	r2, [r3, #0]
		IdleTime = DevWork_IdleTimeGet();
 80028d6:	f002 f88d 	bl	80049f4 <DevWork_IdleTimeGet>
 80028da:	4603      	mov	r3, r0
 80028dc:	461a      	mov	r2, r3
 80028de:	4b13      	ldr	r3, [pc, #76]	@ (800292c <UltraParamReload+0x80>)
 80028e0:	801a      	strh	r2, [r3, #0]
		WorkModule =  DevWork_ModuleGet();
 80028e2:	f002 f8a1 	bl	8004a28 <DevWork_ModuleGet>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <UltraParamReload+0x84>)
 80028ec:	701a      	strb	r2, [r3, #0]

		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80028ee:	2300      	movs	r3, #0
 80028f0:	71fb      	strb	r3, [r7, #7]
 80028f2:	e00b      	b.n	800290c <UltraParamReload+0x60>
		{
			UltraEnFlg[tag_i] = DevUltra_StatGet(tag_i);
 80028f4:	79fc      	ldrb	r4, [r7, #7]
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 f8b1 	bl	8004a60 <DevUltra_StatGet>
 80028fe:	4603      	mov	r3, r0
 8002900:	461a      	mov	r2, r3
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <UltraParamReload+0x88>)
 8002904:	551a      	strb	r2, [r3, r4]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	3301      	adds	r3, #1
 800290a:	71fb      	strb	r3, [r7, #7]
 800290c:	79fb      	ldrb	r3, [r7, #7]
 800290e:	2b07      	cmp	r3, #7
 8002910:	d9f0      	bls.n	80028f4 <UltraParamReload+0x48>
		}

		ParamRefresh = 0;
 8002912:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <UltraParamReload+0x74>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
	}
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	20000615 	.word	0x20000615
 8002924:	20000010 	.word	0x20000010
 8002928:	20000012 	.word	0x20000012
 800292c:	20000014 	.word	0x20000014
 8002930:	20000004 	.word	0x20000004
 8002934:	20000008 	.word	0x20000008

08002938 <UltraWorkModule_SyncMode>:
 *
 *			8探头同步工作模式
 *
 */
static void UltraWorkModule_SyncMode(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	71fb      	strb	r3, [r7, #7]

	if(UltraWorkTime < (StimuTime * 10))
 8002942:	4b3c      	ldr	r3, [pc, #240]	@ (8002a34 <UltraWorkModule_SyncMode+0xfc>)
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	461a      	mov	r2, r3
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	461a      	mov	r2, r3
 8002952:	4b39      	ldr	r3, [pc, #228]	@ (8002a38 <UltraWorkModule_SyncMode+0x100>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d927      	bls.n	80029aa <UltraWorkModule_SyncMode+0x72>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800295a:	2300      	movs	r3, #0
 800295c:	71fb      	strb	r3, [r7, #7]
 800295e:	e020      	b.n	80029a2 <UltraWorkModule_SyncMode+0x6a>
		{
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], UltraEnFlg[tag_i]);
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	4a36      	ldr	r2, [pc, #216]	@ (8002a3c <UltraWorkModule_SyncMode+0x104>)
 8002964:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	4a35      	ldr	r2, [pc, #212]	@ (8002a40 <UltraWorkModule_SyncMode+0x108>)
 800296c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002970:	79fb      	ldrb	r3, [r7, #7]
 8002972:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <UltraWorkModule_SyncMode+0x10c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	461a      	mov	r2, r3
 8002978:	f004 f830 	bl	80069dc <HAL_GPIO_WritePin>

			if(MotorEnableFlg == 1)
 800297c:	4b32      	ldr	r3, [pc, #200]	@ (8002a48 <UltraWorkModule_SyncMode+0x110>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d10b      	bne.n	800299c <UltraWorkModule_SyncMode+0x64>
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	4a31      	ldr	r2, [pc, #196]	@ (8002a4c <UltraWorkModule_SyncMode+0x114>)
 8002988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a30      	ldr	r2, [pc, #192]	@ (8002a50 <UltraWorkModule_SyncMode+0x118>)
 8002990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002994:	2201      	movs	r2, #1
 8002996:	4619      	mov	r1, r3
 8002998:	f004 f820 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800299c:	79fb      	ldrb	r3, [r7, #7]
 800299e:	3301      	adds	r3, #1
 80029a0:	71fb      	strb	r3, [r7, #7]
 80029a2:	79fb      	ldrb	r3, [r7, #7]
 80029a4:	2b07      	cmp	r3, #7
 80029a6:	d9db      	bls.n	8002960 <UltraWorkModule_SyncMode+0x28>
		}
	}else
	{
		UltraWorkTime = 0;
	}
}
 80029a8:	e040      	b.n	8002a2c <UltraWorkModule_SyncMode+0xf4>
	}else if((UltraWorkTime >= StimuTime * 10) && (UltraWorkTime < (StimuTime + IdleTime) * 10))
 80029aa:	4b22      	ldr	r3, [pc, #136]	@ (8002a34 <UltraWorkModule_SyncMode+0xfc>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <UltraWorkModule_SyncMode+0x100>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d830      	bhi.n	8002a24 <UltraWorkModule_SyncMode+0xec>
 80029c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a34 <UltraWorkModule_SyncMode+0xfc>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4b22      	ldr	r3, [pc, #136]	@ (8002a54 <UltraWorkModule_SyncMode+0x11c>)
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	441a      	add	r2, r3
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	461a      	mov	r2, r3
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <UltraWorkModule_SyncMode+0x100>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d921      	bls.n	8002a24 <UltraWorkModule_SyncMode+0xec>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80029e0:	2300      	movs	r3, #0
 80029e2:	71fb      	strb	r3, [r7, #7]
 80029e4:	e01a      	b.n	8002a1c <UltraWorkModule_SyncMode+0xe4>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	4a14      	ldr	r2, [pc, #80]	@ (8002a3c <UltraWorkModule_SyncMode+0x104>)
 80029ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4a13      	ldr	r2, [pc, #76]	@ (8002a40 <UltraWorkModule_SyncMode+0x108>)
 80029f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029f6:	2200      	movs	r2, #0
 80029f8:	4619      	mov	r1, r3
 80029fa:	f003 ffef 	bl	80069dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 80029fe:	79fb      	ldrb	r3, [r7, #7]
 8002a00:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <UltraWorkModule_SyncMode+0x114>)
 8002a02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	4a11      	ldr	r2, [pc, #68]	@ (8002a50 <UltraWorkModule_SyncMode+0x118>)
 8002a0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	4619      	mov	r1, r3
 8002a12:	f003 ffe3 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	71fb      	strb	r3, [r7, #7]
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2b07      	cmp	r3, #7
 8002a20:	d9e1      	bls.n	80029e6 <UltraWorkModule_SyncMode+0xae>
	}else if((UltraWorkTime >= StimuTime * 10) && (UltraWorkTime < (StimuTime + IdleTime) * 10))
 8002a22:	e003      	b.n	8002a2c <UltraWorkModule_SyncMode+0xf4>
		UltraWorkTime = 0;
 8002a24:	4b04      	ldr	r3, [pc, #16]	@ (8002a38 <UltraWorkModule_SyncMode+0x100>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
}
 8002a2a:	e7ff      	b.n	8002a2c <UltraWorkModule_SyncMode+0xf4>
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000012 	.word	0x20000012
 8002a38:	20000618 	.word	0x20000618
 8002a3c:	20000018 	.word	0x20000018
 8002a40:	20000058 	.word	0x20000058
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	20000038 	.word	0x20000038
 8002a50:	20000068 	.word	0x20000068
 8002a54:	20000014 	.word	0x20000014

08002a58 <UltraWorkModule_AlternateMode>:
 *
 *			8探头两组交替工作模式(4个为一组)
 *
 */
static void UltraWorkModule_AlternateMode(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	71fb      	strb	r3, [r7, #7]

	if(UltraWorkTime < (StimuTime * 10))
 8002a62:	4ba6      	ldr	r3, [pc, #664]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4613      	mov	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	461a      	mov	r2, r3
 8002a72:	4ba3      	ldr	r3, [pc, #652]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d946      	bls.n	8002b08 <UltraWorkModule_AlternateMode+0xb0>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	e03f      	b.n	8002b00 <UltraWorkModule_AlternateMode+0xa8>
		{
			//偶数探头超声控制
			if((tag_i % 2) == 0)
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11e      	bne.n	8002aca <UltraWorkModule_AlternateMode+0x72>
			{
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	4a9d      	ldr	r2, [pc, #628]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002a90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	4a9c      	ldr	r2, [pc, #624]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002a98:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	4a9b      	ldr	r2, [pc, #620]	@ (8002d0c <UltraWorkModule_AlternateMode+0x2b4>)
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	f003 ff9a 	bl	80069dc <HAL_GPIO_WritePin>
				if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 8002aa8:	4b99      	ldr	r3, [pc, #612]	@ (8002d10 <UltraWorkModule_AlternateMode+0x2b8>)
 8002aaa:	8b5b      	ldrh	r3, [r3, #26]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d124      	bne.n	8002afa <UltraWorkModule_AlternateMode+0xa2>
				{
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4a98      	ldr	r2, [pc, #608]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002ab4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4a97      	ldr	r2, [pc, #604]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f003 ff8a 	bl	80069dc <HAL_GPIO_WritePin>
 8002ac8:	e017      	b.n	8002afa <UltraWorkModule_AlternateMode+0xa2>
				}
			}else
			{
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	4a91      	ldr	r2, [pc, #580]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002ace:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4a90      	ldr	r2, [pc, #576]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ada:	2200      	movs	r2, #0
 8002adc:	4619      	mov	r1, r3
 8002ade:	f003 ff7d 	bl	80069dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002ae2:	79fb      	ldrb	r3, [r7, #7]
 8002ae4:	4a87      	ldr	r2, [pc, #540]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002aea:	79fb      	ldrb	r3, [r7, #7]
 8002aec:	4a86      	ldr	r2, [pc, #536]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002af2:	2200      	movs	r2, #0
 8002af4:	4619      	mov	r1, r3
 8002af6:	f003 ff71 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	3301      	adds	r3, #1
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b07      	cmp	r3, #7
 8002b04:	d9bc      	bls.n	8002a80 <UltraWorkModule_AlternateMode+0x28>
		}
	}else
	{
		UltraWorkTime = 0;
	}
}
 8002b06:	e0f5      	b.n	8002cf4 <UltraWorkModule_AlternateMode+0x29c>
	}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 8002b08:	4b7c      	ldr	r3, [pc, #496]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	461a      	mov	r2, r3
 8002b18:	4b79      	ldr	r3, [pc, #484]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d833      	bhi.n	8002b88 <UltraWorkModule_AlternateMode+0x130>
 8002b20:	4b7e      	ldr	r3, [pc, #504]	@ (8002d1c <UltraWorkModule_AlternateMode+0x2c4>)
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b75      	ldr	r3, [pc, #468]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	441a      	add	r2, r3
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	4413      	add	r3, r2
 8002b32:	461a      	mov	r2, r3
 8002b34:	4b72      	ldr	r3, [pc, #456]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d925      	bls.n	8002b88 <UltraWorkModule_AlternateMode+0x130>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	71fb      	strb	r3, [r7, #7]
 8002b40:	e01e      	b.n	8002b80 <UltraWorkModule_AlternateMode+0x128>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2], Motor_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	4a73      	ldr	r2, [pc, #460]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002b48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b4c:	79fb      	ldrb	r3, [r7, #7]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4a71      	ldr	r2, [pc, #452]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002b52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f003 ff3f 	bl	80069dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2], Ultra_Gpio_Pin[tag_i * 2], GPIO_PIN_RESET);
 8002b5e:	79fb      	ldrb	r3, [r7, #7]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4a68      	ldr	r2, [pc, #416]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002b64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4a66      	ldr	r2, [pc, #408]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b72:	2200      	movs	r2, #0
 8002b74:	4619      	mov	r1, r3
 8002b76:	f003 ff31 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d9dd      	bls.n	8002b42 <UltraWorkModule_AlternateMode+0xea>
	}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ((IdleTime + StimuTime) * 5)))
 8002b86:	e0b5      	b.n	8002cf4 <UltraWorkModule_AlternateMode+0x29c>
	}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 8002b88:	4b64      	ldr	r3, [pc, #400]	@ (8002d1c <UltraWorkModule_AlternateMode+0x2c4>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002b90:	881b      	ldrh	r3, [r3, #0]
 8002b92:	441a      	add	r2, r3
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b58      	ldr	r3, [pc, #352]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d858      	bhi.n	8002c56 <UltraWorkModule_AlternateMode+0x1fe>
 8002ba4:	4b55      	ldr	r3, [pc, #340]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9a      	subs	r2, r3, r2
 8002bb0:	4b5a      	ldr	r3, [pc, #360]	@ (8002d1c <UltraWorkModule_AlternateMode+0x2c4>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	460b      	mov	r3, r1
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d946      	bls.n	8002c56 <UltraWorkModule_AlternateMode+0x1fe>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	71fb      	strb	r3, [r7, #7]
 8002bcc:	e03f      	b.n	8002c4e <UltraWorkModule_AlternateMode+0x1f6>
			if((tag_i % 2) == 1)
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d01e      	beq.n	8002c18 <UltraWorkModule_AlternateMode+0x1c0>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a49      	ldr	r2, [pc, #292]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002bde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4a48      	ldr	r2, [pc, #288]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002be6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	4a47      	ldr	r2, [pc, #284]	@ (8002d0c <UltraWorkModule_AlternateMode+0x2b4>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	f003 fef3 	bl	80069dc <HAL_GPIO_WritePin>
				if(DevParamRead.UltraParam.VibraEnableFlg == 1)
 8002bf6:	4b46      	ldr	r3, [pc, #280]	@ (8002d10 <UltraWorkModule_AlternateMode+0x2b8>)
 8002bf8:	8b5b      	ldrh	r3, [r3, #26]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d124      	bne.n	8002c48 <UltraWorkModule_AlternateMode+0x1f0>
					HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	4a44      	ldr	r2, [pc, #272]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002c02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	4a43      	ldr	r2, [pc, #268]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4619      	mov	r1, r3
 8002c12:	f003 fee3 	bl	80069dc <HAL_GPIO_WritePin>
 8002c16:	e017      	b.n	8002c48 <UltraWorkModule_AlternateMode+0x1f0>
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002c18:	79fb      	ldrb	r3, [r7, #7]
 8002c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002c1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c20:	79fb      	ldrb	r3, [r7, #7]
 8002c22:	4a3d      	ldr	r2, [pc, #244]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	f003 fed6 	bl	80069dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	4a34      	ldr	r2, [pc, #208]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002c34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	4a33      	ldr	r2, [pc, #204]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002c3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c40:	2200      	movs	r2, #0
 8002c42:	4619      	mov	r1, r3
 8002c44:	f003 feca 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	71fb      	strb	r3, [r7, #7]
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	2b07      	cmp	r3, #7
 8002c52:	d9bc      	bls.n	8002bce <UltraWorkModule_AlternateMode+0x176>
	}else if((UltraWorkTime >= ((IdleTime + StimuTime) * 5)) && (UltraWorkTime < (StimuTime * 15 + IdleTime * 5)))
 8002c54:	e04e      	b.n	8002cf4 <UltraWorkModule_AlternateMode+0x29c>
	}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 8002c56:	4b29      	ldr	r3, [pc, #164]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002c58:	881b      	ldrh	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9a      	subs	r2, r3, r2
 8002c62:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <UltraWorkModule_AlternateMode+0x2c4>)
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	4413      	add	r3, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b23      	ldr	r3, [pc, #140]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d838      	bhi.n	8002cec <UltraWorkModule_AlternateMode+0x294>
 8002c7a:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <UltraWorkModule_AlternateMode+0x2a4>)
 8002c7c:	881b      	ldrh	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b26      	ldr	r3, [pc, #152]	@ (8002d1c <UltraWorkModule_AlternateMode+0x2c4>)
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	441a      	add	r2, r3
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d929      	bls.n	8002cec <UltraWorkModule_AlternateMode+0x294>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	e022      	b.n	8002ce4 <UltraWorkModule_AlternateMode+0x28c>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i * 2 + 1], Motor_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d14 <UltraWorkModule_AlternateMode+0x2bc>)
 8002ca6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	3301      	adds	r3, #1
 8002cb0:	4a19      	ldr	r2, [pc, #100]	@ (8002d18 <UltraWorkModule_AlternateMode+0x2c0>)
 8002cb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4619      	mov	r1, r3
 8002cba:	f003 fe8f 	bl	80069dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i * 2 + 1], Ultra_Gpio_Pin[tag_i * 2 + 1], GPIO_PIN_RESET);
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002d04 <UltraWorkModule_AlternateMode+0x2ac>)
 8002cc6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	3301      	adds	r3, #1
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <UltraWorkModule_AlternateMode+0x2b0>)
 8002cd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f003 fe7f 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < (ULTRACHNUM / 2);tag_i++)
 8002cde:	79fb      	ldrb	r3, [r7, #7]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	71fb      	strb	r3, [r7, #7]
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d9d9      	bls.n	8002c9e <UltraWorkModule_AlternateMode+0x246>
	}else if((UltraWorkTime >= (StimuTime * 15 + IdleTime * 5)) && (UltraWorkTime < (StimuTime * 10 + IdleTime * 10)))
 8002cea:	e003      	b.n	8002cf4 <UltraWorkModule_AlternateMode+0x29c>
		UltraWorkTime = 0;
 8002cec:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <UltraWorkModule_AlternateMode+0x2a8>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
}
 8002cf2:	e7ff      	b.n	8002cf4 <UltraWorkModule_AlternateMode+0x29c>
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000012 	.word	0x20000012
 8002d00:	20000618 	.word	0x20000618
 8002d04:	20000018 	.word	0x20000018
 8002d08:	20000058 	.word	0x20000058
 8002d0c:	20000008 	.word	0x20000008
 8002d10:	2000061c 	.word	0x2000061c
 8002d14:	20000038 	.word	0x20000038
 8002d18:	20000068 	.word	0x20000068
 8002d1c:	20000014 	.word	0x20000014

08002d20 <UltraWorkModule_AlternateMode2>:
 *
 *			8探头四组交替工作模式(2个为一组)
 *
 */
static void UltraWorkModule_AlternateMode2(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
	uint8_t group_id = 0;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	73bb      	strb	r3, [r7, #14]
	uint32_t idle_start,idle_stop;
	uint32_t alter_cycle = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]

	alter_cycle = (IdleTime + StimuTime) * 10 / 4;
 8002d32:	4b65      	ldr	r3, [pc, #404]	@ (8002ec8 <UltraWorkModule_AlternateMode2+0x1a8>)
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b64      	ldr	r3, [pc, #400]	@ (8002ecc <UltraWorkModule_AlternateMode2+0x1ac>)
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	441a      	add	r2, r3
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	da00      	bge.n	8002d4c <UltraWorkModule_AlternateMode2+0x2c>
 8002d4a:	3303      	adds	r3, #3
 8002d4c:	109b      	asrs	r3, r3, #2
 8002d4e:	60bb      	str	r3, [r7, #8]
	group_id = UltraWorkTime / alter_cycle;
 8002d50:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed0 <UltraWorkModule_AlternateMode2+0x1b0>)
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	73bb      	strb	r3, [r7, #14]
	idle_start = ((group_id + 4) * StimuTime + (group_id * IdleTime)) * 10 / 4;
 8002d5c:	7bbb      	ldrb	r3, [r7, #14]
 8002d5e:	3304      	adds	r3, #4
 8002d60:	4a5a      	ldr	r2, [pc, #360]	@ (8002ecc <UltraWorkModule_AlternateMode2+0x1ac>)
 8002d62:	8812      	ldrh	r2, [r2, #0]
 8002d64:	fb03 f202 	mul.w	r2, r3, r2
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	4957      	ldr	r1, [pc, #348]	@ (8002ec8 <UltraWorkModule_AlternateMode2+0x1a8>)
 8002d6c:	8809      	ldrh	r1, [r1, #0]
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	441a      	add	r2, r3
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	da00      	bge.n	8002d82 <UltraWorkModule_AlternateMode2+0x62>
 8002d80:	3303      	adds	r3, #3
 8002d82:	109b      	asrs	r3, r3, #2
 8002d84:	607b      	str	r3, [r7, #4]
	idle_stop = alter_cycle * (group_id + 1);
 8002d86:	7bbb      	ldrb	r3, [r7, #14]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	603b      	str	r3, [r7, #0]

	if((UltraWorkTime > idle_start) && (UltraWorkTime <= idle_stop))
 8002d94:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed0 <UltraWorkModule_AlternateMode2+0x1b0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d206      	bcs.n	8002dac <UltraWorkModule_AlternateMode2+0x8c>
 8002d9e:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed0 <UltraWorkModule_AlternateMode2+0x1b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d301      	bcc.n	8002dac <UltraWorkModule_AlternateMode2+0x8c>
	{
		group_id = 4;
 8002da8:	2304      	movs	r3, #4
 8002daa:	73bb      	strb	r3, [r7, #14]
	}

	switch(group_id)
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	dc02      	bgt.n	8002db8 <UltraWorkModule_AlternateMode2+0x98>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da03      	bge.n	8002dbe <UltraWorkModule_AlternateMode2+0x9e>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
		}
		break;
	default:
		break;
 8002db6:	e070      	b.n	8002e9a <UltraWorkModule_AlternateMode2+0x17a>
	switch(group_id)
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d04c      	beq.n	8002e56 <UltraWorkModule_AlternateMode2+0x136>
		break;
 8002dbc:	e06d      	b.n	8002e9a <UltraWorkModule_AlternateMode2+0x17a>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i ++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	e044      	b.n	8002e4e <UltraWorkModule_AlternateMode2+0x12e>
			if((tag_i == (group_id * 2)) || (tag_i == (group_id * 2 + 1)))
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d005      	beq.n	8002dda <UltraWorkModule_AlternateMode2+0xba>
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	7bbb      	ldrb	r3, [r7, #14]
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d11e      	bne.n	8002e18 <UltraWorkModule_AlternateMode2+0xf8>
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], (GPIO_PinState)UltraEnFlg[tag_i]);
 8002dda:	7bfb      	ldrb	r3, [r7, #15]
 8002ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8002ed4 <UltraWorkModule_AlternateMode2+0x1b4>)
 8002dde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	4a3c      	ldr	r2, [pc, #240]	@ (8002ed8 <UltraWorkModule_AlternateMode2+0x1b8>)
 8002de6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8002dea:	7bfb      	ldrb	r3, [r7, #15]
 8002dec:	4a3b      	ldr	r2, [pc, #236]	@ (8002edc <UltraWorkModule_AlternateMode2+0x1bc>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	461a      	mov	r2, r3
 8002df2:	f003 fdf3 	bl	80069dc <HAL_GPIO_WritePin>
				if(MotorEnableFlg == 1)
 8002df6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee0 <UltraWorkModule_AlternateMode2+0x1c0>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d124      	bne.n	8002e48 <UltraWorkModule_AlternateMode2+0x128>
					HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_SET);
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
 8002e00:	4a38      	ldr	r2, [pc, #224]	@ (8002ee4 <UltraWorkModule_AlternateMode2+0x1c4>)
 8002e02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	4a37      	ldr	r2, [pc, #220]	@ (8002ee8 <UltraWorkModule_AlternateMode2+0x1c8>)
 8002e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	4619      	mov	r1, r3
 8002e12:	f003 fde3 	bl	80069dc <HAL_GPIO_WritePin>
				if(MotorEnableFlg == 1)
 8002e16:	e017      	b.n	8002e48 <UltraWorkModule_AlternateMode2+0x128>
				HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002e18:	7bfb      	ldrb	r3, [r7, #15]
 8002e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed4 <UltraWorkModule_AlternateMode2+0x1b4>)
 8002e1c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	4a2d      	ldr	r2, [pc, #180]	@ (8002ed8 <UltraWorkModule_AlternateMode2+0x1b8>)
 8002e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	f003 fdd6 	bl	80069dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002e30:	7bfb      	ldrb	r3, [r7, #15]
 8002e32:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <UltraWorkModule_AlternateMode2+0x1c4>)
 8002e34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	4a2b      	ldr	r2, [pc, #172]	@ (8002ee8 <UltraWorkModule_AlternateMode2+0x1c8>)
 8002e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e40:	2200      	movs	r2, #0
 8002e42:	4619      	mov	r1, r3
 8002e44:	f003 fdca 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i ++)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b07      	cmp	r3, #7
 8002e52:	d9b7      	bls.n	8002dc4 <UltraWorkModule_AlternateMode2+0xa4>
		break;
 8002e54:	e021      	b.n	8002e9a <UltraWorkModule_AlternateMode2+0x17a>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i ++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e01a      	b.n	8002e92 <UltraWorkModule_AlternateMode2+0x172>
			HAL_GPIO_WritePin(Motor_Gpio_Port[tag_i], Motor_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ed4 <UltraWorkModule_AlternateMode2+0x1b4>)
 8002e60:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed8 <UltraWorkModule_AlternateMode2+0x1b8>)
 8002e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	f003 fdb4 	bl	80069dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Ultra_Gpio_Port[tag_i], Ultra_Gpio_Pin[tag_i], GPIO_PIN_RESET);
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <UltraWorkModule_AlternateMode2+0x1c4>)
 8002e78:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ee8 <UltraWorkModule_AlternateMode2+0x1c8>)
 8002e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e84:	2200      	movs	r2, #0
 8002e86:	4619      	mov	r1, r3
 8002e88:	f003 fda8 	bl	80069dc <HAL_GPIO_WritePin>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i ++)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	73fb      	strb	r3, [r7, #15]
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b07      	cmp	r3, #7
 8002e96:	d9e1      	bls.n	8002e5c <UltraWorkModule_AlternateMode2+0x13c>
		break;
 8002e98:	bf00      	nop
	}

	if(UltraWorkTime > (IdleTime + StimuTime) * 10)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec8 <UltraWorkModule_AlternateMode2+0x1a8>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ecc <UltraWorkModule_AlternateMode2+0x1ac>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b07      	ldr	r3, [pc, #28]	@ (8002ed0 <UltraWorkModule_AlternateMode2+0x1b0>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d202      	bcs.n	8002ebe <UltraWorkModule_AlternateMode2+0x19e>
	{
		UltraWorkTime = 0;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <UltraWorkModule_AlternateMode2+0x1b0>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
	}

}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000014 	.word	0x20000014
 8002ecc:	20000012 	.word	0x20000012
 8002ed0:	20000618 	.word	0x20000618
 8002ed4:	20000038 	.word	0x20000038
 8002ed8:	20000068 	.word	0x20000068
 8002edc:	20000008 	.word	0x20000008
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	20000018 	.word	0x20000018
 8002ee8:	20000058 	.word	0x20000058

08002eec <UltraWorkModule_CycleMode>:
 *
 *			8探头循环工作模式
 *
 */
static void UltraWorkModule_CycleMode(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
	uint32_t sum_time,ave_time = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]
	static uint8_t sCycleCh = 0;

	sum_time = (StimuTime + IdleTime) * 10;
 8002ef6:	4b54      	ldr	r3, [pc, #336]	@ (8003048 <UltraWorkModule_CycleMode+0x15c>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	4b53      	ldr	r3, [pc, #332]	@ (800304c <UltraWorkModule_CycleMode+0x160>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	441a      	add	r2, r3
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	603b      	str	r3, [r7, #0]
	ave_time = sum_time / ULTRACHNUM;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	08db      	lsrs	r3, r3, #3
 8002f10:	607b      	str	r3, [r7, #4]

	if(UltraWorkTime < (StimuTime * 10))
 8002f12:	4b4d      	ldr	r3, [pc, #308]	@ (8003048 <UltraWorkModule_CycleMode+0x15c>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4613      	mov	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	4413      	add	r3, r2
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b4b      	ldr	r3, [pc, #300]	@ (8003050 <UltraWorkModule_CycleMode+0x164>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d928      	bls.n	8002f7c <UltraWorkModule_CycleMode+0x90>
	{
		HAL_GPIO_WritePin(Ultra_Gpio_Port[sCycleCh], Ultra_Gpio_Pin[sCycleCh], UltraEnFlg[sCycleCh]);
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <UltraWorkModule_CycleMode+0x16c>)
 8002f32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f36:	4a47      	ldr	r2, [pc, #284]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4a47      	ldr	r2, [pc, #284]	@ (800305c <UltraWorkModule_CycleMode+0x170>)
 8002f3e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002f42:	4a44      	ldr	r2, [pc, #272]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	4610      	mov	r0, r2
 8002f48:	4a45      	ldr	r2, [pc, #276]	@ (8003060 <UltraWorkModule_CycleMode+0x174>)
 8002f4a:	5c12      	ldrb	r2, [r2, r0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fd45 	bl	80069dc <HAL_GPIO_WritePin>
		if(MotorEnableFlg == 1)
 8002f52:	4b44      	ldr	r3, [pc, #272]	@ (8003064 <UltraWorkModule_CycleMode+0x178>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d16b      	bne.n	8003032 <UltraWorkModule_CycleMode+0x146>
		{
			HAL_GPIO_WritePin(Motor_Gpio_Port[sCycleCh], Motor_Gpio_Pin[sCycleCh], GPIO_PIN_SET);
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4b41      	ldr	r3, [pc, #260]	@ (8003068 <UltraWorkModule_CycleMode+0x17c>)
 8002f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f66:	4a3b      	ldr	r2, [pc, #236]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4a3f      	ldr	r2, [pc, #252]	@ (800306c <UltraWorkModule_CycleMode+0x180>)
 8002f6e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4618      	mov	r0, r3
 8002f76:	f003 fd31 	bl	80069dc <HAL_GPIO_WritePin>
 8002f7a:	e05a      	b.n	8003032 <UltraWorkModule_CycleMode+0x146>
		}
	}else if((UltraWorkTime >= (StimuTime * 10)) && (UltraWorkTime < ave_time))
 8002f7c:	4b32      	ldr	r3, [pc, #200]	@ (8003048 <UltraWorkModule_CycleMode+0x15c>)
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	005b      	lsls	r3, r3, #1
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	4b30      	ldr	r3, [pc, #192]	@ (8003050 <UltraWorkModule_CycleMode+0x164>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d825      	bhi.n	8002fe0 <UltraWorkModule_CycleMode+0xf4>
 8002f94:	4b2e      	ldr	r3, [pc, #184]	@ (8003050 <UltraWorkModule_CycleMode+0x164>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d920      	bls.n	8002fe0 <UltraWorkModule_CycleMode+0xf4>
	{
		HAL_GPIO_WritePin(Ultra_Gpio_Port[sCycleCh], Ultra_Gpio_Pin[sCycleCh], GPIO_PIN_RESET);
 8002f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8003058 <UltraWorkModule_CycleMode+0x16c>)
 8002fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002faa:	4a2a      	ldr	r2, [pc, #168]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	4611      	mov	r1, r2
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	@ (800305c <UltraWorkModule_CycleMode+0x170>)
 8002fb2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f003 fd0f 	bl	80069dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Gpio_Port[sCycleCh], Motor_Gpio_Pin[sCycleCh], GPIO_PIN_RESET);
 8002fbe:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <UltraWorkModule_CycleMode+0x17c>)
 8002fc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fca:	4a22      	ldr	r2, [pc, #136]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fcc:	7812      	ldrb	r2, [r2, #0]
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4a26      	ldr	r2, [pc, #152]	@ (800306c <UltraWorkModule_CycleMode+0x180>)
 8002fd2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fcff 	bl	80069dc <HAL_GPIO_WritePin>
 8002fde:	e028      	b.n	8003032 <UltraWorkModule_CycleMode+0x146>
	}else
	{
		HAL_GPIO_WritePin(Ultra_Gpio_Port[sCycleCh], Ultra_Gpio_Pin[sCycleCh], GPIO_PIN_RESET);
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8003058 <UltraWorkModule_CycleMode+0x16c>)
 8002fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fec:	4a19      	ldr	r2, [pc, #100]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8002fee:	7812      	ldrb	r2, [r2, #0]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800305c <UltraWorkModule_CycleMode+0x170>)
 8002ff4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f003 fcee 	bl	80069dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Gpio_Port[sCycleCh], Motor_Gpio_Pin[sCycleCh], GPIO_PIN_RESET);
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <UltraWorkModule_CycleMode+0x17c>)
 8003008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800300c:	4a11      	ldr	r2, [pc, #68]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	4611      	mov	r1, r2
 8003012:	4a16      	ldr	r2, [pc, #88]	@ (800306c <UltraWorkModule_CycleMode+0x180>)
 8003014:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8003018:	2200      	movs	r2, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f003 fcde 	bl	80069dc <HAL_GPIO_WritePin>
		UltraWorkTime = 0;
 8003020:	4b0b      	ldr	r3, [pc, #44]	@ (8003050 <UltraWorkModule_CycleMode+0x164>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
		sCycleCh++;
 8003026:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4b09      	ldr	r3, [pc, #36]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8003030:	701a      	strb	r2, [r3, #0]
	}

	if(sCycleCh >= ULTRACHNUM)
 8003032:	4b08      	ldr	r3, [pc, #32]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b07      	cmp	r3, #7
 8003038:	d902      	bls.n	8003040 <UltraWorkModule_CycleMode+0x154>
	{
		sCycleCh = 0;
 800303a:	4b06      	ldr	r3, [pc, #24]	@ (8003054 <UltraWorkModule_CycleMode+0x168>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
	}
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000012 	.word	0x20000012
 800304c:	20000014 	.word	0x20000014
 8003050:	20000618 	.word	0x20000618
 8003054:	2000066c 	.word	0x2000066c
 8003058:	20000018 	.word	0x20000018
 800305c:	20000058 	.word	0x20000058
 8003060:	20000008 	.word	0x20000008
 8003064:	20000010 	.word	0x20000010
 8003068:	20000038 	.word	0x20000038
 800306c:	20000068 	.word	0x20000068

08003070 <AD5160_Delay>:

static uint8_t PowerLevel = 1;
static uint8_t PowerLevel_old = 1;

static void AD5160_Delay(void)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
	uint8_t i = 30;
 8003076:	231e      	movs	r3, #30
 8003078:	71fb      	strb	r3, [r7, #7]

	while(i--);
 800307a:	bf00      	nop
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	71fa      	strb	r2, [r7, #7]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1fa      	bne.n	800307c <AD5160_Delay+0xc>
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr
	...

08003094 <AD5160_CSSet>:

static void AD5160_CSSet(uint8_t ch,GPIO_PinState PinState)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b082      	sub	sp, #8
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	460a      	mov	r2, r1
 800309e:	71fb      	strb	r3, [r7, #7]
 80030a0:	4613      	mov	r3, r2
 80030a2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_CS_PORT[ch], AD5160_CS_GPIO[ch], PinState);
 80030a4:	79fb      	ldrb	r3, [r7, #7]
 80030a6:	4a07      	ldr	r2, [pc, #28]	@ (80030c4 <AD5160_CSSet+0x30>)
 80030a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	4a06      	ldr	r2, [pc, #24]	@ (80030c8 <AD5160_CSSet+0x34>)
 80030b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030b4:	79ba      	ldrb	r2, [r7, #6]
 80030b6:	4619      	mov	r1, r3
 80030b8:	f003 fc90 	bl	80069dc <HAL_GPIO_WritePin>
}
 80030bc:	bf00      	nop
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	20000090 	.word	0x20000090
 80030c8:	20000084 	.word	0x20000084

080030cc <AD5160_CLKSet>:

static void AD5160_CLKSet(uint8_t ch,GPIO_PinState PinState)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	460a      	mov	r2, r1
 80030d6:	71fb      	strb	r3, [r7, #7]
 80030d8:	4613      	mov	r3, r2
 80030da:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_CLK_PORT[ch], AD5160_CLK_GPIO[ch], PinState);
 80030dc:	79fb      	ldrb	r3, [r7, #7]
 80030de:	4a07      	ldr	r2, [pc, #28]	@ (80030fc <AD5160_CLKSet+0x30>)
 80030e0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80030e4:	79fb      	ldrb	r3, [r7, #7]
 80030e6:	4a06      	ldr	r2, [pc, #24]	@ (8003100 <AD5160_CLKSet+0x34>)
 80030e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030ec:	79ba      	ldrb	r2, [r7, #6]
 80030ee:	4619      	mov	r1, r3
 80030f0:	f003 fc74 	bl	80069dc <HAL_GPIO_WritePin>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200000a0 	.word	0x200000a0
 8003100:	2000008c 	.word	0x2000008c

08003104 <AD5160_DATASet>:

static void AD5160_DATASet(uint8_t ch,GPIO_PinState PinState)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	460a      	mov	r2, r1
 800310e:	71fb      	strb	r3, [r7, #7]
 8003110:	4613      	mov	r3, r2
 8003112:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD5160_DATA_PORT[ch], AD5160_DATA_GPIO[ch], PinState);
 8003114:	79fb      	ldrb	r3, [r7, #7]
 8003116:	4a07      	ldr	r2, [pc, #28]	@ (8003134 <AD5160_DATASet+0x30>)
 8003118:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800311c:	79fb      	ldrb	r3, [r7, #7]
 800311e:	4a06      	ldr	r2, [pc, #24]	@ (8003138 <AD5160_DATASet+0x34>)
 8003120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003124:	79ba      	ldrb	r2, [r7, #6]
 8003126:	4619      	mov	r1, r3
 8003128:	f003 fc58 	bl	80069dc <HAL_GPIO_WritePin>
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000098 	.word	0x20000098
 8003138:	20000088 	.word	0x20000088

0800313c <AD5160_SendData>:

static void AD5160_SendData(uint8_t ch,uint8_t data)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	460a      	mov	r2, r1
 8003146:	71fb      	strb	r3, [r7, #7]
 8003148:	4613      	mov	r3, r2
 800314a:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

	AD5160_CSSet(ch,GPIO_PIN_SET);
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	2101      	movs	r1, #1
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff ff9d 	bl	8003094 <AD5160_CSSet>
	AD5160_CLKSet(ch,GPIO_PIN_RESET);
 800315a:	79fb      	ldrb	r3, [r7, #7]
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff ffb4 	bl	80030cc <AD5160_CLKSet>
	AD5160_CSSet(ch, GPIO_PIN_RESET);
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff ff93 	bl	8003094 <AD5160_CSSet>

	for(tag_i = 0;tag_i < 8;tag_i++)
 800316e:	2300      	movs	r3, #0
 8003170:	73fb      	strb	r3, [r7, #15]
 8003172:	e023      	b.n	80031bc <AD5160_SendData+0x80>
	{
		AD5160_CLKSet(ch,GPIO_PIN_RESET);
 8003174:	79fb      	ldrb	r3, [r7, #7]
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ffa7 	bl	80030cc <AD5160_CLKSet>
		if((data << tag_i) & 0x80)
 800317e:	79ba      	ldrb	r2, [r7, #6]
 8003180:	7bfb      	ldrb	r3, [r7, #15]
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <AD5160_SendData+0x5e>
		{
			AD5160_DATASet(ch,GPIO_PIN_SET);
 800318e:	79fb      	ldrb	r3, [r7, #7]
 8003190:	2101      	movs	r1, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffb6 	bl	8003104 <AD5160_DATASet>
 8003198:	e004      	b.n	80031a4 <AD5160_SendData+0x68>
		}else
		{
			AD5160_DATASet(ch,GPIO_PIN_RESET);
 800319a:	79fb      	ldrb	r3, [r7, #7]
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f7ff ffb0 	bl	8003104 <AD5160_DATASet>
		}
		AD5160_Delay();
 80031a4:	f7ff ff64 	bl	8003070 <AD5160_Delay>
		AD5160_CLKSet(ch,GPIO_PIN_SET);
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2101      	movs	r1, #1
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff ff8d 	bl	80030cc <AD5160_CLKSet>
		AD5160_Delay();
 80031b2:	f7ff ff5d 	bl	8003070 <AD5160_Delay>
	for(tag_i = 0;tag_i < 8;tag_i++)
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	3301      	adds	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	2b07      	cmp	r3, #7
 80031c0:	d9d8      	bls.n	8003174 <AD5160_SendData+0x38>
	}

	AD5160_CSSet(ch, GPIO_PIN_SET);
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	2101      	movs	r1, #1
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff64 	bl	8003094 <AD5160_CSSet>
	AD5160_CLKSet(ch,GPIO_PIN_RESET);
 80031cc:	79fb      	ldrb	r3, [r7, #7]
 80031ce:	2100      	movs	r1, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff ff7b 	bl	80030cc <AD5160_CLKSet>
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <DevAD5160_ValueLoad>:

void DevAD5160_ValueLoad(uint8_t power_level)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
	if(power_level < POWERLEVELNUM)
 80031ea:	79fb      	ldrb	r3, [r7, #7]
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d802      	bhi.n	80031f6 <DevAD5160_ValueLoad+0x16>
	{
		PowerLevel = power_level;
 80031f0:	4a03      	ldr	r2, [pc, #12]	@ (8003200 <DevAD5160_ValueLoad+0x20>)
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	7013      	strb	r3, [r2, #0]
	}
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	200000a8 	.word	0x200000a8

08003204 <DevAD5160Func_Init>:

void DevAD5160Func_Init(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
	uint8_t res_data = 165;
 800320a:	23a5      	movs	r3, #165	@ 0xa5
 800320c:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	71fb      	strb	r3, [r7, #7]

	PowerLevel = DevParamRead.UltraParam.UltraPowerLevel;
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <DevAD5160Func_Init+0x54>)
 8003214:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4b10      	ldr	r3, [pc, #64]	@ (800325c <DevAD5160Func_Init+0x58>)
 800321c:	701a      	strb	r2, [r3, #0]
	res_data = ResistCode[PowerLevel];
 800321e:	4b0f      	ldr	r3, [pc, #60]	@ (800325c <DevAD5160Func_Init+0x58>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <DevAD5160Func_Init+0x5c>)
 8003226:	5c9b      	ldrb	r3, [r3, r2]
 8003228:	71bb      	strb	r3, [r7, #6]
	for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 800322a:	2300      	movs	r3, #0
 800322c:	71fb      	strb	r3, [r7, #7]
 800322e:	e008      	b.n	8003242 <DevAD5160Func_Init+0x3e>
	{
		AD5160_SendData(tag_i,res_data);
 8003230:	79ba      	ldrb	r2, [r7, #6]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff80 	bl	800313c <AD5160_SendData>
	for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 800323c:	79fb      	ldrb	r3, [r7, #7]
 800323e:	3301      	adds	r3, #1
 8003240:	71fb      	strb	r3, [r7, #7]
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d9f3      	bls.n	8003230 <DevAD5160Func_Init+0x2c>
	}
	PowerLevel_old = PowerLevel;
 8003248:	4b04      	ldr	r3, [pc, #16]	@ (800325c <DevAD5160Func_Init+0x58>)
 800324a:	781a      	ldrb	r2, [r3, #0]
 800324c:	4b05      	ldr	r3, [pc, #20]	@ (8003264 <DevAD5160Func_Init+0x60>)
 800324e:	701a      	strb	r2, [r3, #0]
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000061c 	.word	0x2000061c
 800325c:	200000a8 	.word	0x200000a8
 8003260:	2000007c 	.word	0x2000007c
 8003264:	200000a9 	.word	0x200000a9

08003268 <DevAD5160Func_Main>:

void DevAD5160Func_Main(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
	uint8_t res_data = 255;
 800326e:	23ff      	movs	r3, #255	@ 0xff
 8003270:	71bb      	strb	r3, [r7, #6]
	uint8_t tag_i;

	if(PowerLevel != PowerLevel_old)
 8003272:	4b1f      	ldr	r3, [pc, #124]	@ (80032f0 <DevAD5160Func_Main+0x88>)
 8003274:	781a      	ldrb	r2, [r3, #0]
 8003276:	4b1f      	ldr	r3, [pc, #124]	@ (80032f4 <DevAD5160Func_Main+0x8c>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d034      	beq.n	80032e8 <DevAD5160Func_Main+0x80>
	{
		HAL_GPIO_WritePin(V36CH1_4_EN_GPIO_Port, V36CH1_4_EN_Pin, GPIO_PIN_RESET);
 800327e:	2200      	movs	r2, #0
 8003280:	2110      	movs	r1, #16
 8003282:	481d      	ldr	r0, [pc, #116]	@ (80032f8 <DevAD5160Func_Main+0x90>)
 8003284:	f003 fbaa 	bl	80069dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(V36CH5_8_EN_GPIO_Port, V36CH5_8_EN_Pin, GPIO_PIN_RESET);
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800328e:	481b      	ldr	r0, [pc, #108]	@ (80032fc <DevAD5160Func_Main+0x94>)
 8003290:	f003 fba4 	bl	80069dc <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8003294:	2014      	movs	r0, #20
 8003296:	f001 fc61 	bl	8004b5c <HAL_Delay>
		res_data = ResistCode[PowerLevel];
 800329a:	4b15      	ldr	r3, [pc, #84]	@ (80032f0 <DevAD5160Func_Main+0x88>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	4b17      	ldr	r3, [pc, #92]	@ (8003300 <DevAD5160Func_Main+0x98>)
 80032a2:	5c9b      	ldrb	r3, [r3, r2]
 80032a4:	71bb      	strb	r3, [r7, #6]
		for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	71fb      	strb	r3, [r7, #7]
 80032aa:	e008      	b.n	80032be <DevAD5160Func_Main+0x56>
		{
			AD5160_SendData(tag_i,res_data);
 80032ac:	79ba      	ldrb	r2, [r7, #6]
 80032ae:	79fb      	ldrb	r3, [r7, #7]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff42 	bl	800313c <AD5160_SendData>
		for(tag_i = 0;tag_i < AD5160_MaxCh;tag_i++)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	3301      	adds	r3, #1
 80032bc:	71fb      	strb	r3, [r7, #7]
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d9f3      	bls.n	80032ac <DevAD5160Func_Main+0x44>
		}
		PowerLevel_old = PowerLevel;
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <DevAD5160Func_Main+0x88>)
 80032c6:	781a      	ldrb	r2, [r3, #0]
 80032c8:	4b0a      	ldr	r3, [pc, #40]	@ (80032f4 <DevAD5160Func_Main+0x8c>)
 80032ca:	701a      	strb	r2, [r3, #0]
		HAL_Delay(20);
 80032cc:	2014      	movs	r0, #20
 80032ce:	f001 fc45 	bl	8004b5c <HAL_Delay>
		HAL_GPIO_WritePin(V36CH1_4_EN_GPIO_Port, V36CH1_4_EN_Pin, GPIO_PIN_SET);
 80032d2:	2201      	movs	r2, #1
 80032d4:	2110      	movs	r1, #16
 80032d6:	4808      	ldr	r0, [pc, #32]	@ (80032f8 <DevAD5160Func_Main+0x90>)
 80032d8:	f003 fb80 	bl	80069dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(V36CH5_8_EN_GPIO_Port, V36CH5_8_EN_Pin, GPIO_PIN_SET);
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032e2:	4806      	ldr	r0, [pc, #24]	@ (80032fc <DevAD5160Func_Main+0x94>)
 80032e4:	f003 fb7a 	bl	80069dc <HAL_GPIO_WritePin>
	}
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	200000a8 	.word	0x200000a8
 80032f4:	200000a9 	.word	0x200000a9
 80032f8:	40011800 	.word	0x40011800
 80032fc:	40010800 	.word	0x40010800
 8003300:	2000007c 	.word	0x2000007c

08003304 <AD9833_Delay>:


static uint16_t UltraParam_Old[ULTRACHNUM] = {0};

static void AD9833_Delay(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
	uint8_t i = 2;
 800330a:	2302      	movs	r3, #2
 800330c:	71fb      	strb	r3, [r7, #7]
	while(i--);
 800330e:	bf00      	nop
 8003310:	79fb      	ldrb	r3, [r7, #7]
 8003312:	1e5a      	subs	r2, r3, #1
 8003314:	71fa      	strb	r2, [r7, #7]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1fa      	bne.n	8003310 <AD9833_Delay+0xc>
}
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <AD9833_FSYNCSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833FSYNC脚的电平信号
 */
static void AD9833_FSYNCSet(uint8_t ch,GPIO_PinState PinState)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	460a      	mov	r2, r1
 8003332:	71fb      	strb	r3, [r7, #7]
 8003334:	4613      	mov	r3, r2
 8003336:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_FSYNC_PORT[ch], AD9833_FSYNC_GPIO[ch], PinState);
 8003338:	79fb      	ldrb	r3, [r7, #7]
 800333a:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <AD9833_FSYNCSet+0x30>)
 800333c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003340:	79fb      	ldrb	r3, [r7, #7]
 8003342:	4a06      	ldr	r2, [pc, #24]	@ (800335c <AD9833_FSYNCSet+0x34>)
 8003344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003348:	79ba      	ldrb	r2, [r7, #6]
 800334a:	4619      	mov	r1, r3
 800334c:	f003 fb46 	bl	80069dc <HAL_GPIO_WritePin>
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	200000dc 	.word	0x200000dc
 800335c:	200000ac 	.word	0x200000ac

08003360 <AD9833_SCLKSet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SCLK脚的电平信号
 */
static void AD9833_SCLKSet(uint8_t ch,GPIO_PinState PinState)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	460a      	mov	r2, r1
 800336a:	71fb      	strb	r3, [r7, #7]
 800336c:	4613      	mov	r3, r2
 800336e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SCLK_PORT[ch], AD9833_SCLK_GPIO[ch], PinState);
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	4a07      	ldr	r2, [pc, #28]	@ (8003390 <AD9833_SCLKSet+0x30>)
 8003374:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003378:	79fb      	ldrb	r3, [r7, #7]
 800337a:	4a06      	ldr	r2, [pc, #24]	@ (8003394 <AD9833_SCLKSet+0x34>)
 800337c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003380:	79ba      	ldrb	r2, [r7, #6]
 8003382:	4619      	mov	r1, r3
 8003384:	f003 fb2a 	bl	80069dc <HAL_GPIO_WritePin>
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	2000011c 	.word	0x2000011c
 8003394:	200000cc 	.word	0x200000cc

08003398 <AD9833_SDATASet>:
 * 			PinState:电平置位
 * @retval  none
 * @func	写入AD9833SDATA脚的电平信号
 */
static void AD9833_SDATASet(uint8_t ch,GPIO_PinState PinState)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	460a      	mov	r2, r1
 80033a2:	71fb      	strb	r3, [r7, #7]
 80033a4:	4613      	mov	r3, r2
 80033a6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(AD9833_SDATA_PORT[ch], AD9833_SDATA_GPIO[ch], PinState);
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <AD9833_SDATASet+0x30>)
 80033ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4a06      	ldr	r2, [pc, #24]	@ (80033cc <AD9833_SDATASet+0x34>)
 80033b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033b8:	79ba      	ldrb	r2, [r7, #6]
 80033ba:	4619      	mov	r1, r3
 80033bc:	f003 fb0e 	bl	80069dc <HAL_GPIO_WritePin>
}
 80033c0:	bf00      	nop
 80033c2:	3708      	adds	r7, #8
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200000fc 	.word	0x200000fc
 80033cc:	200000bc 	.word	0x200000bc

080033d0 <DevAD9833IO_Init>:
 * @param   ch:超声驱动的通道号
 * @retval  none
 * @func	初始化AD9833 IO口
 */
static void DevAD9833IO_Init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80033d6:	2300      	movs	r3, #0
 80033d8:	71fb      	strb	r3, [r7, #7]

	for(ch = 0; ch < AD9833_MaxCh;ch++)
 80033da:	2300      	movs	r3, #0
 80033dc:	71fb      	strb	r3, [r7, #7]
 80033de:	e011      	b.n	8003404 <DevAD9833IO_Init+0x34>
	{
		AD9833_FSYNCSet(ch,GPIO_PIN_SET);
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	2101      	movs	r1, #1
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff9f 	bl	8003328 <AD9833_FSYNCSet>
		AD9833_SCLKSet(ch,GPIO_PIN_SET);
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	2101      	movs	r1, #1
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ffb6 	bl	8003360 <AD9833_SCLKSet>
		AD9833_SDATASet(ch,GPIO_PIN_SET);
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2101      	movs	r1, #1
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ffcd 	bl	8003398 <AD9833_SDATASet>
	for(ch = 0; ch < AD9833_MaxCh;ch++)
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	3301      	adds	r3, #1
 8003402:	71fb      	strb	r3, [r7, #7]
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b07      	cmp	r3, #7
 8003408:	d9ea      	bls.n	80033e0 <DevAD9833IO_Init+0x10>
	}
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	3708      	adds	r7, #8
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <AD9833_SendData>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SendData(uint8_t ch,uint32_t txdata)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
	uint8_t tag_i = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	73fb      	strb	r3, [r7, #15]

	/*发送指令之前AD9833的SCLK引脚使能，FSYNC引脚复位*/
	AD9833_SCLKSet(ch,SET);
 8003424:	79fb      	ldrb	r3, [r7, #7]
 8003426:	2101      	movs	r1, #1
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff99 	bl	8003360 <AD9833_SCLKSet>
	AD9833_FSYNCSet(ch,SET);
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f7ff ff78 	bl	8003328 <AD9833_FSYNCSet>
	AD9833_FSYNCSet(ch,RESET);
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff73 	bl	8003328 <AD9833_FSYNCSet>

	for(tag_i=0;tag_i<16;tag_i++){
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
 8003446:	e023      	b.n	8003490 <AD9833_SendData+0x7c>
		if (txdata & 0x8000){
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <AD9833_SendData+0x4a>
			AD9833_SDATASet(ch,SET);
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	2101      	movs	r1, #1
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff9e 	bl	8003398 <AD9833_SDATASet>
 800345c:	e004      	b.n	8003468 <AD9833_SendData+0x54>
		}
		else{
			AD9833_SDATASet(ch,RESET);
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	2100      	movs	r1, #0
 8003462:	4618      	mov	r0, r3
 8003464:	f7ff ff98 	bl	8003398 <AD9833_SDATASet>
		}
		AD9833_Delay();
 8003468:	f7ff ff4c 	bl	8003304 <AD9833_Delay>
		AD9833_SCLKSet(ch,RESET);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	2100      	movs	r1, #0
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff ff75 	bl	8003360 <AD9833_SCLKSet>
		AD9833_Delay();
 8003476:	f7ff ff45 	bl	8003304 <AD9833_Delay>
		AD9833_SCLKSet(ch,SET);
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	2101      	movs	r1, #1
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff ff6e 	bl	8003360 <AD9833_SCLKSet>
		txdata<<=1;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	603b      	str	r3, [r7, #0]
	for(tag_i=0;tag_i<16;tag_i++){
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3301      	adds	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	d9d8      	bls.n	8003448 <AD9833_SendData+0x34>
	}
	AD9833_FSYNCSet(ch,SET);
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff ff44 	bl	8003328 <AD9833_FSYNCSet>
}
 80034a0:	bf00      	nop
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <AD9833_SetFreq>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SetFreq(uint8_t ch,uint16_t reg, uint32_t freq)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	603a      	str	r2, [r7, #0]
 80034b2:	71fb      	strb	r3, [r7, #7]
 80034b4:	460b      	mov	r3, r1
 80034b6:	80bb      	strh	r3, [r7, #4]
	uint32_t freq_data;
	uint32_t freq_data_lsb,freq_data_msb;

	freq_data = 268435456 / 11059 * (freq / 1000);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <AD9833_SetFreq+0x5c>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	f645 62d1 	movw	r2, #24273	@ 0x5ed1
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
	freq_data_lsb = reg | (freq_data & 0x3FFF);
 80034cc:	88ba      	ldrh	r2, [r7, #4]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
	freq_data_msb = reg | ((freq_data >> 14) & 0x3FFF);
 80034d8:	88ba      	ldrh	r2, [r7, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	0b9b      	lsrs	r3, r3, #14
 80034de:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
	//设置频率是需要连续写入两次寄存器的值
    //第一次写入包含14个LSB
	//第二次写入包含14个MSB
	AD9833_SendData(ch,freq_data_lsb);
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	6939      	ldr	r1, [r7, #16]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff92 	bl	8003414 <AD9833_SendData>
	AD9833_SendData(ch,freq_data_msb);
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff8d 	bl	8003414 <AD9833_SendData>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	10624dd3 	.word	0x10624dd3

08003508 <AD9833_SetPhase>:
 * 			txdata:要发送的数据
 * @retval  none
 * @func	向AD9833发送指令
 */
static void AD9833_SetPhase(uint8_t ch,uint16_t reg, uint16_t val)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
 8003512:	460b      	mov	r3, r1
 8003514:	80bb      	strh	r3, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	807b      	strh	r3, [r7, #2]
    uint16_t phase = reg;
 800351a:	88bb      	ldrh	r3, [r7, #4]
 800351c:	81fb      	strh	r3, [r7, #14]
    phase |= val;
 800351e:	89fa      	ldrh	r2, [r7, #14]
 8003520:	887b      	ldrh	r3, [r7, #2]
 8003522:	4313      	orrs	r3, r2
 8003524:	81fb      	strh	r3, [r7, #14]
    AD9833_SendData(ch,phase);
 8003526:	89fa      	ldrh	r2, [r7, #14]
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f7ff ff71 	bl	8003414 <AD9833_SendData>
}
 8003532:	bf00      	nop
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <AD9833_SetMode>:
 * @param	Freq_SFR:设置相位寄存器
 * @retval  none
 * @func	向AD9833发送波形输出指令
 */
static void AD9833_SetMode(uint8_t ch,uint16_t WaveMode)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b084      	sub	sp, #16
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	460a      	mov	r2, r1
 8003544:	71fb      	strb	r3, [r7, #7]
 8003546:	4613      	mov	r3, r2
 8003548:	80bb      	strh	r3, [r7, #4]
    uint32_t val = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]
    val = (WaveMode | 0x0000);
 800354e:	88bb      	ldrh	r3, [r7, #4]
 8003550:	60fb      	str	r3, [r7, #12]
    AD9833_SendData(ch,val);
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	68f9      	ldr	r1, [r7, #12]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ff5c 	bl	8003414 <AD9833_SendData>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <DevAD9833Set_Init>:

void DevAD9833Set_Init(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	71fb      	strb	r3, [r7, #7]
	uint16_t ultra_param = 625;
 800356e:	f240 2371 	movw	r3, #625	@ 0x271
 8003572:	80bb      	strh	r3, [r7, #4]
	uint32_t freq = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	603b      	str	r3, [r7, #0]

	DevAD9833IO_Init();
 8003578:	f7ff ff2a 	bl	80033d0 <DevAD9833IO_Init>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 800357c:	4b45      	ldr	r3, [pc, #276]	@ (8003694 <DevAD9833Set_Init+0x130>)
 800357e:	889b      	ldrh	r3, [r3, #4]
 8003580:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8003584:	4293      	cmp	r3, r2
 8003586:	d14b      	bne.n	8003620 <DevAD9833Set_Init+0xbc>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 8003588:	4b42      	ldr	r3, [pc, #264]	@ (8003694 <DevAD9833Set_Init+0x130>)
 800358a:	88db      	ldrh	r3, [r3, #6]
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 800358c:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 8003590:	4293      	cmp	r3, r2
 8003592:	d145      	bne.n	8003620 <DevAD9833Set_Init+0xbc>
	   (DevParamRead.UltraParam.UltraParamChangeFlg[2] == 0xffff))
 8003594:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <DevAD9833Set_Init+0x130>)
 8003596:	891b      	ldrh	r3, [r3, #8]
	   (DevParamRead.UltraParam.UltraParamChangeFlg[1] == 0xeeee) &&
 8003598:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800359c:	4293      	cmp	r3, r2
 800359e:	d13f      	bne.n	8003620 <DevAD9833Set_Init+0xbc>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80035a0:	2300      	movs	r3, #0
 80035a2:	71fb      	strb	r3, [r7, #7]
 80035a4:	e038      	b.n	8003618 <DevAD9833Set_Init+0xb4>
		{
			freq = AD9833STEP * DevParamRead.UltraParam.Freq_Param[tag_i];
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003694 <DevAD9833Set_Init+0x130>)
 80035aa:	3304      	adds	r3, #4
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	885b      	ldrh	r3, [r3, #2]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80035b8:	fb02 f303 	mul.w	r3, r2, r3
 80035bc:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	79fa      	ldrb	r2, [r7, #7]
 80035c2:	4934      	ldr	r1, [pc, #208]	@ (8003694 <DevAD9833Set_Init+0x130>)
 80035c4:	3304      	adds	r3, #4
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	440b      	add	r3, r1
 80035ca:	8859      	ldrh	r1, [r3, #2]
 80035cc:	4b32      	ldr	r3, [pc, #200]	@ (8003698 <DevAD9833Set_Init+0x134>)
 80035ce:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			AD9833_SendData(tag_i,0x0100);						//芯片复位
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff1b 	bl	8003414 <AD9833_SendData>
			AD9833_SendData(tag_i,0x2100);						//配置寄存器连续写入模式
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff ff15 	bl	8003414 <AD9833_SendData>
			AD9833_SetFreq(tag_i,AD9833_REG_FREQ0,freq);		//写入频率
 80035ea:	79fb      	ldrb	r3, [r7, #7]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff58 	bl	80034a8 <AD9833_SetFreq>
			AD9833_SetPhase(tag_i,AD9833_REG_PHASE0,2048);			//写入相位
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035fe:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff80 	bl	8003508 <AD9833_SetPhase>
			AD9833_SetMode(tag_i,AD9833_OUT_TRIANGLE);			//写入波形类型并启动
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff94 	bl	800353a <AD9833_SetMode>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	3301      	adds	r3, #1
 8003616:	71fb      	strb	r3, [r7, #7]
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	2b07      	cmp	r3, #7
 800361c:	d9c3      	bls.n	80035a6 <DevAD9833Set_Init+0x42>
	if((DevParamRead.UltraParam.UltraParamChangeFlg[0] == 0xdddd) &&
 800361e:	e034      	b.n	800368a <DevAD9833Set_Init+0x126>
		}
	}else
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003620:	2300      	movs	r3, #0
 8003622:	71fb      	strb	r3, [r7, #7]
 8003624:	e02d      	b.n	8003682 <DevAD9833Set_Init+0x11e>
		{
			freq = AD9833STEP * ultra_param;
 8003626:	88bb      	ldrh	r3, [r7, #4]
 8003628:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = ultra_param;
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4918      	ldr	r1, [pc, #96]	@ (8003698 <DevAD9833Set_Init+0x134>)
 8003636:	88ba      	ldrh	r2, [r7, #4]
 8003638:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

			AD9833_SendData(tag_i,0x0100);						//芯片复位
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fee6 	bl	8003414 <AD9833_SendData>
			AD9833_SendData(tag_i,0x2100);						//配置寄存器连续写入模式
 8003648:	79fb      	ldrb	r3, [r7, #7]
 800364a:	f44f 5104 	mov.w	r1, #8448	@ 0x2100
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fee0 	bl	8003414 <AD9833_SendData>
			AD9833_SetFreq(tag_i,AD9833_REG_FREQ0,freq);		//写入频率
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff ff23 	bl	80034a8 <AD9833_SetFreq>
			AD9833_SetPhase(tag_i,AD9833_REG_PHASE0,2048);			//写入相位
 8003662:	79fb      	ldrb	r3, [r7, #7]
 8003664:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003668:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff ff4b 	bl	8003508 <AD9833_SetPhase>
			AD9833_SetMode(tag_i,AD9833_OUT_TRIANGLE);			//写入波形类型并启动
 8003672:	79fb      	ldrb	r3, [r7, #7]
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff ff5f 	bl	800353a <AD9833_SetMode>
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	3301      	adds	r3, #1
 8003680:	71fb      	strb	r3, [r7, #7]
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b07      	cmp	r3, #7
 8003686:	d9ce      	bls.n	8003626 <DevAD9833Set_Init+0xc2>
		}
	}
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	2000061c 	.word	0x2000061c
 8003698:	20000670 	.word	0x20000670

0800369c <DevAD9833Set_Main>:

void DevAD9833Set_Main(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	71fb      	strb	r3, [r7, #7]
	uint32_t freq = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	71fb      	strb	r3, [r7, #7]
 80036ae:	e02b      	b.n	8003708 <DevAD9833Set_Main+0x6c>
	{
		if(UltraParam_Old[tag_i] != DevParamRead.UltraParam.Freq_Param[tag_i])
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	4a19      	ldr	r2, [pc, #100]	@ (8003718 <DevAD9833Set_Main+0x7c>)
 80036b4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80036b8:	79fb      	ldrb	r3, [r7, #7]
 80036ba:	4918      	ldr	r1, [pc, #96]	@ (800371c <DevAD9833Set_Main+0x80>)
 80036bc:	3304      	adds	r3, #4
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	440b      	add	r3, r1
 80036c2:	885b      	ldrh	r3, [r3, #2]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d01c      	beq.n	8003702 <DevAD9833Set_Main+0x66>
		{
			freq = DevParamRead.UltraParam.Freq_Param[tag_i] * AD9833STEP;
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	4a14      	ldr	r2, [pc, #80]	@ (800371c <DevAD9833Set_Main+0x80>)
 80036cc:	3304      	adds	r3, #4
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	4413      	add	r3, r2
 80036d2:	885b      	ldrh	r3, [r3, #2]
 80036d4:	461a      	mov	r2, r3
 80036d6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	603b      	str	r3, [r7, #0]
			UltraParam_Old[tag_i] = DevParamRead.UltraParam.Freq_Param[tag_i];
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	79fa      	ldrb	r2, [r7, #7]
 80036e4:	490d      	ldr	r1, [pc, #52]	@ (800371c <DevAD9833Set_Main+0x80>)
 80036e6:	3304      	adds	r3, #4
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	440b      	add	r3, r1
 80036ec:	8859      	ldrh	r1, [r3, #2]
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <DevAD9833Set_Main+0x7c>)
 80036f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

			AD9833_SetFreq(tag_i,AD9833_REG_FREQ0,freq);		//写入频率
 80036f4:	79fb      	ldrb	r3, [r7, #7]
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fed3 	bl	80034a8 <AD9833_SetFreq>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003702:	79fb      	ldrb	r3, [r7, #7]
 8003704:	3301      	adds	r3, #1
 8003706:	71fb      	strb	r3, [r7, #7]
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	2b07      	cmp	r3, #7
 800370c:	d9d0      	bls.n	80036b0 <DevAD9833Set_Main+0x14>
		}else
		{
		}
	}
}
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	20000670 	.word	0x20000670
 800371c:	2000061c 	.word	0x2000061c

08003720 <look1_iflf_binlxpw>:
float CoreTempture;

static float SampleVolFilter(float* buff,uint8_t len);

float look1_iflf_binlxpw(float u0, const float bp0[], const float table[], uint32_t maxIndex)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b089      	sub	sp, #36	@ 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
 800372c:	603b      	str	r3, [r7, #0]
  float frac;
  uint32_t iRght;
  uint32_t iLeft;
  uint32_t bpIdx;

  if (u0 <= bp0[0U])
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4619      	mov	r1, r3
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7fd fc4b 	bl	8000fd0 <__aeabi_fcmple>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01a      	beq.n	8003776 <look1_iflf_binlxpw+0x56>
  {
    iLeft = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[0U]) / (bp0[1U] - bp0[0U]);
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7fd f98e 	bl	8000a6c <__aeabi_fsub>
 8003750:	4603      	mov	r3, r0
 8003752:	461c      	mov	r4, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	3304      	adds	r3, #4
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f7fd f983 	bl	8000a6c <__aeabi_fsub>
 8003766:	4603      	mov	r3, r0
 8003768:	4619      	mov	r1, r3
 800376a:	4620      	mov	r0, r4
 800376c:	f7fd fb3c 	bl	8000de8 <__aeabi_fdiv>
 8003770:	4603      	mov	r3, r0
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	e077      	b.n	8003866 <look1_iflf_binlxpw+0x146>
  }
  else if (u0 < bp0[maxIndex])
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	4413      	add	r3, r2
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4619      	mov	r1, r3
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7fd fc1a 	bl	8000fbc <__aeabi_fcmplt>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d043      	beq.n	8003816 <look1_iflf_binlxpw+0xf6>
  {
    /* Binary Search */
    bpIdx = maxIndex >> 1U;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	613b      	str	r3, [r7, #16]
    iLeft = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
    iRght = maxIndex;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	61bb      	str	r3, [r7, #24]
    while (iRght - iLeft > 1U)
 800379c:	e015      	b.n	80037ca <look1_iflf_binlxpw+0xaa>
    {
      if (u0 < bp0[bpIdx])
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	68ba      	ldr	r2, [r7, #8]
 80037a4:	4413      	add	r3, r2
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7fd fc06 	bl	8000fbc <__aeabi_fcmplt>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <look1_iflf_binlxpw+0x9c>
      {
        iRght = bpIdx;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e001      	b.n	80037c0 <look1_iflf_binlxpw+0xa0>
      }
      else
      {
        iLeft = bpIdx;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	617b      	str	r3, [r7, #20]
      }

      bpIdx = (iRght + iLeft) >> 1U;
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	4413      	add	r3, r2
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	613b      	str	r3, [r7, #16]
    while (iRght - iLeft > 1U)
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d8e4      	bhi.n	800379e <look1_iflf_binlxpw+0x7e>
    }

    frac = (u0 - bp0[iLeft]) / (bp0[iLeft + 1U] - bp0[iLeft]);
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	4413      	add	r3, r2
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7fd f943 	bl	8000a6c <__aeabi_fsub>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461c      	mov	r4, r3
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3301      	adds	r3, #1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	4413      	add	r3, r2
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4413      	add	r3, r2
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4619      	mov	r1, r3
 8003802:	f7fd f933 	bl	8000a6c <__aeabi_fsub>
 8003806:	4603      	mov	r3, r0
 8003808:	4619      	mov	r1, r3
 800380a:	4620      	mov	r0, r4
 800380c:	f7fd faec 	bl	8000de8 <__aeabi_fdiv>
 8003810:	4603      	mov	r3, r0
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e027      	b.n	8003866 <look1_iflf_binlxpw+0x146>
  }
  else
  {
    iLeft = maxIndex - 1U;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	3b01      	subs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
    frac = (u0 - bp0[maxIndex - 1U]) / (bp0[maxIndex] - bp0[maxIndex - 1U]);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003822:	3b01      	subs	r3, #1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4619      	mov	r1, r3
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7fd f91c 	bl	8000a6c <__aeabi_fsub>
 8003834:	4603      	mov	r3, r0
 8003836:	461c      	mov	r4, r3
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	4413      	add	r3, r2
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003848:	3b01      	subs	r3, #1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	4413      	add	r3, r2
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd f90a 	bl	8000a6c <__aeabi_fsub>
 8003858:	4603      	mov	r3, r0
 800385a:	4619      	mov	r1, r3
 800385c:	4620      	mov	r0, r4
 800385e:	f7fd fac3 	bl	8000de8 <__aeabi_fdiv>
 8003862:	4603      	mov	r3, r0
 8003864:	61fb      	str	r3, [r7, #28]
  }

  return (table[iLeft + 1U] - table[iLeft]) * frac + table[iLeft];
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	3301      	adds	r3, #1
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	4413      	add	r3, r2
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	4413      	add	r3, r2
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4619      	mov	r1, r3
 800387e:	f7fd f8f5 	bl	8000a6c <__aeabi_fsub>
 8003882:	4603      	mov	r3, r0
 8003884:	69f9      	ldr	r1, [r7, #28]
 8003886:	4618      	mov	r0, r3
 8003888:	f7fd f9fa 	bl	8000c80 <__aeabi_fmul>
 800388c:	4603      	mov	r3, r0
 800388e:	4618      	mov	r0, r3
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	4413      	add	r3, r2
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4619      	mov	r1, r3
 800389c:	f7fd f8e8 	bl	8000a70 <__addsf3>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3724      	adds	r7, #36	@ 0x24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd90      	pop	{r4, r7, pc}
	...

080038ac <DevADC1Func_Init>:

void DevADC1Func_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 80038b0:	4804      	ldr	r0, [pc, #16]	@ (80038c4 <DevADC1Func_Init+0x18>)
 80038b2:	f001 fd55 	bl	8005360 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)ADC1SampleVal, DEV_LEN);
 80038b6:	2205      	movs	r2, #5
 80038b8:	4903      	ldr	r1, [pc, #12]	@ (80038c8 <DevADC1Func_Init+0x1c>)
 80038ba:	4802      	ldr	r0, [pc, #8]	@ (80038c4 <DevADC1Func_Init+0x18>)
 80038bc:	f001 fa5c 	bl	8004d78 <HAL_ADC_Start_DMA>
}
 80038c0:	bf00      	nop
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	200001b4 	.word	0x200001b4
 80038c8:	200006f8 	.word	0x200006f8
 80038cc:	00000000 	.word	0x00000000

080038d0 <DevADC1Func_Main>:

void DevADC1Func_Main(void)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
	float gain = 1.0f;
 80038d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038da:	617b      	str	r3, [r7, #20]
	float TemptureVol,CurrentFrontVol,CurrentAfterVol,CoreVol_Temp,TemptureRes;
	static uint8_t sCount = 0;
	static uint8_t sTempOver = 0;

	gain = ADC1SampleVal[4] * 3.3 / 4095 / 1.2;
 80038dc:	4ba8      	ldr	r3, [pc, #672]	@ (8003b80 <DevADC1Func_Main+0x2b0>)
 80038de:	891b      	ldrh	r3, [r3, #8]
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fdf3 	bl	80004cc <__aeabi_i2d>
 80038e6:	a39c      	add	r3, pc, #624	@ (adr r3, 8003b58 <DevADC1Func_Main+0x288>)
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f7fc fe58 	bl	80005a0 <__aeabi_dmul>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4610      	mov	r0, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	a399      	add	r3, pc, #612	@ (adr r3, 8003b60 <DevADC1Func_Main+0x290>)
 80038fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fe:	f7fc ff79 	bl	80007f4 <__aeabi_ddiv>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4610      	mov	r0, r2
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 3233 	mov.w	r2, #858993459	@ 0x33333333
 800390e:	4b9d      	ldr	r3, [pc, #628]	@ (8003b84 <DevADC1Func_Main+0x2b4>)
 8003910:	f7fc ff70 	bl	80007f4 <__aeabi_ddiv>
 8003914:	4602      	mov	r2, r0
 8003916:	460b      	mov	r3, r1
 8003918:	4610      	mov	r0, r2
 800391a:	4619      	mov	r1, r3
 800391c:	f7fd f852 	bl	80009c4 <__aeabi_d2f>
 8003920:	4603      	mov	r3, r0
 8003922:	617b      	str	r3, [r7, #20]
	TemptureVol_Temp[sCount] = (float)ADC1SampleVal[0] * 3.3f / 4095.0f;
 8003924:	4b96      	ldr	r3, [pc, #600]	@ (8003b80 <DevADC1Func_Main+0x2b0>)
 8003926:	881b      	ldrh	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd f951 	bl	8000bd0 <__aeabi_ui2f>
 800392e:	4603      	mov	r3, r0
 8003930:	4995      	ldr	r1, [pc, #596]	@ (8003b88 <DevADC1Func_Main+0x2b8>)
 8003932:	4618      	mov	r0, r3
 8003934:	f7fd f9a4 	bl	8000c80 <__aeabi_fmul>
 8003938:	4603      	mov	r3, r0
 800393a:	461a      	mov	r2, r3
 800393c:	4b93      	ldr	r3, [pc, #588]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	461c      	mov	r4, r3
 8003942:	4993      	ldr	r1, [pc, #588]	@ (8003b90 <DevADC1Func_Main+0x2c0>)
 8003944:	4610      	mov	r0, r2
 8003946:	f7fd fa4f 	bl	8000de8 <__aeabi_fdiv>
 800394a:	4603      	mov	r3, r0
 800394c:	461a      	mov	r2, r3
 800394e:	4b91      	ldr	r3, [pc, #580]	@ (8003b94 <DevADC1Func_Main+0x2c4>)
 8003950:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentFrontVol_Temp[sCount] = (float)ADC1SampleVal[1] * 3.3f / 4095.0f  / gain;
 8003954:	4b8a      	ldr	r3, [pc, #552]	@ (8003b80 <DevADC1Func_Main+0x2b0>)
 8003956:	885b      	ldrh	r3, [r3, #2]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fd f939 	bl	8000bd0 <__aeabi_ui2f>
 800395e:	4603      	mov	r3, r0
 8003960:	4989      	ldr	r1, [pc, #548]	@ (8003b88 <DevADC1Func_Main+0x2b8>)
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd f98c 	bl	8000c80 <__aeabi_fmul>
 8003968:	4603      	mov	r3, r0
 800396a:	4989      	ldr	r1, [pc, #548]	@ (8003b90 <DevADC1Func_Main+0x2c0>)
 800396c:	4618      	mov	r0, r3
 800396e:	f7fd fa3b 	bl	8000de8 <__aeabi_fdiv>
 8003972:	4603      	mov	r3, r0
 8003974:	461a      	mov	r2, r3
 8003976:	4b85      	ldr	r3, [pc, #532]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461c      	mov	r4, r3
 800397c:	6979      	ldr	r1, [r7, #20]
 800397e:	4610      	mov	r0, r2
 8003980:	f7fd fa32 	bl	8000de8 <__aeabi_fdiv>
 8003984:	4603      	mov	r3, r0
 8003986:	461a      	mov	r2, r3
 8003988:	4b83      	ldr	r3, [pc, #524]	@ (8003b98 <DevADC1Func_Main+0x2c8>)
 800398a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CurrentAfterVol_Temp[sCount] = (float)ADC1SampleVal[2] * 3.3f / 4095.0f  / gain;
 800398e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b80 <DevADC1Func_Main+0x2b0>)
 8003990:	889b      	ldrh	r3, [r3, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd f91c 	bl	8000bd0 <__aeabi_ui2f>
 8003998:	4603      	mov	r3, r0
 800399a:	497b      	ldr	r1, [pc, #492]	@ (8003b88 <DevADC1Func_Main+0x2b8>)
 800399c:	4618      	mov	r0, r3
 800399e:	f7fd f96f 	bl	8000c80 <__aeabi_fmul>
 80039a2:	4603      	mov	r3, r0
 80039a4:	497a      	ldr	r1, [pc, #488]	@ (8003b90 <DevADC1Func_Main+0x2c0>)
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd fa1e 	bl	8000de8 <__aeabi_fdiv>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b76      	ldr	r3, [pc, #472]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	461c      	mov	r4, r3
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	4610      	mov	r0, r2
 80039ba:	f7fd fa15 	bl	8000de8 <__aeabi_fdiv>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b76      	ldr	r3, [pc, #472]	@ (8003b9c <DevADC1Func_Main+0x2cc>)
 80039c4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	CoreVol_Temp =  (float)ADC1SampleVal[3] * 3.3f / 4095.0f / gain;
 80039c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003b80 <DevADC1Func_Main+0x2b0>)
 80039ca:	88db      	ldrh	r3, [r3, #6]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd f8ff 	bl	8000bd0 <__aeabi_ui2f>
 80039d2:	4603      	mov	r3, r0
 80039d4:	496c      	ldr	r1, [pc, #432]	@ (8003b88 <DevADC1Func_Main+0x2b8>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd f952 	bl	8000c80 <__aeabi_fmul>
 80039dc:	4603      	mov	r3, r0
 80039de:	496c      	ldr	r1, [pc, #432]	@ (8003b90 <DevADC1Func_Main+0x2c0>)
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7fd fa01 	bl	8000de8 <__aeabi_fdiv>
 80039e6:	4603      	mov	r3, r0
 80039e8:	6979      	ldr	r1, [r7, #20]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fd f9fc 	bl	8000de8 <__aeabi_fdiv>
 80039f0:	4603      	mov	r3, r0
 80039f2:	613b      	str	r3, [r7, #16]

	sCount++;
 80039f4:	4b65      	ldr	r3, [pc, #404]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b63      	ldr	r3, [pc, #396]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 80039fe:	701a      	strb	r2, [r3, #0]
	if(sCount >= 15)
 8003a00:	4b62      	ldr	r3, [pc, #392]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b0e      	cmp	r3, #14
 8003a06:	d902      	bls.n	8003a0e <DevADC1Func_Main+0x13e>
	{
		sCount = 0;
 8003a08:	4b60      	ldr	r3, [pc, #384]	@ (8003b8c <DevADC1Func_Main+0x2bc>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
	}

	TemptureVol = SampleVolFilter(TemptureVol_Temp,FILTERNUM);
 8003a0e:	210f      	movs	r1, #15
 8003a10:	4860      	ldr	r0, [pc, #384]	@ (8003b94 <DevADC1Func_Main+0x2c4>)
 8003a12:	f000 f8f9 	bl	8003c08 <SampleVolFilter>
 8003a16:	60f8      	str	r0, [r7, #12]
	CurrentFrontVol = SampleVolFilter(CurrentFrontVol_Temp,FILTERNUM);
 8003a18:	210f      	movs	r1, #15
 8003a1a:	485f      	ldr	r0, [pc, #380]	@ (8003b98 <DevADC1Func_Main+0x2c8>)
 8003a1c:	f000 f8f4 	bl	8003c08 <SampleVolFilter>
 8003a20:	60b8      	str	r0, [r7, #8]
	CurrentAfterVol = SampleVolFilter(CurrentAfterVol_Temp,FILTERNUM);
 8003a22:	210f      	movs	r1, #15
 8003a24:	485d      	ldr	r0, [pc, #372]	@ (8003b9c <DevADC1Func_Main+0x2cc>)
 8003a26:	f000 f8ef 	bl	8003c08 <SampleVolFilter>
 8003a2a:	6078      	str	r0, [r7, #4]
	TemptureRes = (10000.0f * TemptureVol) / (3.3f - TemptureVol);
 8003a2c:	495c      	ldr	r1, [pc, #368]	@ (8003ba0 <DevADC1Func_Main+0x2d0>)
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7fd f926 	bl	8000c80 <__aeabi_fmul>
 8003a34:	4603      	mov	r3, r0
 8003a36:	461c      	mov	r4, r3
 8003a38:	68f9      	ldr	r1, [r7, #12]
 8003a3a:	4853      	ldr	r0, [pc, #332]	@ (8003b88 <DevADC1Func_Main+0x2b8>)
 8003a3c:	f7fd f816 	bl	8000a6c <__aeabi_fsub>
 8003a40:	4603      	mov	r3, r0
 8003a42:	4619      	mov	r1, r3
 8003a44:	4620      	mov	r0, r4
 8003a46:	f7fd f9cf 	bl	8000de8 <__aeabi_fdiv>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	603b      	str	r3, [r7, #0]

	SampleTemp = look1_iflf_binlxpw(TemptureRes,INP_HWTemp_R,OUT_HWTemp_T,TEMPTURENUM - 1);
 8003a4e:	23a0      	movs	r3, #160	@ 0xa0
 8003a50:	4a54      	ldr	r2, [pc, #336]	@ (8003ba4 <DevADC1Func_Main+0x2d4>)
 8003a52:	4955      	ldr	r1, [pc, #340]	@ (8003ba8 <DevADC1Func_Main+0x2d8>)
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f7ff fe63 	bl	8003720 <look1_iflf_binlxpw>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4a53      	ldr	r2, [pc, #332]	@ (8003bac <DevADC1Func_Main+0x2dc>)
 8003a5e:	6013      	str	r3, [r2, #0]
	CurrentFront = (CurrentFrontVol - 1.14) / 50.0f * 100.0f;			//CurrentFrontVol * GAIN(50) / 10mΩ(0.01);
 8003a60:	68b8      	ldr	r0, [r7, #8]
 8003a62:	f7fc fd45 	bl	80004f0 <__aeabi_f2d>
 8003a66:	a340      	add	r3, pc, #256	@ (adr r3, 8003b68 <DevADC1Func_Main+0x298>)
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f7fc fbe0 	bl	8000230 <__aeabi_dsub>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4610      	mov	r0, r2
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb0 <DevADC1Func_Main+0x2e0>)
 8003a7e:	f7fc feb9 	bl	80007f4 <__aeabi_ddiv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	460b      	mov	r3, r1
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	4b49      	ldr	r3, [pc, #292]	@ (8003bb4 <DevADC1Func_Main+0x2e4>)
 8003a90:	f7fc fd86 	bl	80005a0 <__aeabi_dmul>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	4610      	mov	r0, r2
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	f7fc ff92 	bl	80009c4 <__aeabi_d2f>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	4a45      	ldr	r2, [pc, #276]	@ (8003bb8 <DevADC1Func_Main+0x2e8>)
 8003aa4:	6013      	str	r3, [r2, #0]
	CurrentAfter = CurrentAfterVol / 4.7f * 50.0f * 100.0f;
 8003aa6:	4945      	ldr	r1, [pc, #276]	@ (8003bbc <DevADC1Func_Main+0x2ec>)
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7fd f99d 	bl	8000de8 <__aeabi_fdiv>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4943      	ldr	r1, [pc, #268]	@ (8003bc0 <DevADC1Func_Main+0x2f0>)
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd f8e4 	bl	8000c80 <__aeabi_fmul>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4942      	ldr	r1, [pc, #264]	@ (8003bc4 <DevADC1Func_Main+0x2f4>)
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd f8df 	bl	8000c80 <__aeabi_fmul>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	4b40      	ldr	r3, [pc, #256]	@ (8003bc8 <DevADC1Func_Main+0x2f8>)
 8003ac8:	601a      	str	r2, [r3, #0]
	CoreTempture = (1.43 - CoreVol_Temp) / 0.0043f + 25.0f;
 8003aca:	6938      	ldr	r0, [r7, #16]
 8003acc:	f7fc fd10 	bl	80004f0 <__aeabi_f2d>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	a126      	add	r1, pc, #152	@ (adr r1, 8003b70 <DevADC1Func_Main+0x2a0>)
 8003ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ada:	f7fc fba9 	bl	8000230 <__aeabi_dsub>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	a324      	add	r3, pc, #144	@ (adr r3, 8003b78 <DevADC1Func_Main+0x2a8>)
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	f7fc fe82 	bl	80007f4 <__aeabi_ddiv>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4610      	mov	r0, r2
 8003af6:	4619      	mov	r1, r3
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <DevADC1Func_Main+0x2fc>)
 8003afe:	f7fc fb99 	bl	8000234 <__adddf3>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4610      	mov	r0, r2
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f7fc ff5b 	bl	80009c4 <__aeabi_d2f>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd0 <DevADC1Func_Main+0x300>)
 8003b12:	6013      	str	r3, [r2, #0]

	/*过温检测，超过80℃屏幕提示报警*/
	if((SampleTemp > 80.0f) && (sTempOver == 0))
 8003b14:	4b25      	ldr	r3, [pc, #148]	@ (8003bac <DevADC1Func_Main+0x2dc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	492e      	ldr	r1, [pc, #184]	@ (8003bd4 <DevADC1Func_Main+0x304>)
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fa6c 	bl	8000ff8 <__aeabi_fcmpgt>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <DevADC1Func_Main+0x272>
 8003b26:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <DevADC1Func_Main+0x308>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d109      	bne.n	8003b42 <DevADC1Func_Main+0x272>
	{
		sTempOver = 1;
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <DevADC1Func_Main+0x308>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
		DevScreenSendData(0x30,sTempOver);
 8003b34:	4b28      	ldr	r3, [pc, #160]	@ (8003bd8 <DevADC1Func_Main+0x308>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	2030      	movs	r0, #48	@ 0x30
 8003b3c:	f000 ff0a 	bl	8004954 <DevScreenSendData>
	}else if((SampleTemp < 77.0f) && (sTempOver == 1))
	{
		sTempOver = 0;
		DevScreenSendData(0x30,sTempOver);
	}
}
 8003b40:	e05b      	b.n	8003bfa <DevADC1Func_Main+0x32a>
	}else if((SampleTemp < 77.0f) && (sTempOver == 1))
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <DevADC1Func_Main+0x2dc>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4925      	ldr	r1, [pc, #148]	@ (8003bdc <DevADC1Func_Main+0x30c>)
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fd fa37 	bl	8000fbc <__aeabi_fcmplt>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d145      	bne.n	8003be0 <DevADC1Func_Main+0x310>
}
 8003b54:	e051      	b.n	8003bfa <DevADC1Func_Main+0x32a>
 8003b56:	bf00      	nop
 8003b58:	66666666 	.word	0x66666666
 8003b5c:	400a6666 	.word	0x400a6666
 8003b60:	00000000 	.word	0x00000000
 8003b64:	40affe00 	.word	0x40affe00
 8003b68:	a3d70a3d 	.word	0xa3d70a3d
 8003b6c:	3ff23d70 	.word	0x3ff23d70
 8003b70:	ae147ae1 	.word	0xae147ae1
 8003b74:	3ff6e147 	.word	0x3ff6e147
 8003b78:	80000000 	.word	0x80000000
 8003b7c:	3f719ce0 	.word	0x3f719ce0
 8003b80:	200006f8 	.word	0x200006f8
 8003b84:	3ff33333 	.word	0x3ff33333
 8003b88:	40533333 	.word	0x40533333
 8003b8c:	20000714 	.word	0x20000714
 8003b90:	457ff000 	.word	0x457ff000
 8003b94:	2000013c 	.word	0x2000013c
 8003b98:	20000680 	.word	0x20000680
 8003b9c:	200006bc 	.word	0x200006bc
 8003ba0:	461c4000 	.word	0x461c4000
 8003ba4:	08009c04 	.word	0x08009c04
 8003ba8:	08009980 	.word	0x08009980
 8003bac:	20000704 	.word	0x20000704
 8003bb0:	40490000 	.word	0x40490000
 8003bb4:	40590000 	.word	0x40590000
 8003bb8:	20000708 	.word	0x20000708
 8003bbc:	40966666 	.word	0x40966666
 8003bc0:	42480000 	.word	0x42480000
 8003bc4:	42c80000 	.word	0x42c80000
 8003bc8:	2000070c 	.word	0x2000070c
 8003bcc:	40390000 	.word	0x40390000
 8003bd0:	20000710 	.word	0x20000710
 8003bd4:	42a00000 	.word	0x42a00000
 8003bd8:	20000715 	.word	0x20000715
 8003bdc:	429a0000 	.word	0x429a0000
	}else if((SampleTemp < 77.0f) && (sTempOver == 1))
 8003be0:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <DevADC1Func_Main+0x334>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d108      	bne.n	8003bfa <DevADC1Func_Main+0x32a>
		sTempOver = 0;
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <DevADC1Func_Main+0x334>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	701a      	strb	r2, [r3, #0]
		DevScreenSendData(0x30,sTempOver);
 8003bee:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <DevADC1Func_Main+0x334>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	2030      	movs	r0, #48	@ 0x30
 8003bf6:	f000 fead 	bl	8004954 <DevScreenSendData>
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000715 	.word	0x20000715

08003c08 <SampleVolFilter>:

static float SampleVolFilter(float* buff,uint8_t len)
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	70fb      	strb	r3, [r7, #3]
	float vol_max,vol_min;
	float vol_sum = 0;
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	60fb      	str	r3, [r7, #12]
	uint8_t tag_i = 0;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	72fb      	strb	r3, [r7, #11]

	vol_max = buff[0];
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	617b      	str	r3, [r7, #20]
	vol_min = buff[0];
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	613b      	str	r3, [r7, #16]

	for(tag_i = 0;tag_i < len;tag_i++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	72fb      	strb	r3, [r7, #11]
 8003c2e:	e032      	b.n	8003c96 <SampleVolFilter+0x8e>
	{
		if(buff[tag_i] < vol_min)
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	4413      	add	r3, r2
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6938      	ldr	r0, [r7, #16]
 8003c3e:	f7fd f9db 	bl	8000ff8 <__aeabi_fcmpgt>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <SampleVolFilter+0x4e>
		{
			vol_min = buff[tag_i];
 8003c48:	7afb      	ldrb	r3, [r7, #11]
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e011      	b.n	8003c7a <SampleVolFilter+0x72>
		}else if(buff[tag_i] > vol_max)
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4619      	mov	r1, r3
 8003c62:	6978      	ldr	r0, [r7, #20]
 8003c64:	f7fd f9aa 	bl	8000fbc <__aeabi_fcmplt>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <SampleVolFilter+0x72>
		{
			vol_max = buff[tag_i];
 8003c6e:	7afb      	ldrb	r3, [r7, #11]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	617b      	str	r3, [r7, #20]
		}

		vol_sum += buff[tag_i];
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4619      	mov	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7fc fef2 	bl	8000a70 <__addsf3>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	3301      	adds	r3, #1
 8003c94:	72fb      	strb	r3, [r7, #11]
 8003c96:	7afa      	ldrb	r2, [r7, #11]
 8003c98:	78fb      	ldrb	r3, [r7, #3]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3c8      	bcc.n	8003c30 <SampleVolFilter+0x28>
	}

	return (vol_sum - vol_max - vol_min) / (len -2);
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7fc fee3 	bl	8000a6c <__aeabi_fsub>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6939      	ldr	r1, [r7, #16]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fc fede 	bl	8000a6c <__aeabi_fsub>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	461c      	mov	r4, r3
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	3b02      	subs	r3, #2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fc ff8d 	bl	8000bd8 <__aeabi_i2f>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7fd f890 	bl	8000de8 <__aeabi_fdiv>
 8003cc8:	4603      	mov	r3, r0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd90      	pop	{r4, r7, pc}

08003cd2 <DevFlash_Write>:
static uint32_t FlashOffset = 0;

extern Device_Param DevParamRead;

HAL_StatusTypeDef DevFlash_Write(uint32_t addr,uint16_t *buff,uint8_t len)
{
 8003cd2:	b5b0      	push	{r4, r5, r7, lr}
 8003cd4:	b088      	sub	sp, #32
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	77fb      	strb	r3, [r7, #31]
	uint8_t tag_i= 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	77bb      	strb	r3, [r7, #30]
	uint16_t writedata = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	82fb      	strh	r3, [r7, #22]
	uint32_t writeaddr = addr;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	61bb      	str	r3, [r7, #24]

	HAL_FLASH_Unlock();
 8003cf0:	f002 fa04 	bl	80060fc <HAL_FLASH_Unlock>

	for(tag_i = 0;tag_i < len;tag_i++)
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77bb      	strb	r3, [r7, #30]
 8003cf8:	e01e      	b.n	8003d38 <DevFlash_Write+0x66>
	{
		writedata = buff[tag_i];
 8003cfa:	7fbb      	ldrb	r3, [r7, #30]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	4413      	add	r3, r2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	82fb      	strh	r3, [r7, #22]
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, writeaddr, (uint64_t)writedata);
 8003d06:	8afb      	ldrh	r3, [r7, #22]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	461c      	mov	r4, r3
 8003d0c:	4615      	mov	r5, r2
 8003d0e:	4622      	mov	r2, r4
 8003d10:	462b      	mov	r3, r5
 8003d12:	69b9      	ldr	r1, [r7, #24]
 8003d14:	2001      	movs	r0, #1
 8003d16:	f002 f963 	bl	8005fe0 <HAL_FLASH_Program>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	77fb      	strb	r3, [r7, #31]
		if(status != HAL_OK)
 8003d1e:	7ffb      	ldrb	r3, [r7, #31]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <DevFlash_Write+0x5a>
		{
			HAL_FLASH_Lock();
 8003d24:	f002 fa24 	bl	8006170 <HAL_FLASH_Lock>
			return status;
 8003d28:	7ffb      	ldrb	r3, [r7, #31]
 8003d2a:	e00c      	b.n	8003d46 <DevFlash_Write+0x74>
		}else
		{
			writeaddr += 2;
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3302      	adds	r3, #2
 8003d30:	61bb      	str	r3, [r7, #24]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003d32:	7fbb      	ldrb	r3, [r7, #30]
 8003d34:	3301      	adds	r3, #1
 8003d36:	77bb      	strb	r3, [r7, #30]
 8003d38:	7fba      	ldrb	r2, [r7, #30]
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3dc      	bcc.n	8003cfa <DevFlash_Write+0x28>
		}
	}
	HAL_FLASH_Lock();
 8003d40:	f002 fa16 	bl	8006170 <HAL_FLASH_Lock>

	return status;
 8003d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bdb0      	pop	{r4, r5, r7, pc}

08003d4e <DevFlash_Read>:

void DevFlash_Read(uint32_t addr,uint16_t* buff,uint16_t len)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b086      	sub	sp, #24
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
	uint8_t tag_i = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]
	uint32_t readaddr = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock();
 8003d64:	f002 f9ca 	bl	80060fc <HAL_FLASH_Unlock>

	readaddr = addr;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	75fb      	strb	r3, [r7, #23]
 8003d70:	e00d      	b.n	8003d8e <DevFlash_Read+0x40>
	{
		*(buff + tag_i) = *(volatile uint32_t *)readaddr;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	6819      	ldr	r1, [r3, #0]
 8003d76:	7dfb      	ldrb	r3, [r7, #23]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	b28a      	uxth	r2, r1
 8003d80:	801a      	strh	r2, [r3, #0]
		readaddr += 2;
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	3302      	adds	r3, #2
 8003d86:	613b      	str	r3, [r7, #16]
	for(tag_i = 0;tag_i < len;tag_i++)
 8003d88:	7dfb      	ldrb	r3, [r7, #23]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	75fb      	strb	r3, [r7, #23]
 8003d8e:	7dfb      	ldrb	r3, [r7, #23]
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d8ec      	bhi.n	8003d72 <DevFlash_Read+0x24>
	}

	HAL_FLASH_Lock();
 8003d98:	f002 f9ea 	bl	8006170 <HAL_FLASH_Lock>
}
 8003d9c:	bf00      	nop
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <DevParam_Init>:

void DevParam_Init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	71fb      	strb	r3, [r7, #7]
	uint32_t read_addr = FLASH_SLAVE_ULTRAPARAM;
 8003dae:	4b54      	ldr	r3, [pc, #336]	@ (8003f00 <DevParam_Init+0x15c>)
 8003db0:	603b      	str	r3, [r7, #0]

	while(read_addr <= (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003db2:	e030      	b.n	8003e16 <DevParam_Init+0x72>
	{
		DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003db4:	2228      	movs	r2, #40	@ 0x28
 8003db6:	4953      	ldr	r1, [pc, #332]	@ (8003f04 <DevParam_Init+0x160>)
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f7ff ffc8 	bl	8003d4e <DevFlash_Read>
		if(DevParamRead.UltraParam.WriteCount != 0xFFFFFFFF)
 8003dbe:	4b51      	ldr	r3, [pc, #324]	@ (8003f04 <DevParam_Init+0x160>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d00c      	beq.n	8003de2 <DevParam_Init+0x3e>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 8003dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8003f08 <DevParam_Init+0x164>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3350      	adds	r3, #80	@ 0x50
 8003dce:	4a4e      	ldr	r2, [pc, #312]	@ (8003f08 <DevParam_Init+0x164>)
 8003dd0:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 8003dd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003f08 <DevParam_Init+0x164>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003dda:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 8003dde:	603b      	str	r3, [r7, #0]
 8003de0:	e019      	b.n	8003e16 <DevParam_Init+0x72>
		}else
		{
			if(read_addr == FLASH_SLAVE_ULTRAPARAM)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	4a46      	ldr	r2, [pc, #280]	@ (8003f00 <DevParam_Init+0x15c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d103      	bne.n	8003df2 <DevParam_Init+0x4e>
			{
				DevParamRead.UltraParam.WriteCount = 0;
 8003dea:	4b46      	ldr	r3, [pc, #280]	@ (8003f04 <DevParam_Init+0x160>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
				break;
 8003df0:	e015      	b.n	8003e1e <DevParam_Init+0x7a>
			}

			FlashOffset -= (ULTRAPARAMSIZE * 2);
 8003df2:	4b45      	ldr	r3, [pc, #276]	@ (8003f08 <DevParam_Init+0x164>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3b50      	subs	r3, #80	@ 0x50
 8003df8:	4a43      	ldr	r2, [pc, #268]	@ (8003f08 <DevParam_Init+0x164>)
 8003dfa:	6013      	str	r3, [r2, #0]
			read_addr = FLASH_SLAVE_ULTRAPARAM + FlashOffset;
 8003dfc:	4b42      	ldr	r3, [pc, #264]	@ (8003f08 <DevParam_Init+0x164>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003e04:	f503 2300 	add.w	r3, r3, #524288	@ 0x80000
 8003e08:	603b      	str	r3, [r7, #0]
			DevFlash_Read(read_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003e0a:	2228      	movs	r2, #40	@ 0x28
 8003e0c:	493d      	ldr	r1, [pc, #244]	@ (8003f04 <DevParam_Init+0x160>)
 8003e0e:	6838      	ldr	r0, [r7, #0]
 8003e10:	f7ff ff9d 	bl	8003d4e <DevFlash_Read>
			break;
 8003e14:	e003      	b.n	8003e1e <DevParam_Init+0x7a>
	while(read_addr <= (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	4a3c      	ldr	r2, [pc, #240]	@ (8003f0c <DevParam_Init+0x168>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d9ca      	bls.n	8003db4 <DevParam_Init+0x10>
		}
	}

	if(DevParamRead.UltraParam.VibraEnableFlg == 0xFFFF)
 8003e1e:	4b39      	ldr	r3, [pc, #228]	@ (8003f04 <DevParam_Init+0x160>)
 8003e20:	8b5b      	ldrh	r3, [r3, #26]
 8003e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d105      	bne.n	8003e36 <DevParam_Init+0x92>
	{
		DevParamRead.UltraParam.VibraEnableFlg = 1;
 8003e2a:	4b36      	ldr	r3, [pc, #216]	@ (8003f04 <DevParam_Init+0x160>)
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	835a      	strh	r2, [r3, #26]
		DevParamRead.UltraParam.Vibra_Param = 0x0A;
 8003e30:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <DevParam_Init+0x160>)
 8003e32:	220a      	movs	r2, #10
 8003e34:	839a      	strh	r2, [r3, #28]
	}

	if(DevParamRead.UltraParam.PlusePeriod[0] == 0xFFFF)
 8003e36:	4b33      	ldr	r3, [pc, #204]	@ (8003f04 <DevParam_Init+0x160>)
 8003e38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10f      	bne.n	8003e62 <DevParam_Init+0xbe>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	71fb      	strb	r3, [r7, #7]
 8003e46:	e009      	b.n	8003e5c <DevParam_Init+0xb8>
		{
			DevParamRead.UltraParam.PlusePeriod[tag_i] = 100;
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	@ (8003f04 <DevParam_Init+0x160>)
 8003e4c:	3310      	adds	r3, #16
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	2264      	movs	r2, #100	@ 0x64
 8003e54:	80da      	strh	r2, [r3, #6]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	3301      	adds	r3, #1
 8003e5a:	71fb      	strb	r3, [r7, #7]
 8003e5c:	79fb      	ldrb	r3, [r7, #7]
 8003e5e:	2b07      	cmp	r3, #7
 8003e60:	d9f2      	bls.n	8003e48 <DevParam_Init+0xa4>
		}
	}

	if(DevParamRead.UltraParam.PluseDuty[0] == 0xFF)
 8003e62:	4b28      	ldr	r3, [pc, #160]	@ (8003f04 <DevParam_Init+0x160>)
 8003e64:	7f9b      	ldrb	r3, [r3, #30]
 8003e66:	2bff      	cmp	r3, #255	@ 0xff
 8003e68:	d10d      	bne.n	8003e86 <DevParam_Init+0xe2>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	71fb      	strb	r3, [r7, #7]
 8003e6e:	e007      	b.n	8003e80 <DevParam_Init+0xdc>
		{
			DevParamRead.UltraParam.PluseDuty[tag_i] = 50;
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <DevParam_Init+0x160>)
 8003e74:	4413      	add	r3, r2
 8003e76:	2232      	movs	r2, #50	@ 0x32
 8003e78:	779a      	strb	r2, [r3, #30]
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	71fb      	strb	r3, [r7, #7]
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	2b07      	cmp	r3, #7
 8003e84:	d9f4      	bls.n	8003e70 <DevParam_Init+0xcc>
		}
	}

	if(DevParamRead.UltraParam.StimuTime == 0xFFFF)
 8003e86:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <DevParam_Init+0x160>)
 8003e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <DevParam_Init+0xfe>
	{
		DevParamRead.UltraParam.StimuTime = 1000;
 8003e92:	4b1c      	ldr	r3, [pc, #112]	@ (8003f04 <DevParam_Init+0x160>)
 8003e94:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e98:	86da      	strh	r2, [r3, #54]	@ 0x36
		DevParamRead.UltraParam.IdleTime = 1000;
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003f04 <DevParam_Init+0x160>)
 8003e9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003ea0:	871a      	strh	r2, [r3, #56]	@ 0x38
	}

	if(DevParamRead.UltraParam.UltraEn[0] == 0xFF)
 8003ea2:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <DevParam_Init+0x160>)
 8003ea4:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8003ea8:	2bff      	cmp	r3, #255	@ 0xff
 8003eaa:	d10e      	bne.n	8003eca <DevParam_Init+0x126>
	{
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003eac:	2300      	movs	r3, #0
 8003eae:	71fb      	strb	r3, [r7, #7]
 8003eb0:	e008      	b.n	8003ec4 <DevParam_Init+0x120>
		{
			DevParamRead.UltraParam.UltraEn[tag_i] = 1;
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a13      	ldr	r2, [pc, #76]	@ (8003f04 <DevParam_Init+0x160>)
 8003eb6:	4413      	add	r3, r2
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
		for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b07      	cmp	r3, #7
 8003ec8:	d9f3      	bls.n	8003eb2 <DevParam_Init+0x10e>
		}
	}

	if(DevParamRead.UltraParam.UltraWorkModule == 0xFFFF)
 8003eca:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <DevParam_Init+0x160>)
 8003ecc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8003ed0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d103      	bne.n	8003ee0 <DevParam_Init+0x13c>
	{
		DevParamRead.UltraParam.UltraWorkModule = 2;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8003f04 <DevParam_Init+0x160>)
 8003eda:	2202      	movs	r2, #2
 8003edc:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}

	if(DevParamRead.UltraParam.UltraPowerLevel == 0xFFFF)
 8003ee0:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <DevParam_Init+0x160>)
 8003ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003ee6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d103      	bne.n	8003ef6 <DevParam_Init+0x152>
	{
		DevParamRead.UltraParam.UltraPowerLevel = 0;
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <DevParam_Init+0x160>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08080000 	.word	0x08080000
 8003f04:	2000061c 	.word	0x2000061c
 8003f08:	20000718 	.word	0x20000718
 8003f0c:	08081000 	.word	0x08081000

08003f10 <DevFlashWrite_Main>:

void DevFlashWrite_Main(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
	uint32_t sectorError = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	613b      	str	r3, [r7, #16]
	uint32_t write_addr = FLASH_SLAVE_ULTRAPARAM;
 8003f1a:	4b20      	ldr	r3, [pc, #128]	@ (8003f9c <DevFlashWrite_Main+0x8c>)
 8003f1c:	617b      	str	r3, [r7, #20]
	FLASH_EraseInitTypeDef eraseInitStruct;

	if(FlashSaveFlg == 1)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <DevFlashWrite_Main+0x90>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d135      	bne.n	8003f92 <DevFlashWrite_Main+0x82>
	{
		DevParamRead.UltraParam.WriteCount += 1;
 8003f26:	4b1f      	ldr	r3, [pc, #124]	@ (8003fa4 <DevFlashWrite_Main+0x94>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa4 <DevFlashWrite_Main+0x94>)
 8003f2e:	6013      	str	r3, [r2, #0]

		if(DevParamRead.UltraParam.WriteCount != 1)
 8003f30:	4b1c      	ldr	r3, [pc, #112]	@ (8003fa4 <DevFlashWrite_Main+0x94>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d009      	beq.n	8003f4c <DevFlashWrite_Main+0x3c>
		{
			FlashOffset += (ULTRAPARAMSIZE * 2);
 8003f38:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa8 <DevFlashWrite_Main+0x98>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	3350      	adds	r3, #80	@ 0x50
 8003f3e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fa8 <DevFlashWrite_Main+0x98>)
 8003f40:	6013      	str	r3, [r2, #0]
			write_addr += FlashOffset;
 8003f42:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <DevFlashWrite_Main+0x98>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
		}
		if((write_addr + ULTRAPARAMSIZE * 2) > (FLASH_SLAVE_ULTRAPARAM + PAGE_SIZE))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3350      	adds	r3, #80	@ 0x50
 8003f50:	4a16      	ldr	r2, [pc, #88]	@ (8003fac <DevFlashWrite_Main+0x9c>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d915      	bls.n	8003f82 <DevFlashWrite_Main+0x72>
		{
			HAL_FLASH_Unlock();
 8003f56:	f002 f8d1 	bl	80060fc <HAL_FLASH_Unlock>

			eraseInitStruct.Banks = FLASH_BANK_2;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	607b      	str	r3, [r7, #4]
			eraseInitStruct.NbPages = 2;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	60fb      	str	r3, [r7, #12]
			eraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003f62:	2300      	movs	r3, #0
 8003f64:	603b      	str	r3, [r7, #0]
			eraseInitStruct.PageAddress = FLASH_SLAVE_ULTRAPARAM;
 8003f66:	4b0d      	ldr	r3, [pc, #52]	@ (8003f9c <DevFlashWrite_Main+0x8c>)
 8003f68:	60bb      	str	r3, [r7, #8]

			HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError);
 8003f6a:	f107 0210 	add.w	r2, r7, #16
 8003f6e:	463b      	mov	r3, r7
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f002 fa2a 	bl	80063cc <HAL_FLASHEx_Erase>

			write_addr = FLASH_SLAVE_ULTRAPARAM;
 8003f78:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <DevFlashWrite_Main+0x8c>)
 8003f7a:	617b      	str	r3, [r7, #20]
			FlashOffset = 0;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <DevFlashWrite_Main+0x98>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
		}

		DevFlash_Write(write_addr,DevParamRead.UltraParamBuff,ULTRAPARAMSIZE);
 8003f82:	2228      	movs	r2, #40	@ 0x28
 8003f84:	4907      	ldr	r1, [pc, #28]	@ (8003fa4 <DevFlashWrite_Main+0x94>)
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff fea3 	bl	8003cd2 <DevFlash_Write>
		FlashSaveFlg = 0;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <DevFlashWrite_Main+0x90>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
	}
}
 8003f92:	bf00      	nop
 8003f94:	3718      	adds	r7, #24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	08080000 	.word	0x08080000
 8003fa0:	20000716 	.word	0x20000716
 8003fa4:	2000061c 	.word	0x2000061c
 8003fa8:	20000718 	.word	0x20000718
 8003fac:	08081000 	.word	0x08081000

08003fb0 <DevPwm_LoadDuty>:

static void DevPwm_SetPulseDuty(uint8_t ch);
static uint32_t DevPwm_SetPulseFreq(uint8_t ch,uint32_t pulsetime,uint8_t duty);

void DevPwm_LoadDuty(uint8_t ch,uint8_t duty)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	460a      	mov	r2, r1
 8003fba:	71fb      	strb	r3, [r7, #7]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	71bb      	strb	r3, [r7, #6]
	if(ch < DevUltraChMax)
 8003fc0:	79fb      	ldrb	r3, [r7, #7]
 8003fc2:	2b07      	cmp	r3, #7
 8003fc4:	d803      	bhi.n	8003fce <DevPwm_LoadDuty+0x1e>
	{
		pwm_duty[ch] = duty;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	4903      	ldr	r1, [pc, #12]	@ (8003fd8 <DevPwm_LoadDuty+0x28>)
 8003fca:	79ba      	ldrb	r2, [r7, #6]
 8003fcc:	54ca      	strb	r2, [r1, r3]
	}
}
 8003fce:	bf00      	nop
 8003fd0:	370c      	adds	r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr
 8003fd8:	2000071c 	.word	0x2000071c

08003fdc <DevPwm_LoadPeriod>:

void DevPwm_LoadPeriod(uint8_t ch,uint8_t period)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	71fb      	strb	r3, [r7, #7]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71bb      	strb	r3, [r7, #6]
	if(ch < DevUltraChMax)
 8003fec:	79fb      	ldrb	r3, [r7, #7]
 8003fee:	2b07      	cmp	r3, #7
 8003ff0:	d804      	bhi.n	8003ffc <DevPwm_LoadPeriod+0x20>
	{
		pwm_period[ch] = period;
 8003ff2:	79fb      	ldrb	r3, [r7, #7]
 8003ff4:	79ba      	ldrb	r2, [r7, #6]
 8003ff6:	4904      	ldr	r1, [pc, #16]	@ (8004008 <DevPwm_LoadPeriod+0x2c>)
 8003ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000072c 	.word	0x2000072c

0800400c <DevPwmFunc_Init>:

void DevPwmFunc_Init(void)
{
 800400c:	b590      	push	{r4, r7, lr}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	71fb      	strb	r3, [r7, #7]
	uint8_t motor_level = 0xA;
 8004016:	230a      	movs	r3, #10
 8004018:	71bb      	strb	r3, [r7, #6]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 800401a:	2300      	movs	r3, #0
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	e032      	b.n	8004086 <DevPwmFunc_Init+0x7a>
	{
		pwm_duty[tag_i] = DevParamRead.UltraParam.PluseDuty[tag_i];
 8004020:	79fa      	ldrb	r2, [r7, #7]
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	4929      	ldr	r1, [pc, #164]	@ (80040cc <DevPwmFunc_Init+0xc0>)
 8004026:	440a      	add	r2, r1
 8004028:	7f91      	ldrb	r1, [r2, #30]
 800402a:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <DevPwmFunc_Init+0xc4>)
 800402c:	54d1      	strb	r1, [r2, r3]
		pwm_period[tag_i] = DevParamRead.UltraParam.PlusePeriod[tag_i];
 800402e:	79fb      	ldrb	r3, [r7, #7]
 8004030:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <DevPwmFunc_Init+0xc0>)
 8004032:	3310      	adds	r3, #16
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	4413      	add	r3, r2
 8004038:	88da      	ldrh	r2, [r3, #6]
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	4611      	mov	r1, r2
 800403e:	4a25      	ldr	r2, [pc, #148]	@ (80040d4 <DevPwmFunc_Init+0xc8>)
 8004040:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	4a23      	ldr	r2, [pc, #140]	@ (80040d4 <DevPwmFunc_Init+0xc8>)
 8004048:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800404c:	79fb      	ldrb	r3, [r7, #7]
 800404e:	4a20      	ldr	r2, [pc, #128]	@ (80040d0 <DevPwmFunc_Init+0xc4>)
 8004050:	5cd2      	ldrb	r2, [r2, r3]
 8004052:	79fc      	ldrb	r4, [r7, #7]
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 f924 	bl	80042a4 <DevPwm_SetPulseFreq>
 800405c:	4603      	mov	r3, r0
 800405e:	4a1e      	ldr	r2, [pc, #120]	@ (80040d8 <DevPwmFunc_Init+0xcc>)
 8004060:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		pwm_duty_old[tag_i] = pwm_duty[tag_i];
 8004064:	79fa      	ldrb	r2, [r7, #7]
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	4919      	ldr	r1, [pc, #100]	@ (80040d0 <DevPwmFunc_Init+0xc4>)
 800406a:	5c89      	ldrb	r1, [r1, r2]
 800406c:	4a1b      	ldr	r2, [pc, #108]	@ (80040dc <DevPwmFunc_Init+0xd0>)
 800406e:	54d1      	strb	r1, [r2, r3]
		pwm_period_old[tag_i] = pwm_period[tag_i];
 8004070:	79fa      	ldrb	r2, [r7, #7]
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	4917      	ldr	r1, [pc, #92]	@ (80040d4 <DevPwmFunc_Init+0xc8>)
 8004076:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800407a:	4919      	ldr	r1, [pc, #100]	@ (80040e0 <DevPwmFunc_Init+0xd4>)
 800407c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	3301      	adds	r3, #1
 8004084:	71fb      	strb	r3, [r7, #7]
 8004086:	79fb      	ldrb	r3, [r7, #7]
 8004088:	2b07      	cmp	r3, #7
 800408a:	d9c9      	bls.n	8004020 <DevPwmFunc_Init+0x14>
	}

	motor_level = DevParamRead.UltraParam.Vibra_Param;
 800408c:	4b0f      	ldr	r3, [pc, #60]	@ (80040cc <DevPwmFunc_Init+0xc0>)
 800408e:	8b9b      	ldrh	r3, [r3, #28]
 8004090:	71bb      	strb	r3, [r7, #6]
	MotorLevel = motor_level;
 8004092:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <DevPwmFunc_Init+0xd8>)
 8004094:	79bb      	ldrb	r3, [r7, #6]
 8004096:	7013      	strb	r3, [r2, #0]

	HAL_TIM_Base_Start(FAN_HANDLE);
 8004098:	4813      	ldr	r0, [pc, #76]	@ (80040e8 <DevPwmFunc_Init+0xdc>)
 800409a:	f003 faa5 	bl	80075e8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(FAN_HANDLE, FAN_CHANNEL);
 800409e:	2108      	movs	r1, #8
 80040a0:	4811      	ldr	r0, [pc, #68]	@ (80040e8 <DevPwmFunc_Init+0xdc>)
 80040a2:	f003 fbf3 	bl	800788c <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(MOTOR_HANDLE);
 80040a6:	4811      	ldr	r0, [pc, #68]	@ (80040ec <DevPwmFunc_Init+0xe0>)
 80040a8:	f003 fa9e 	bl	80075e8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(MOTOR_HANDLE, MOTOR_CHANNEL);
 80040ac:	2104      	movs	r1, #4
 80040ae:	480f      	ldr	r0, [pc, #60]	@ (80040ec <DevPwmFunc_Init+0xe0>)
 80040b0:	f003 fbec 	bl	800788c <HAL_TIM_PWM_Start>
	__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,motor_level * MOTOR_STEP);
 80040b4:	79bb      	ldrb	r3, [r7, #6]
 80040b6:	22d8      	movs	r2, #216	@ 0xd8
 80040b8:	fb03 f202 	mul.w	r2, r3, r2
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <DevPwmFunc_Init+0xe0>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd90      	pop	{r4, r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2000061c 	.word	0x2000061c
 80040d0:	2000071c 	.word	0x2000071c
 80040d4:	2000072c 	.word	0x2000072c
 80040d8:	2000076c 	.word	0x2000076c
 80040dc:	20000724 	.word	0x20000724
 80040e0:	2000074c 	.word	0x2000074c
 80040e4:	20000178 	.word	0x20000178
 80040e8:	2000034c 	.word	0x2000034c
 80040ec:	20000424 	.word	0x20000424

080040f0 <DevPwmFunc_Main>:

void DevPwmFunc_Main(void)
{
 80040f0:	b590      	push	{r4, r7, lr}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
	uint8_t tag_i = 0;
 80040f6:	2300      	movs	r3, #0
 80040f8:	71fb      	strb	r3, [r7, #7]

	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 80040fa:	2300      	movs	r3, #0
 80040fc:	71fb      	strb	r3, [r7, #7]
 80040fe:	e036      	b.n	800416e <DevPwmFunc_Main+0x7e>
	{
		if(pwm_period_old[tag_i] != pwm_period[tag_i])
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	4a37      	ldr	r2, [pc, #220]	@ (80041e0 <DevPwmFunc_Main+0xf0>)
 8004104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	4936      	ldr	r1, [pc, #216]	@ (80041e4 <DevPwmFunc_Main+0xf4>)
 800410c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004110:	429a      	cmp	r2, r3
 8004112:	d017      	beq.n	8004144 <DevPwmFunc_Main+0x54>
		{
			pwm_period_old[tag_i] = pwm_period[tag_i];
 8004114:	79fa      	ldrb	r2, [r7, #7]
 8004116:	79fb      	ldrb	r3, [r7, #7]
 8004118:	4932      	ldr	r1, [pc, #200]	@ (80041e4 <DevPwmFunc_Main+0xf4>)
 800411a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800411e:	4930      	ldr	r1, [pc, #192]	@ (80041e0 <DevPwmFunc_Main+0xf0>)
 8004120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pwm_pluse[tag_i] = DevPwm_SetPulseFreq(tag_i,pwm_period[tag_i],pwm_duty[tag_i]);
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	4a2f      	ldr	r2, [pc, #188]	@ (80041e4 <DevPwmFunc_Main+0xf4>)
 8004128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	4a2e      	ldr	r2, [pc, #184]	@ (80041e8 <DevPwmFunc_Main+0xf8>)
 8004130:	5cd2      	ldrb	r2, [r2, r3]
 8004132:	79fc      	ldrb	r4, [r7, #7]
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8b4 	bl	80042a4 <DevPwm_SetPulseFreq>
 800413c:	4603      	mov	r3, r0
 800413e:	4a2b      	ldr	r2, [pc, #172]	@ (80041ec <DevPwmFunc_Main+0xfc>)
 8004140:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		}

		if(pwm_duty_old[tag_i] != pwm_duty[tag_i])
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	4a2a      	ldr	r2, [pc, #168]	@ (80041f0 <DevPwmFunc_Main+0x100>)
 8004148:	5cd2      	ldrb	r2, [r2, r3]
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	4926      	ldr	r1, [pc, #152]	@ (80041e8 <DevPwmFunc_Main+0xf8>)
 800414e:	5ccb      	ldrb	r3, [r1, r3]
 8004150:	429a      	cmp	r2, r3
 8004152:	d009      	beq.n	8004168 <DevPwmFunc_Main+0x78>
		{
			pwm_duty_old[tag_i] = pwm_duty[tag_i];
 8004154:	79fa      	ldrb	r2, [r7, #7]
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	4923      	ldr	r1, [pc, #140]	@ (80041e8 <DevPwmFunc_Main+0xf8>)
 800415a:	5c89      	ldrb	r1, [r1, r2]
 800415c:	4a24      	ldr	r2, [pc, #144]	@ (80041f0 <DevPwmFunc_Main+0x100>)
 800415e:	54d1      	strb	r1, [r2, r3]
			DevPwm_SetPulseDuty(tag_i);
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f854 	bl	8004210 <DevPwm_SetPulseDuty>
	for(tag_i = 0;tag_i < DevUltraChMax;tag_i++)
 8004168:	79fb      	ldrb	r3, [r7, #7]
 800416a:	3301      	adds	r3, #1
 800416c:	71fb      	strb	r3, [r7, #7]
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b07      	cmp	r3, #7
 8004172:	d9c5      	bls.n	8004100 <DevPwmFunc_Main+0x10>
		}else
		{
		}
	}

	if(MotorLevel != DevParamRead.UltraParam.Vibra_Param)
 8004174:	4b1f      	ldr	r3, [pc, #124]	@ (80041f4 <DevPwmFunc_Main+0x104>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	4b1f      	ldr	r3, [pc, #124]	@ (80041f8 <DevPwmFunc_Main+0x108>)
 800417c:	8b9b      	ldrh	r3, [r3, #28]
 800417e:	429a      	cmp	r2, r3
 8004180:	d00d      	beq.n	800419e <DevPwmFunc_Main+0xae>
	{
		MotorLevel = DevParamRead.UltraParam.Vibra_Param;
 8004182:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <DevPwmFunc_Main+0x108>)
 8004184:	8b9b      	ldrh	r3, [r3, #28]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	4b1a      	ldr	r3, [pc, #104]	@ (80041f4 <DevPwmFunc_Main+0x104>)
 800418a:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SetCompare(MOTOR_HANDLE,MOTOR_CHANNEL,MotorLevel * MOTOR_STEP);
 800418c:	4b19      	ldr	r3, [pc, #100]	@ (80041f4 <DevPwmFunc_Main+0x104>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	23d8      	movs	r3, #216	@ 0xd8
 8004194:	fb03 f202 	mul.w	r2, r3, r2
 8004198:	4b18      	ldr	r3, [pc, #96]	@ (80041fc <DevPwmFunc_Main+0x10c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	639a      	str	r2, [r3, #56]	@ 0x38
	}

	if(SampleTemp > 45.0f)
 800419e:	4b18      	ldr	r3, [pc, #96]	@ (8004200 <DevPwmFunc_Main+0x110>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4918      	ldr	r1, [pc, #96]	@ (8004204 <DevPwmFunc_Main+0x114>)
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fc ff27 	bl	8000ff8 <__aeabi_fcmpgt>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d005      	beq.n	80041bc <DevPwmFunc_Main+0xcc>
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,FAN_PULSE);
 80041b0:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <DevPwmFunc_Main+0x118>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b8:	63da      	str	r2, [r3, #60]	@ 0x3c
	}else if(SampleTemp < 40.0f)
	{
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
	}
}
 80041ba:	e00d      	b.n	80041d8 <DevPwmFunc_Main+0xe8>
	}else if(SampleTemp < 40.0f)
 80041bc:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <DevPwmFunc_Main+0x110>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4912      	ldr	r1, [pc, #72]	@ (800420c <DevPwmFunc_Main+0x11c>)
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc fefa 	bl	8000fbc <__aeabi_fcmplt>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d100      	bne.n	80041d0 <DevPwmFunc_Main+0xe0>
}
 80041ce:	e003      	b.n	80041d8 <DevPwmFunc_Main+0xe8>
		__HAL_TIM_SetCompare(FAN_HANDLE,FAN_CHANNEL,0);
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <DevPwmFunc_Main+0x118>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2200      	movs	r2, #0
 80041d6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd90      	pop	{r4, r7, pc}
 80041e0:	2000074c 	.word	0x2000074c
 80041e4:	2000072c 	.word	0x2000072c
 80041e8:	2000071c 	.word	0x2000071c
 80041ec:	2000076c 	.word	0x2000076c
 80041f0:	20000724 	.word	0x20000724
 80041f4:	20000178 	.word	0x20000178
 80041f8:	2000061c 	.word	0x2000061c
 80041fc:	20000424 	.word	0x20000424
 8004200:	20000704 	.word	0x20000704
 8004204:	42340000 	.word	0x42340000
 8004208:	2000034c 	.word	0x2000034c
 800420c:	42200000 	.word	0x42200000

08004210 <DevPwm_SetPulseDuty>:

static void DevPwm_SetPulseDuty(uint8_t ch)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	71fb      	strb	r3, [r7, #7]
	uint32_t pulse = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
	uint32_t channel;
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <DevPwm_SetPulseDuty+0x84>)
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]
	p_handle = dev_ultra_handle[ch].Handle;
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	4a19      	ldr	r2, [pc, #100]	@ (8004294 <DevPwm_SetPulseDuty+0x84>)
 800422e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004232:	60fb      	str	r3, [r7, #12]

	pulse = pwm_duty[ch] * pwm_pluse[ch] / 100;
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <DevPwm_SetPulseDuty+0x88>)
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	4619      	mov	r1, r3
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	4a17      	ldr	r2, [pc, #92]	@ (800429c <DevPwm_SetPulseDuty+0x8c>)
 8004240:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4a15      	ldr	r2, [pc, #84]	@ (80042a0 <DevPwm_SetPulseDuty+0x90>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d104      	bne.n	8004262 <DevPwm_SetPulseDuty+0x52>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8004260:	e013      	b.n	800428a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b04      	cmp	r3, #4
 8004266:	d104      	bne.n	8004272 <DevPwm_SetPulseDuty+0x62>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004270:	e00b      	b.n	800428a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d104      	bne.n	8004282 <DevPwm_SetPulseDuty+0x72>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8004280:	e003      	b.n	800428a <DevPwm_SetPulseDuty+0x7a>
	__HAL_TIM_SetCompare(p_handle,channel,pulse);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	bc80      	pop	{r7}
 8004292:	4770      	bx	lr
 8004294:	08009e88 	.word	0x08009e88
 8004298:	2000071c 	.word	0x2000071c
 800429c:	2000076c 	.word	0x2000076c
 80042a0:	51eb851f 	.word	0x51eb851f

080042a4 <DevPwm_SetPulseFreq>:
 * @param	dutycycle:脉冲占空比
 * @retval	none
 * @func	调节脉冲时间和占空比
 */
static uint32_t DevPwm_SetPulseFreq(uint8_t ch,uint32_t pulsetime,uint8_t duty)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	71fb      	strb	r3, [r7, #7]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71bb      	strb	r3, [r7, #6]
	uint32_t input_freq = 0;
 80042b4:	2300      	movs	r3, #0
 80042b6:	617b      	str	r3, [r7, #20]
	uint32_t out_prescaler_value = 0;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
	uint32_t out_count_value = 0;
 80042bc:	2300      	movs	r3, #0
 80042be:	61bb      	str	r3, [r7, #24]
	uint32_t channel;
	uint32_t pluse = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
	TIM_HandleTypeDef *p_handle;

	channel = dev_ultra_handle[ch].Channel;
 80042c4:	79fb      	ldrb	r3, [r7, #7]
 80042c6:	4a3f      	ldr	r2, [pc, #252]	@ (80043c4 <DevPwm_SetPulseFreq+0x120>)
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	60fb      	str	r3, [r7, #12]
	p_handle = dev_ultra_handle[ch].Handle;
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	4a3c      	ldr	r2, [pc, #240]	@ (80043c4 <DevPwm_SetPulseFreq+0x120>)
 80042d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042d8:	60bb      	str	r3, [r7, #8]

	input_freq = 10000 / pulsetime;
 80042da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042e4:	617b      	str	r3, [r7, #20]

	if((input_freq > MAX_OUTPUT_FREQ) || (input_freq < MIN_OUTPUT_FREQ))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d802      	bhi.n	80042f6 <DevPwm_SetPulseFreq+0x52>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d801      	bhi.n	80042fa <DevPwm_SetPulseFreq+0x56>
	{
		return 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e060      	b.n	80043bc <DevPwm_SetPulseFreq+0x118>
	}

	if((input_freq >= 20) && (input_freq <= 10000))
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b13      	cmp	r3, #19
 80042fe:	d90d      	bls.n	800431c <DevPwm_SetPulseFreq+0x78>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004306:	4293      	cmp	r3, r2
 8004308:	d808      	bhi.n	800431c <DevPwm_SetPulseFreq+0x78>
	{
		out_prescaler_value = 720-1;
 800430a:	f240 23cf 	movw	r3, #719	@ 0x2cf
 800430e:	61fb      	str	r3, [r7, #28]
		out_count_value = 1000000 / input_freq;
 8004310:	4a2d      	ldr	r2, [pc, #180]	@ (80043c8 <DevPwm_SetPulseFreq+0x124>)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	fbb2 f3f3 	udiv	r3, r2, r3
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	e010      	b.n	800433e <DevPwm_SetPulseFreq+0x9a>
	}else if((input_freq >= 2) && (input_freq < 20))
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d90b      	bls.n	800433a <DevPwm_SetPulseFreq+0x96>
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	2b13      	cmp	r3, #19
 8004326:	d808      	bhi.n	800433a <DevPwm_SetPulseFreq+0x96>
	{
		out_prescaler_value = 7200-1;
 8004328:	f641 431f 	movw	r3, #7199	@ 0x1c1f
 800432c:	61fb      	str	r3, [r7, #28]
		out_count_value = 100000 / input_freq;
 800432e:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <DevPwm_SetPulseFreq+0x128>)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e001      	b.n	800433e <DevPwm_SetPulseFreq+0x9a>
	}else
	{
		return 0;
 800433a:	2300      	movs	r3, #0
 800433c:	e03e      	b.n	80043bc <DevPwm_SetPulseFreq+0x118>
	}

	// 停止定时器
	HAL_TIM_PWM_Stop(p_handle, channel);
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	68b8      	ldr	r0, [r7, #8]
 8004342:	f003 fb6b 	bl	8007a1c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop(p_handle);
 8004346:	68b8      	ldr	r0, [r7, #8]
 8004348:	f003 f9b4 	bl	80076b4 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_PRESCALER(p_handle, out_prescaler_value);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69fa      	ldr	r2, [r7, #28]
 8004352:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SetAutoreload(p_handle, out_count_value);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	60da      	str	r2, [r3, #12]

	pluse = out_count_value * duty / 100;
 8004362:	79bb      	ldrb	r3, [r7, #6]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	fb02 f303 	mul.w	r3, r2, r3
 800436a:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <DevPwm_SetPulseFreq+0x12c>)
 800436c:	fba2 2303 	umull	r2, r3, r2, r3
 8004370:	095b      	lsrs	r3, r3, #5
 8004372:	613b      	str	r3, [r7, #16]
	__HAL_TIM_SetCompare(p_handle, channel, pluse); // 假设使用通道1	//PWM_Ultra_B
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d104      	bne.n	8004384 <DevPwm_SetPulseFreq+0xe0>
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	635a      	str	r2, [r3, #52]	@ 0x34
 8004382:	e013      	b.n	80043ac <DevPwm_SetPulseFreq+0x108>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b04      	cmp	r3, #4
 8004388:	d104      	bne.n	8004394 <DevPwm_SetPulseFreq+0xf0>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6393      	str	r3, [r2, #56]	@ 0x38
 8004392:	e00b      	b.n	80043ac <DevPwm_SetPulseFreq+0x108>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d104      	bne.n	80043a4 <DevPwm_SetPulseFreq+0x100>
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80043a2:	e003      	b.n	80043ac <DevPwm_SetPulseFreq+0x108>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	6413      	str	r3, [r2, #64]	@ 0x40

    // 更新并启动定时器
	HAL_TIM_Base_Start(p_handle);
 80043ac:	68b8      	ldr	r0, [r7, #8]
 80043ae:	f003 f91b 	bl	80075e8 <HAL_TIM_Base_Start>
    HAL_TIM_PWM_Start(p_handle, channel);
 80043b2:	68f9      	ldr	r1, [r7, #12]
 80043b4:	68b8      	ldr	r0, [r7, #8]
 80043b6:	f003 fa69 	bl	800788c <HAL_TIM_PWM_Start>

    return out_count_value;
 80043ba:	69bb      	ldr	r3, [r7, #24]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	08009e88 	.word	0x08009e88
 80043c8:	000f4240 	.word	0x000f4240
 80043cc:	000186a0 	.word	0x000186a0
 80043d0:	51eb851f 	.word	0x51eb851f

080043d4 <DevScreen_StartorStop>:
/* @brief:	屏幕控制超声输出
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_StartorStop(uint8_t *buff)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
	WorkSta = (buff[0] == 0) ? DEVWORKSTOP : DEVWORKSTART;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <DevScreen_StartorStop+0x2c>)
 80043ee:	701a      	strb	r2, [r3, #0]
	UltraWorkTime = 0;
 80043f0:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <DevScreen_StartorStop+0x30>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	20000614 	.word	0x20000614
 8004404:	20000618 	.word	0x20000618

08004408 <DevScreen_SetUltraFreq>:
/* @brief:	屏幕设置驱动频率
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraFreq(uint8_t *buff)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8004410:	2300      	movs	r3, #0
 8004412:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 8004414:	2300      	movs	r3, #0
 8004416:	72fb      	strb	r3, [r7, #11]
	uint16_t freq_param_temp = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	81bb      	strh	r3, [r7, #12]

	DevParamRead.UltraParam.UltraParamChangeFlg[0] = 0xdddd;
 800441c:	4b39      	ldr	r3, [pc, #228]	@ (8004504 <DevScreen_SetUltraFreq+0xfc>)
 800441e:	f64d 52dd 	movw	r2, #56797	@ 0xdddd
 8004422:	809a      	strh	r2, [r3, #4]
	DevParamRead.UltraParam.UltraParamChangeFlg[1] = 0xeeee;
 8004424:	4b37      	ldr	r3, [pc, #220]	@ (8004504 <DevScreen_SetUltraFreq+0xfc>)
 8004426:	f64e 62ee 	movw	r2, #61166	@ 0xeeee
 800442a:	80da      	strh	r2, [r3, #6]
	DevParamRead.UltraParam.UltraParamChangeFlg[2] = 0xffff;
 800442c:	4b35      	ldr	r3, [pc, #212]	@ (8004504 <DevScreen_SetUltraFreq+0xfc>)
 800442e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004432:	811a      	strh	r2, [r3, #8]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004434:	2300      	movs	r3, #0
 8004436:	73fb      	strb	r3, [r7, #15]
 8004438:	e05a      	b.n	80044f0 <DevScreen_SetUltraFreq+0xe8>
	{
		if((tag_i % 2) == 0)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11c      	bne.n	8004480 <DevScreen_SetUltraFreq+0x78>
		{
			temp = tag_i / 2 * 3;
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b2db      	uxtb	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	0052      	lsls	r2, r2, #1
 8004450:	4413      	add	r3, r2
 8004452:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 8004454:	7afb      	ldrb	r3, [r7, #11]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4413      	add	r3, r2
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	b21b      	sxth	r3, r3
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	b21a      	sxth	r2, r3
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	3301      	adds	r3, #1
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	440b      	add	r3, r1
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	b2db      	uxtb	r3, r3
 8004470:	b21b      	sxth	r3, r3
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	b21b      	sxth	r3, r3
 8004478:	4313      	orrs	r3, r2
 800447a:	b21b      	sxth	r3, r3
 800447c:	81bb      	strh	r3, [r7, #12]
 800447e:	e01b      	b.n	80044b8 <DevScreen_SetUltraFreq+0xb0>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	085b      	lsrs	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	461a      	mov	r2, r3
 8004488:	0052      	lsls	r2, r2, #1
 800448a:	4413      	add	r3, r2
 800448c:	b2db      	uxtb	r3, r3
 800448e:	3301      	adds	r3, #1
 8004490:	72fb      	strb	r3, [r7, #11]
			freq_param_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 8004492:	7afb      	ldrb	r3, [r7, #11]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	4413      	add	r3, r2
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	b21b      	sxth	r3, r3
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	b21b      	sxth	r3, r3
 80044a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80044a4:	b21a      	sxth	r2, r3
 80044a6:	7afb      	ldrb	r3, [r7, #11]
 80044a8:	3301      	adds	r3, #1
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	440b      	add	r3, r1
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b21b      	sxth	r3, r3
 80044b6:	81bb      	strh	r3, [r7, #12]
		}

		if(freq_param_temp != 0)
 80044b8:	89bb      	ldrh	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d015      	beq.n	80044ea <DevScreen_SetUltraFreq+0xe2>
		{
			FlashSaveFlg = (DevParamRead.UltraParam.Freq_Param[tag_i] != freq_param_temp) ? 1 : FlashSaveFlg;
 80044be:	7bfb      	ldrb	r3, [r7, #15]
 80044c0:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <DevScreen_SetUltraFreq+0xfc>)
 80044c2:	3304      	adds	r3, #4
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	4413      	add	r3, r2
 80044c8:	885b      	ldrh	r3, [r3, #2]
 80044ca:	89ba      	ldrh	r2, [r7, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d102      	bne.n	80044d6 <DevScreen_SetUltraFreq+0xce>
 80044d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004508 <DevScreen_SetUltraFreq+0x100>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	e000      	b.n	80044d8 <DevScreen_SetUltraFreq+0xd0>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004508 <DevScreen_SetUltraFreq+0x100>)
 80044da:	7013      	strb	r3, [r2, #0]
			DevParamRead.UltraParam.Freq_Param[tag_i] = freq_param_temp;
 80044dc:	7bfb      	ldrb	r3, [r7, #15]
 80044de:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <DevScreen_SetUltraFreq+0xfc>)
 80044e0:	3304      	adds	r3, #4
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	4413      	add	r3, r2
 80044e6:	89ba      	ldrh	r2, [r7, #12]
 80044e8:	805a      	strh	r2, [r3, #2]
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80044ea:	7bfb      	ldrb	r3, [r7, #15]
 80044ec:	3301      	adds	r3, #1
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b07      	cmp	r3, #7
 80044f4:	d9a1      	bls.n	800443a <DevScreen_SetUltraFreq+0x32>
		}
	}
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000061c 	.word	0x2000061c
 8004508:	20000716 	.word	0x20000716

0800450c <DevScreen_SetUltraVibra>:
/* @brief:	屏幕设置震动等级
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraVibra(uint8_t *buff)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 8004514:	4b0f      	ldr	r3, [pc, #60]	@ (8004554 <DevScreen_SetUltraVibra+0x48>)
 8004516:	8b5b      	ldrh	r3, [r3, #26]
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	7812      	ldrb	r2, [r2, #0]
 800451c:	4293      	cmp	r3, r2
 800451e:	d106      	bne.n	800452e <DevScreen_SetUltraVibra+0x22>
	   (DevParamRead.UltraParam.Vibra_Param != (uint16_t)buff[1]))
 8004520:	4b0c      	ldr	r3, [pc, #48]	@ (8004554 <DevScreen_SetUltraVibra+0x48>)
 8004522:	8b9b      	ldrh	r3, [r3, #28]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	3201      	adds	r2, #1
 8004528:	7812      	ldrb	r2, [r2, #0]
	if((DevParamRead.UltraParam.VibraEnableFlg != (uint16_t)buff[0]) ||
 800452a:	4293      	cmp	r3, r2
 800452c:	d00d      	beq.n	800454a <DevScreen_SetUltraVibra+0x3e>
	{
		FlashSaveFlg = 1;
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <DevScreen_SetUltraVibra+0x4c>)
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.VibraEnableFlg = (uint16_t)buff[0];
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	4b06      	ldr	r3, [pc, #24]	@ (8004554 <DevScreen_SetUltraVibra+0x48>)
 800453c:	835a      	strh	r2, [r3, #26]
		DevParamRead.UltraParam.Vibra_Param = (uint16_t)buff[1];
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3301      	adds	r3, #1
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b03      	ldr	r3, [pc, #12]	@ (8004554 <DevScreen_SetUltraVibra+0x48>)
 8004548:	839a      	strh	r2, [r3, #28]
	}
}
 800454a:	bf00      	nop
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	bc80      	pop	{r7}
 8004552:	4770      	bx	lr
 8004554:	2000061c 	.word	0x2000061c
 8004558:	20000716 	.word	0x20000716

0800455c <DevScreen_SetUltraDuty>:
/* @brief:	屏幕设置脉冲占空比
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraDuty(uint8_t *buff)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	uint8_t tag_i;
	uint8_t pluse_duty_temp = 0;
 8004564:	2300      	movs	r3, #0
 8004566:	73bb      	strb	r3, [r7, #14]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004568:	2300      	movs	r3, #0
 800456a:	73fb      	strb	r3, [r7, #15]
 800456c:	e028      	b.n	80045c0 <DevScreen_SetUltraDuty+0x64>
	{
		pluse_duty_temp = buff[tag_i];
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	4413      	add	r3, r2
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	73bb      	strb	r3, [r7, #14]

		if(pluse_duty_temp != DevParamRead.UltraParam.PluseDuty[tag_i])
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <DevScreen_SetUltraDuty+0x74>)
 800457c:	4413      	add	r3, r2
 800457e:	7f9b      	ldrb	r3, [r3, #30]
 8004580:	7bba      	ldrb	r2, [r7, #14]
 8004582:	429a      	cmp	r2, r3
 8004584:	d019      	beq.n	80045ba <DevScreen_SetUltraDuty+0x5e>
		{
			FlashSaveFlg = 1;
 8004586:	4b13      	ldr	r3, [pc, #76]	@ (80045d4 <DevScreen_SetUltraDuty+0x78>)
 8004588:	2201      	movs	r2, #1
 800458a:	701a      	strb	r2, [r3, #0]
			if(pluse_duty_temp == 100)
 800458c:	7bbb      	ldrb	r3, [r7, #14]
 800458e:	2b64      	cmp	r3, #100	@ 0x64
 8004590:	d105      	bne.n	800459e <DevScreen_SetUltraDuty+0x42>
			{
				DevParamRead.UltraParam.PluseDuty[tag_i] = 101;    //保证占空比100%时,PWM输出会溢出
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	4a0e      	ldr	r2, [pc, #56]	@ (80045d0 <DevScreen_SetUltraDuty+0x74>)
 8004596:	4413      	add	r3, r2
 8004598:	2265      	movs	r2, #101	@ 0x65
 800459a:	779a      	strb	r2, [r3, #30]
 800459c:	e004      	b.n	80045a8 <DevScreen_SetUltraDuty+0x4c>
			}else
			{
				DevParamRead.UltraParam.PluseDuty[tag_i] = pluse_duty_temp;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	4a0b      	ldr	r2, [pc, #44]	@ (80045d0 <DevScreen_SetUltraDuty+0x74>)
 80045a2:	4413      	add	r3, r2
 80045a4:	7bba      	ldrb	r2, [r7, #14]
 80045a6:	779a      	strb	r2, [r3, #30]
			}
			DevPwm_LoadDuty(tag_i,DevParamRead.UltraParam.PluseDuty[tag_i]);
 80045a8:	7bfb      	ldrb	r3, [r7, #15]
 80045aa:	4a09      	ldr	r2, [pc, #36]	@ (80045d0 <DevScreen_SetUltraDuty+0x74>)
 80045ac:	4413      	add	r3, r2
 80045ae:	7f9a      	ldrb	r2, [r3, #30]
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fcfb 	bl	8003fb0 <DevPwm_LoadDuty>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	3301      	adds	r3, #1
 80045be:	73fb      	strb	r3, [r7, #15]
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b07      	cmp	r3, #7
 80045c4:	d9d3      	bls.n	800456e <DevScreen_SetUltraDuty+0x12>
		}
	}
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	2000061c 	.word	0x2000061c
 80045d4:	20000716 	.word	0x20000716

080045d8 <DevScreen_SetUltraPeriod>:
/* @brief:	屏幕设置脉冲周期
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraPeriod(uint8_t *buff)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	73fb      	strb	r3, [r7, #15]
	uint8_t temp = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	72fb      	strb	r3, [r7, #11]
	uint16_t period_temp = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	81bb      	strh	r3, [r7, #12]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
 80045f0:	e05b      	b.n	80046aa <DevScreen_SetUltraPeriod+0xd2>
	{
		if((tag_i % 2) == 0)
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11c      	bne.n	8004638 <DevScreen_SetUltraPeriod+0x60>
		{
			temp = tag_i / 2 * 3;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	0052      	lsls	r2, r2, #1
 8004608:	4413      	add	r3, r2
 800460a:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)buff[temp] << 4) | ((buff[temp + 1] >> 4) & 0x0f);
 800460c:	7afb      	ldrb	r3, [r7, #11]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	b21b      	sxth	r3, r3
 8004616:	011b      	lsls	r3, r3, #4
 8004618:	b21a      	sxth	r2, r3
 800461a:	7afb      	ldrb	r3, [r7, #11]
 800461c:	3301      	adds	r3, #1
 800461e:	6879      	ldr	r1, [r7, #4]
 8004620:	440b      	add	r3, r1
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	b2db      	uxtb	r3, r3
 8004628:	b21b      	sxth	r3, r3
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	b21b      	sxth	r3, r3
 8004630:	4313      	orrs	r3, r2
 8004632:	b21b      	sxth	r3, r3
 8004634:	81bb      	strh	r3, [r7, #12]
 8004636:	e01b      	b.n	8004670 <DevScreen_SetUltraPeriod+0x98>
		}else
		{
			temp = tag_i / 2 * 3 + 1;
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	0052      	lsls	r2, r2, #1
 8004642:	4413      	add	r3, r2
 8004644:	b2db      	uxtb	r3, r3
 8004646:	3301      	adds	r3, #1
 8004648:	72fb      	strb	r3, [r7, #11]
			period_temp = ((uint16_t)(buff[temp] & 0x0f) << 8) | buff[temp+1];
 800464a:	7afb      	ldrb	r3, [r7, #11]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4413      	add	r3, r2
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	b21b      	sxth	r3, r3
 8004654:	021b      	lsls	r3, r3, #8
 8004656:	b21b      	sxth	r3, r3
 8004658:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800465c:	b21a      	sxth	r2, r3
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	3301      	adds	r3, #1
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	440b      	add	r3, r1
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	b21b      	sxth	r3, r3
 800466a:	4313      	orrs	r3, r2
 800466c:	b21b      	sxth	r3, r3
 800466e:	81bb      	strh	r3, [r7, #12]
		}

		if(DevParamRead.UltraParam.PlusePeriod[tag_i] != period_temp)
 8004670:	7bfb      	ldrb	r3, [r7, #15]
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <DevScreen_SetUltraPeriod+0xe4>)
 8004674:	3310      	adds	r3, #16
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	88db      	ldrh	r3, [r3, #6]
 800467c:	89ba      	ldrh	r2, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d010      	beq.n	80046a4 <DevScreen_SetUltraPeriod+0xcc>
		{
			FlashSaveFlg = 1;
 8004682:	4b0f      	ldr	r3, [pc, #60]	@ (80046c0 <DevScreen_SetUltraPeriod+0xe8>)
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
			DevParamRead.UltraParam.PlusePeriod[tag_i] = period_temp;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
 800468a:	4a0c      	ldr	r2, [pc, #48]	@ (80046bc <DevScreen_SetUltraPeriod+0xe4>)
 800468c:	3310      	adds	r3, #16
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	89ba      	ldrh	r2, [r7, #12]
 8004694:	80da      	strh	r2, [r3, #6]
			DevPwm_LoadPeriod(tag_i,period_temp);
 8004696:	89bb      	ldrh	r3, [r7, #12]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	7bfb      	ldrb	r3, [r7, #15]
 800469c:	4611      	mov	r1, r2
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fc9c 	bl	8003fdc <DevPwm_LoadPeriod>
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	3301      	adds	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	7bfb      	ldrb	r3, [r7, #15]
 80046ac:	2b07      	cmp	r3, #7
 80046ae:	d9a0      	bls.n	80045f2 <DevScreen_SetUltraPeriod+0x1a>
		}
	}
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	2000061c 	.word	0x2000061c
 80046c0:	20000716 	.word	0x20000716

080046c4 <DevScreen_SetUltraWork>:
/* @brief:	屏幕设置刺激时长和脉冲时长
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraWork(uint8_t *buff)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
	uint16_t stimu_temp = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	81fb      	strh	r3, [r7, #14]
	uint16_t idle_temp = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	81bb      	strh	r3, [r7, #12]

	stimu_temp = ((uint16_t)buff[0] << 8) | buff[1];
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	b21b      	sxth	r3, r3
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	b21a      	sxth	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3301      	adds	r3, #1
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b21b      	sxth	r3, r3
 80046e6:	4313      	orrs	r3, r2
 80046e8:	b21b      	sxth	r3, r3
 80046ea:	81fb      	strh	r3, [r7, #14]
	idle_temp = ((uint16_t)buff[2] << 8) | buff[3];
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3302      	adds	r3, #2
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b21b      	sxth	r3, r3
 80046f4:	021b      	lsls	r3, r3, #8
 80046f6:	b21a      	sxth	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3303      	adds	r3, #3
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b21b      	sxth	r3, r3
 8004700:	4313      	orrs	r3, r2
 8004702:	b21b      	sxth	r3, r3
 8004704:	81bb      	strh	r3, [r7, #12]
	if((DevParamRead.UltraParam.StimuTime != stimu_temp) || (idle_temp != DevParamRead.UltraParam.IdleTime))
 8004706:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <DevScreen_SetUltraWork+0x74>)
 8004708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800470a:	89fa      	ldrh	r2, [r7, #14]
 800470c:	429a      	cmp	r2, r3
 800470e:	d104      	bne.n	800471a <DevScreen_SetUltraWork+0x56>
 8004710:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <DevScreen_SetUltraWork+0x74>)
 8004712:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004714:	89ba      	ldrh	r2, [r7, #12]
 8004716:	429a      	cmp	r2, r3
 8004718:	d008      	beq.n	800472c <DevScreen_SetUltraWork+0x68>
	{
		FlashSaveFlg = 1;
 800471a:	4b08      	ldr	r3, [pc, #32]	@ (800473c <DevScreen_SetUltraWork+0x78>)
 800471c:	2201      	movs	r2, #1
 800471e:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.StimuTime = stimu_temp;
 8004720:	4a05      	ldr	r2, [pc, #20]	@ (8004738 <DevScreen_SetUltraWork+0x74>)
 8004722:	89fb      	ldrh	r3, [r7, #14]
 8004724:	86d3      	strh	r3, [r2, #54]	@ 0x36
		DevParamRead.UltraParam.IdleTime = idle_temp;
 8004726:	4a04      	ldr	r2, [pc, #16]	@ (8004738 <DevScreen_SetUltraWork+0x74>)
 8004728:	89bb      	ldrh	r3, [r7, #12]
 800472a:	8713      	strh	r3, [r2, #56]	@ 0x38
	}
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	2000061c 	.word	0x2000061c
 800473c:	20000716 	.word	0x20000716

08004740 <DevScreen_SetUltraChEn>:
/* @brief:	屏幕设置超声通道使能
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraChEn(uint8_t *buff)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	uint8_t tag_i = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]

	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 800474c:	2300      	movs	r3, #0
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	e01a      	b.n	8004788 <DevScreen_SetUltraChEn+0x48>
	{
		if(DevParamRead.UltraParam.UltraEn[tag_i] != buff[tag_i])
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	4a11      	ldr	r2, [pc, #68]	@ (800479c <DevScreen_SetUltraChEn+0x5c>)
 8004756:	4413      	add	r3, r2
 8004758:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	440b      	add	r3, r1
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d00c      	beq.n	8004782 <DevScreen_SetUltraChEn+0x42>
		{
			FlashSaveFlg = 1;
 8004768:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <DevScreen_SetUltraChEn+0x60>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
			DevParamRead.UltraParam.UltraEn[tag_i] = buff[tag_i];
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	441a      	add	r2, r3
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	7811      	ldrb	r1, [r2, #0]
 8004778:	4a08      	ldr	r2, [pc, #32]	@ (800479c <DevScreen_SetUltraChEn+0x5c>)
 800477a:	4413      	add	r3, r2
 800477c:	460a      	mov	r2, r1
 800477e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
	for(tag_i = 0;tag_i < ULTRACHNUM;tag_i++)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3301      	adds	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	7bfb      	ldrb	r3, [r7, #15]
 800478a:	2b07      	cmp	r3, #7
 800478c:	d9e1      	bls.n	8004752 <DevScreen_SetUltraChEn+0x12>
		}
	}
}
 800478e:	bf00      	nop
 8004790:	bf00      	nop
 8004792:	3714      	adds	r7, #20
 8004794:	46bd      	mov	sp, r7
 8004796:	bc80      	pop	{r7}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000061c 	.word	0x2000061c
 80047a0:	20000716 	.word	0x20000716

080047a4 <DevScreen_SetUltraModule>:
/* @brief:	屏幕设置设备工作模式
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetUltraModule(uint8_t * buff)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	if(DevParamRead.UltraParam.UltraWorkModule != buff[0])
 80047ac:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <DevScreen_SetUltraModule+0x40>)
 80047ae:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	7812      	ldrb	r2, [r2, #0]
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00e      	beq.n	80047d8 <DevScreen_SetUltraModule+0x34>
	{
		FlashSaveFlg = 1;
 80047ba:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <DevScreen_SetUltraModule+0x44>)
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.UltraWorkModule = (buff[0] == 0) ? 2 : buff[0];
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d003      	beq.n	80047d0 <DevScreen_SetUltraModule+0x2c>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	e000      	b.n	80047d2 <DevScreen_SetUltraModule+0x2e>
 80047d0:	2202      	movs	r2, #2
 80047d2:	4b04      	ldr	r3, [pc, #16]	@ (80047e4 <DevScreen_SetUltraModule+0x40>)
 80047d4:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	}

}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000061c 	.word	0x2000061c
 80047e8:	20000716 	.word	0x20000716

080047ec <DevScreen_SetPowerLevel>:
/* @brief:	屏幕设置超声驱动电压
 * @param:	buff-指令参数
 * @retval: none
 */
static void DevScreen_SetPowerLevel(uint8_t * buff)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	if(DevParamRead.UltraParam.UltraPowerLevel != buff[0])
 80047f4:	4b10      	ldr	r3, [pc, #64]	@ (8004838 <DevScreen_SetPowerLevel+0x4c>)
 80047f6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	7812      	ldrb	r2, [r2, #0]
 80047fe:	4293      	cmp	r3, r2
 8004800:	d015      	beq.n	800482e <DevScreen_SetPowerLevel+0x42>
	{
		FlashSaveFlg = 1;
 8004802:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <DevScreen_SetPowerLevel+0x50>)
 8004804:	2201      	movs	r2, #1
 8004806:	701a      	strb	r2, [r3, #0]
		DevParamRead.UltraParam.UltraPowerLevel = (buff[0] > 5) ? 0 : buff[0];
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d803      	bhi.n	8004818 <DevScreen_SetPowerLevel+0x2c>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	461a      	mov	r2, r3
 8004816:	e000      	b.n	800481a <DevScreen_SetPowerLevel+0x2e>
 8004818:	2200      	movs	r2, #0
 800481a:	4b07      	ldr	r3, [pc, #28]	@ (8004838 <DevScreen_SetPowerLevel+0x4c>)
 800481c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

		DevAD5160_ValueLoad(DevParamRead.UltraParam.UltraPowerLevel);
 8004820:	4b05      	ldr	r3, [pc, #20]	@ (8004838 <DevScreen_SetPowerLevel+0x4c>)
 8004822:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004826:	b2db      	uxtb	r3, r3
 8004828:	4618      	mov	r0, r3
 800482a:	f7fe fcd9 	bl	80031e0 <DevAD5160_ValueLoad>
	}
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	2000061c 	.word	0x2000061c
 800483c:	20000716 	.word	0x20000716

08004840 <DevUart_Init>:

void DevUart_Init(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
	 HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <DevUart_Init+0x28>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2240      	movs	r2, #64	@ 0x40
 800484a:	4619      	mov	r1, r3
 800484c:	4807      	ldr	r0, [pc, #28]	@ (800486c <DevUart_Init+0x2c>)
 800484e:	f004 f8a1 	bl	8008994 <HAL_UART_Receive_DMA>
	 __HAL_UART_ENABLE_IT(DEV_SCREEN_UART_HANDLE,UART_IT_IDLE);
 8004852:	4b06      	ldr	r3, [pc, #24]	@ (800486c <DevUart_Init+0x2c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	4b04      	ldr	r3, [pc, #16]	@ (800486c <DevUart_Init+0x2c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0210 	orr.w	r2, r2, #16
 8004860:	60da      	str	r2, [r3, #12]
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	2000017c 	.word	0x2000017c
 800486c:	20000544 	.word	0x20000544

08004870 <HAL_UART_IdleCallback>:

void HAL_UART_IdleCallback(UART_HandleTypeDef *huart)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	uint8_t cmd_id = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
	if((huart->Instance == USART3) && (RESET != __HAL_UART_GET_FLAG(DEV_SCREEN_UART_HANDLE,UART_FLAG_IDLE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2e      	ldr	r2, [pc, #184]	@ (800493c <HAL_UART_IdleCallback+0xcc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d155      	bne.n	8004932 <HAL_UART_IdleCallback+0xc2>
 8004886:	4b2e      	ldr	r3, [pc, #184]	@ (8004940 <HAL_UART_IdleCallback+0xd0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b10      	cmp	r3, #16
 8004892:	d14e      	bne.n	8004932 <HAL_UART_IdleCallback+0xc2>
	{
		HAL_UART_DMAStop(DEV_SCREEN_UART_HANDLE);
 8004894:	482a      	ldr	r0, [pc, #168]	@ (8004940 <HAL_UART_IdleCallback+0xd0>)
 8004896:	f004 f8a2 	bl	80089de <HAL_UART_DMAStop>
		uint8_t *temp_buff = passive_buff;
 800489a:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60bb      	str	r3, [r7, #8]
		passive_buff = active_buff;
 80048a0:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <HAL_UART_IdleCallback+0xd8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a27      	ldr	r2, [pc, #156]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048a6:	6013      	str	r3, [r2, #0]
		active_buff = temp_buff;
 80048a8:	4a27      	ldr	r2, [pc, #156]	@ (8004948 <HAL_UART_IdleCallback+0xd8>)
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6013      	str	r3, [r2, #0]

		if((passive_buff[0] == 0xEE) &&
 80048ae:	4b25      	ldr	r3, [pc, #148]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2bee      	cmp	r3, #238	@ 0xee
 80048b6:	d132      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[1] == 0xB5) &&
 80048b8:	4b22      	ldr	r3, [pc, #136]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	781b      	ldrb	r3, [r3, #0]
		if((passive_buff[0] == 0xEE) &&
 80048c0:	2bb5      	cmp	r3, #181	@ 0xb5
 80048c2:	d12c      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[15] == 0xFF) &&
 80048c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	330f      	adds	r3, #15
 80048ca:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[1] == 0xB5) &&
 80048cc:	2bff      	cmp	r3, #255	@ 0xff
 80048ce:	d126      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[16] == 0xFC) &&
 80048d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3310      	adds	r3, #16
 80048d6:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[15] == 0xFF) &&
 80048d8:	2bfc      	cmp	r3, #252	@ 0xfc
 80048da:	d120      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[17] == 0xFF) &&
 80048dc:	4b19      	ldr	r3, [pc, #100]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3311      	adds	r3, #17
 80048e2:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[16] == 0xFC) &&
 80048e4:	2bff      	cmp	r3, #255	@ 0xff
 80048e6:	d11a      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		   (passive_buff[18] == 0xFF))
 80048e8:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3312      	adds	r3, #18
 80048ee:	781b      	ldrb	r3, [r3, #0]
		   (passive_buff[17] == 0xFF) &&
 80048f0:	2bff      	cmp	r3, #255	@ 0xff
 80048f2:	d114      	bne.n	800491e <HAL_UART_IdleCallback+0xae>
		{
			cmd_id = passive_buff[2] - 0xB0;
 80048f4:	4b13      	ldr	r3, [pc, #76]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3302      	adds	r3, #2
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	3350      	adds	r3, #80	@ 0x50
 80048fe:	73fb      	strb	r3, [r7, #15]
			if((cmd_id >= DevScreenCmd_WorkStart) && (cmd_id < DevScreenCmdMax))
 8004900:	7bfb      	ldrb	r3, [r7, #15]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_UART_IdleCallback+0xae>
 8004906:	7bfb      	ldrb	r3, [r7, #15]
 8004908:	2b09      	cmp	r3, #9
 800490a:	d808      	bhi.n	800491e <HAL_UART_IdleCallback+0xae>
			{
				dev_screen_cmd[cmd_id](&passive_buff[3]);
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	4a0f      	ldr	r2, [pc, #60]	@ (800494c <HAL_UART_IdleCallback+0xdc>)
 8004910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004914:	4a0b      	ldr	r2, [pc, #44]	@ (8004944 <HAL_UART_IdleCallback+0xd4>)
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	3203      	adds	r2, #3
 800491a:	4610      	mov	r0, r2
 800491c:	4798      	blx	r3
			}
		}
		HAL_UART_Receive_DMA(DEV_SCREEN_UART_HANDLE, active_buff, DEV_SCREEN_RXBUFF_SIZE);
 800491e:	4b0a      	ldr	r3, [pc, #40]	@ (8004948 <HAL_UART_IdleCallback+0xd8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2240      	movs	r2, #64	@ 0x40
 8004924:	4619      	mov	r1, r3
 8004926:	4806      	ldr	r0, [pc, #24]	@ (8004940 <HAL_UART_IdleCallback+0xd0>)
 8004928:	f004 f834 	bl	8008994 <HAL_UART_Receive_DMA>

		ParamRefresh = 1;
 800492c:	4b08      	ldr	r3, [pc, #32]	@ (8004950 <HAL_UART_IdleCallback+0xe0>)
 800492e:	2201      	movs	r2, #1
 8004930:	701a      	strb	r2, [r3, #0]
	}
}
 8004932:	bf00      	nop
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40004800 	.word	0x40004800
 8004940:	20000544 	.word	0x20000544
 8004944:	20000180 	.word	0x20000180
 8004948:	2000017c 	.word	0x2000017c
 800494c:	08009ec8 	.word	0x08009ec8
 8004950:	20000615 	.word	0x20000615

08004954 <DevScreenSendData>:

void DevScreenSendData(uint8_t cmd,uint8_t val)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	4603      	mov	r3, r0
 800495c:	460a      	mov	r2, r1
 800495e:	71fb      	strb	r3, [r7, #7]
 8004960:	4613      	mov	r3, r2
 8004962:	71bb      	strb	r3, [r7, #6]
	ScreenTxBuff[2] = cmd;
 8004964:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <DevScreenSendData+0x30>)
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	7093      	strb	r3, [r2, #2]
	ScreenTxBuff[3] = val;
 800496a:	4a06      	ldr	r2, [pc, #24]	@ (8004984 <DevScreenSendData+0x30>)
 800496c:	79bb      	ldrb	r3, [r7, #6]
 800496e:	70d3      	strb	r3, [r2, #3]

	HAL_UART_Transmit_DMA(DEV_SCREEN_UART_HANDLE, ScreenTxBuff, sizeof(ScreenTxBuff));
 8004970:	2209      	movs	r2, #9
 8004972:	4904      	ldr	r1, [pc, #16]	@ (8004984 <DevScreenSendData+0x30>)
 8004974:	4804      	ldr	r0, [pc, #16]	@ (8004988 <DevScreenSendData+0x34>)
 8004976:	f003 ff9d 	bl	80088b4 <HAL_UART_Transmit_DMA>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000184 	.word	0x20000184
 8004988:	20000544 	.word	0x20000544

0800498c <DevMotor_StaGet>:

inline uint8_t DevMotor_StaGet(void)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
	uint8_t motor_sta = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	71fb      	strb	r3, [r7, #7]

	motor_sta = (DevParamRead.UltraParam.VibraEnableFlg == 0xFFFF) ? 1 : (uint8_t)DevParamRead.UltraParam.VibraEnableFlg;
 8004996:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <DevMotor_StaGet+0x30>)
 8004998:	8b5b      	ldrh	r3, [r3, #26]
 800499a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800499e:	4293      	cmp	r3, r2
 80049a0:	d003      	beq.n	80049aa <DevMotor_StaGet+0x1e>
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <DevMotor_StaGet+0x30>)
 80049a4:	8b5b      	ldrh	r3, [r3, #26]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	e000      	b.n	80049ac <DevMotor_StaGet+0x20>
 80049aa:	2301      	movs	r3, #1
 80049ac:	71fb      	strb	r3, [r7, #7]
	return motor_sta;
 80049ae:	79fb      	ldrb	r3, [r7, #7]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bc80      	pop	{r7}
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	2000061c 	.word	0x2000061c

080049c0 <DevWork_StimuTimeGet>:

inline uint16_t DevWork_StimuTimeGet(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
	uint16_t stimu_time = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	80fb      	strh	r3, [r7, #6]
	stimu_time = (DevParamRead.UltraParam.StimuTime == 0xFFFF) ? 1500 : DevParamRead.UltraParam.StimuTime;
 80049ca:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <DevWork_StimuTimeGet+0x30>)
 80049cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d002      	beq.n	80049dc <DevWork_StimuTimeGet+0x1c>
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <DevWork_StimuTimeGet+0x30>)
 80049d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80049da:	e001      	b.n	80049e0 <DevWork_StimuTimeGet+0x20>
 80049dc:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80049e0:	80fb      	strh	r3, [r7, #6]
	return stimu_time;
 80049e2:	88fb      	ldrh	r3, [r7, #6]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	2000061c 	.word	0x2000061c

080049f4 <DevWork_IdleTimeGet>:

inline uint16_t DevWork_IdleTimeGet(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
	uint16_t idle_time = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	80fb      	strh	r3, [r7, #6]

	idle_time = (DevParamRead.UltraParam.IdleTime == 0xFFFF) ? 2500 : DevParamRead.UltraParam.IdleTime;
 80049fe:	4b09      	ldr	r3, [pc, #36]	@ (8004a24 <DevWork_IdleTimeGet+0x30>)
 8004a00:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004a02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d002      	beq.n	8004a10 <DevWork_IdleTimeGet+0x1c>
 8004a0a:	4b06      	ldr	r3, [pc, #24]	@ (8004a24 <DevWork_IdleTimeGet+0x30>)
 8004a0c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8004a0e:	e001      	b.n	8004a14 <DevWork_IdleTimeGet+0x20>
 8004a10:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8004a14:	80fb      	strh	r3, [r7, #6]
	return idle_time;
 8004a16:	88fb      	ldrh	r3, [r7, #6]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	2000061c 	.word	0x2000061c

08004a28 <DevWork_ModuleGet>:

inline uint8_t DevWork_ModuleGet(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
	uint8_t work_module = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	71fb      	strb	r3, [r7, #7]

	work_module = (DevParamRead.UltraParam.UltraWorkModule == 0xFFFF) ? 2 : DevParamRead.UltraParam.UltraWorkModule;
 8004a32:	4b0a      	ldr	r3, [pc, #40]	@ (8004a5c <DevWork_ModuleGet+0x34>)
 8004a34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d004      	beq.n	8004a4a <DevWork_ModuleGet+0x22>
 8004a40:	4b06      	ldr	r3, [pc, #24]	@ (8004a5c <DevWork_ModuleGet+0x34>)
 8004a42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	e000      	b.n	8004a4c <DevWork_ModuleGet+0x24>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	71fb      	strb	r3, [r7, #7]

	return work_module;
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr
 8004a5a:	bf00      	nop
 8004a5c:	2000061c 	.word	0x2000061c

08004a60 <DevUltra_StatGet>:

inline uint8_t DevUltra_StatGet(uint8_t ch)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	4603      	mov	r3, r0
 8004a68:	71fb      	strb	r3, [r7, #7]
	uint8_t sta = (DevParamRead.UltraParam.UltraEn[ch] == 0xFF) ? 1 : DevParamRead.UltraParam.UltraEn[ch];
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	4a09      	ldr	r2, [pc, #36]	@ (8004a94 <DevUltra_StatGet+0x34>)
 8004a6e:	4413      	add	r3, r2
 8004a70:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a74:	2bff      	cmp	r3, #255	@ 0xff
 8004a76:	d005      	beq.n	8004a84 <DevUltra_StatGet+0x24>
 8004a78:	79fb      	ldrb	r3, [r7, #7]
 8004a7a:	4a06      	ldr	r2, [pc, #24]	@ (8004a94 <DevUltra_StatGet+0x34>)
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8004a82:	e000      	b.n	8004a86 <DevUltra_StatGet+0x26>
 8004a84:	2301      	movs	r3, #1
 8004a86:	73fb      	strb	r3, [r7, #15]

	return sta;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	2000061c 	.word	0x2000061c

08004a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ac0 <HAL_Init+0x28>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a07      	ldr	r2, [pc, #28]	@ (8004ac0 <HAL_Init+0x28>)
 8004aa2:	f043 0310 	orr.w	r3, r3, #16
 8004aa6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004aa8:	2003      	movs	r0, #3
 8004aaa:	f000 fdd3 	bl	8005654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004aae:	200f      	movs	r0, #15
 8004ab0:	f000 f808 	bl	8004ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ab4:	f7fc fd98 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40022000 	.word	0x40022000

08004ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004acc:	4b12      	ldr	r3, [pc, #72]	@ (8004b18 <HAL_InitTick+0x54>)
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	4b12      	ldr	r3, [pc, #72]	@ (8004b1c <HAL_InitTick+0x58>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fdeb 	bl	80056be <HAL_SYSTICK_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e00e      	b.n	8004b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b0f      	cmp	r3, #15
 8004af6:	d80a      	bhi.n	8004b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004af8:	2200      	movs	r2, #0
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	f000 fdb3 	bl	800566a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b04:	4a06      	ldr	r2, [pc, #24]	@ (8004b20 <HAL_InitTick+0x5c>)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e000      	b.n	8004b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000000 	.word	0x20000000
 8004b1c:	20000194 	.word	0x20000194
 8004b20:	20000190 	.word	0x20000190

08004b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <HAL_IncTick+0x1c>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_IncTick+0x20>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4413      	add	r3, r2
 8004b34:	4a03      	ldr	r2, [pc, #12]	@ (8004b44 <HAL_IncTick+0x20>)
 8004b36:	6013      	str	r3, [r2, #0]
}
 8004b38:	bf00      	nop
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000194 	.word	0x20000194
 8004b44:	2000080c 	.word	0x2000080c

08004b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b4c:	4b02      	ldr	r3, [pc, #8]	@ (8004b58 <HAL_GetTick+0x10>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	2000080c 	.word	0x2000080c

08004b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b64:	f7ff fff0 	bl	8004b48 <HAL_GetTick>
 8004b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d005      	beq.n	8004b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b76:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <HAL_Delay+0x44>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4413      	add	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b82:	bf00      	nop
 8004b84:	f7ff ffe0 	bl	8004b48 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d8f7      	bhi.n	8004b84 <HAL_Delay+0x28>
  {
  }
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000194 	.word	0x20000194

08004ba4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0ce      	b.n	8004d64 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fa8e 	bl	8001104 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 fb11 	bl	8005210 <ADC_ConversionStop_Disable>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	f040 80a9 	bne.w	8004d52 <HAL_ADC_Init+0x1ae>
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 80a5 	bne.w	8004d52 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004c10:	f023 0302 	bic.w	r3, r3, #2
 8004c14:	f043 0202 	orr.w	r2, r3, #2
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4951      	ldr	r1, [pc, #324]	@ (8004d6c <HAL_ADC_Init+0x1c8>)
 8004c26:	428b      	cmp	r3, r1
 8004c28:	d10a      	bne.n	8004c40 <HAL_ADC_Init+0x9c>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004c32:	d002      	beq.n	8004c3a <HAL_ADC_Init+0x96>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	e004      	b.n	8004c44 <HAL_ADC_Init+0xa0>
 8004c3a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c3e:	e001      	b.n	8004c44 <HAL_ADC_Init+0xa0>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c44:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7b1b      	ldrb	r3, [r3, #12]
 8004c4a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004c4c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5c:	d003      	beq.n	8004c66 <HAL_ADC_Init+0xc2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <HAL_ADC_Init+0xc8>
 8004c66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c6a:	e000      	b.n	8004c6e <HAL_ADC_Init+0xca>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	7d1b      	ldrb	r3, [r3, #20]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d119      	bne.n	8004cb0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	7b1b      	ldrb	r3, [r3, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d109      	bne.n	8004c98 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	035a      	lsls	r2, r3, #13
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	e00b      	b.n	8004cb0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	430a      	orrs	r2, r1
 8004cc2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b29      	ldr	r3, [pc, #164]	@ (8004d70 <HAL_ADC_Init+0x1cc>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	68b9      	ldr	r1, [r7, #8]
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce0:	d003      	beq.n	8004cea <HAL_ADC_Init+0x146>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d104      	bne.n	8004cf4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	051b      	lsls	r3, r3, #20
 8004cf2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <HAL_ADC_Init+0x1d0>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d10b      	bne.n	8004d30 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0201 	orr.w	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d2e:	e018      	b.n	8004d62 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d34:	f023 0312 	bic.w	r3, r3, #18
 8004d38:	f043 0210 	orr.w	r2, r3, #16
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	f043 0201 	orr.w	r2, r3, #1
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004d50:	e007      	b.n	8004d62 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d56:	f043 0210 	orr.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40013c00 	.word	0x40013c00
 8004d70:	ffe1f7fd 	.word	0xffe1f7fd
 8004d74:	ff1f0efe 	.word	0xff1f0efe

08004d78 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a64      	ldr	r2, [pc, #400]	@ (8004f20 <HAL_ADC_Start_DMA+0x1a8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d004      	beq.n	8004d9c <HAL_ADC_Start_DMA+0x24>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a63      	ldr	r2, [pc, #396]	@ (8004f24 <HAL_ADC_Start_DMA+0x1ac>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d106      	bne.n	8004daa <HAL_ADC_Start_DMA+0x32>
 8004d9c:	4b60      	ldr	r3, [pc, #384]	@ (8004f20 <HAL_ADC_Start_DMA+0x1a8>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f040 80b3 	bne.w	8004f10 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d101      	bne.n	8004db8 <HAL_ADC_Start_DMA+0x40>
 8004db4:	2302      	movs	r3, #2
 8004db6:	e0ae      	b.n	8004f16 <HAL_ADC_Start_DMA+0x19e>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 f9cb 	bl	800515c <ADC_Enable>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 809a 	bne.w	8004f06 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004dda:	f023 0301 	bic.w	r3, r3, #1
 8004dde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	@ (8004f24 <HAL_ADC_Start_DMA+0x1ac>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d105      	bne.n	8004dfc <HAL_ADC_Start_DMA+0x84>
 8004df0:	4b4b      	ldr	r3, [pc, #300]	@ (8004f20 <HAL_ADC_Start_DMA+0x1a8>)
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d115      	bne.n	8004e28 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d026      	beq.n	8004e64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e1e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e26:	e01d      	b.n	8004e64 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e2c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a39      	ldr	r2, [pc, #228]	@ (8004f20 <HAL_ADC_Start_DMA+0x1a8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_ADC_Start_DMA+0xd0>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a38      	ldr	r2, [pc, #224]	@ (8004f24 <HAL_ADC_Start_DMA+0x1ac>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d10d      	bne.n	8004e64 <HAL_ADC_Start_DMA+0xec>
 8004e48:	4b35      	ldr	r3, [pc, #212]	@ (8004f20 <HAL_ADC_Start_DMA+0x1a8>)
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d007      	beq.n	8004e64 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004e5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	f023 0206 	bic.w	r2, r3, #6
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e7c:	e002      	b.n	8004e84 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a25      	ldr	r2, [pc, #148]	@ (8004f28 <HAL_ADC_Start_DMA+0x1b0>)
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a1b      	ldr	r3, [r3, #32]
 8004e98:	4a24      	ldr	r2, [pc, #144]	@ (8004f2c <HAL_ADC_Start_DMA+0x1b4>)
 8004e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	4a23      	ldr	r2, [pc, #140]	@ (8004f30 <HAL_ADC_Start_DMA+0x1b8>)
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0202 	mvn.w	r2, #2
 8004eac:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ebc:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a18      	ldr	r0, [r3, #32]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	334c      	adds	r3, #76	@ 0x4c
 8004ec8:	4619      	mov	r1, r3
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f000 fc79 	bl	80057c4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004edc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8004ee0:	d108      	bne.n	8004ef4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8004ef0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004ef2:	e00f      	b.n	8004f14 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004f02:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8004f04:	e006      	b.n	8004f14 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004f0e:	e001      	b.n	8004f14 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3718      	adds	r7, #24
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40012400 	.word	0x40012400
 8004f24:	40012800 	.word	0x40012800
 8004f28:	08005293 	.word	0x08005293
 8004f2c:	0800530f 	.word	0x0800530f
 8004f30:	0800532b 	.word	0x0800532b

08004f34 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b083      	sub	sp, #12
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004f4e:	bf00      	nop
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr

08004f58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x20>
 8004f88:	2302      	movs	r3, #2
 8004f8a:	e0dc      	b.n	8005146 <HAL_ADC_ConfigChannel+0x1da>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b06      	cmp	r3, #6
 8004f9a:	d81c      	bhi.n	8004fd6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	3b05      	subs	r3, #5
 8004fae:	221f      	movs	r2, #31
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	4019      	ands	r1, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	3b05      	subs	r3, #5
 8004fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	635a      	str	r2, [r3, #52]	@ 0x34
 8004fd4:	e03c      	b.n	8005050 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2b0c      	cmp	r3, #12
 8004fdc:	d81c      	bhi.n	8005018 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	3b23      	subs	r3, #35	@ 0x23
 8004ff0:	221f      	movs	r2, #31
 8004ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff6:	43db      	mvns	r3, r3
 8004ff8:	4019      	ands	r1, r3
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	4613      	mov	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	4413      	add	r3, r2
 8005008:	3b23      	subs	r3, #35	@ 0x23
 800500a:	fa00 f203 	lsl.w	r2, r0, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	631a      	str	r2, [r3, #48]	@ 0x30
 8005016:	e01b      	b.n	8005050 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	3b41      	subs	r3, #65	@ 0x41
 800502a:	221f      	movs	r2, #31
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	43db      	mvns	r3, r3
 8005032:	4019      	ands	r1, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6818      	ldr	r0, [r3, #0]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	3b41      	subs	r3, #65	@ 0x41
 8005044:	fa00 f203 	lsl.w	r2, r0, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b09      	cmp	r3, #9
 8005056:	d91c      	bls.n	8005092 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68d9      	ldr	r1, [r3, #12]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	4413      	add	r3, r2
 8005068:	3b1e      	subs	r3, #30
 800506a:	2207      	movs	r2, #7
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	4019      	ands	r1, r3
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6898      	ldr	r0, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	3b1e      	subs	r3, #30
 8005084:	fa00 f203 	lsl.w	r2, r0, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]
 8005090:	e019      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6919      	ldr	r1, [r3, #16]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	4613      	mov	r3, r2
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	4413      	add	r3, r2
 80050a2:	2207      	movs	r2, #7
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	43db      	mvns	r3, r3
 80050aa:	4019      	ands	r1, r3
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	6898      	ldr	r0, [r3, #8]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	4613      	mov	r3, r2
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	4413      	add	r3, r2
 80050ba:	fa00 f203 	lsl.w	r2, r0, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d003      	beq.n	80050d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050d2:	2b11      	cmp	r3, #17
 80050d4:	d132      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <HAL_ADC_ConfigChannel+0x1e4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d125      	bne.n	800512c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d126      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80050fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b10      	cmp	r3, #16
 8005104:	d11a      	bne.n	800513c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005106:	4b13      	ldr	r3, [pc, #76]	@ (8005154 <HAL_ADC_ConfigChannel+0x1e8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a13      	ldr	r2, [pc, #76]	@ (8005158 <HAL_ADC_ConfigChannel+0x1ec>)
 800510c:	fba2 2303 	umull	r2, r3, r2, r3
 8005110:	0c9a      	lsrs	r2, r3, #18
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800511c:	e002      	b.n	8005124 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	3b01      	subs	r3, #1
 8005122:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1f9      	bne.n	800511e <HAL_ADC_ConfigChannel+0x1b2>
 800512a:	e007      	b.n	800513c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005130:	f043 0220 	orr.w	r2, r3, #32
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr
 8005150:	40012400 	.word	0x40012400
 8005154:	20000000 	.word	0x20000000
 8005158:	431bde83 	.word	0x431bde83

0800515c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d040      	beq.n	80051fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f042 0201 	orr.w	r2, r2, #1
 8005188:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800518a:	4b1f      	ldr	r3, [pc, #124]	@ (8005208 <ADC_Enable+0xac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a1f      	ldr	r2, [pc, #124]	@ (800520c <ADC_Enable+0xb0>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	0c9b      	lsrs	r3, r3, #18
 8005196:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005198:	e002      	b.n	80051a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	3b01      	subs	r3, #1
 800519e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f9      	bne.n	800519a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051a6:	f7ff fccf 	bl	8004b48 <HAL_GetTick>
 80051aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80051ac:	e01f      	b.n	80051ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80051ae:	f7ff fccb 	bl	8004b48 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d918      	bls.n	80051ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d011      	beq.n	80051ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ce:	f043 0210 	orr.w	r2, r3, #16
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e007      	b.n	80051fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d1d8      	bne.n	80051ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000000 	.word	0x20000000
 800520c:	431bde83 	.word	0x431bde83

08005210 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b01      	cmp	r3, #1
 8005228:	d12e      	bne.n	8005288 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0201 	bic.w	r2, r2, #1
 8005238:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800523a:	f7ff fc85 	bl	8004b48 <HAL_GetTick>
 800523e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005240:	e01b      	b.n	800527a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005242:	f7ff fc81 	bl	8004b48 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d914      	bls.n	800527a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10d      	bne.n	800527a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005262:	f043 0210 	orr.w	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e007      	b.n	800528a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d0dc      	beq.n	8005242 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b084      	sub	sp, #16
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d127      	bne.n	80052fc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80052c2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80052c6:	d115      	bne.n	80052f4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d105      	bne.n	80052f4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ec:	f043 0201 	orr.w	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f7ff fe1d 	bl	8004f34 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80052fa:	e004      	b.n	8005306 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	4798      	blx	r3
}
 8005306:	bf00      	nop
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff fe12 	bl	8004f46 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005336:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	f043 0204 	orr.w	r2, r3, #4
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff fe01 	bl	8004f58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005356:	bf00      	nop
 8005358:	3710      	adds	r7, #16
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8005360:	b590      	push	{r4, r7, lr}
 8005362:	b087      	sub	sp, #28
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005376:	2b01      	cmp	r3, #1
 8005378:	d101      	bne.n	800537e <HAL_ADCEx_Calibration_Start+0x1e>
 800537a:	2302      	movs	r3, #2
 800537c:	e097      	b.n	80054ae <HAL_ADCEx_Calibration_Start+0x14e>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff ff42 	bl	8005210 <ADC_ConversionStop_Disable>
 800538c:	4603      	mov	r3, r0
 800538e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fee3 	bl	800515c <ADC_Enable>
 8005396:	4603      	mov	r3, r0
 8005398:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b00      	cmp	r3, #0
 800539e:	f040 8081 	bne.w	80054a4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80053aa:	f023 0302 	bic.w	r3, r3, #2
 80053ae:	f043 0202 	orr.w	r2, r3, #2
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80053b6:	4b40      	ldr	r3, [pc, #256]	@ (80054b8 <HAL_ADCEx_Calibration_Start+0x158>)
 80053b8:	681c      	ldr	r4, [r3, #0]
 80053ba:	2002      	movs	r0, #2
 80053bc:	f001 ffec 	bl	8007398 <HAL_RCCEx_GetPeriphCLKFreq>
 80053c0:	4603      	mov	r3, r0
 80053c2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80053c6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80053c8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80053ca:	e002      	b.n	80053d2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f9      	bne.n	80053cc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0208 	orr.w	r2, r2, #8
 80053e6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80053e8:	f7ff fbae 	bl	8004b48 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80053ee:	e01b      	b.n	8005428 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80053f0:	f7ff fbaa 	bl	8004b48 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b0a      	cmp	r3, #10
 80053fc:	d914      	bls.n	8005428 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005410:	f023 0312 	bic.w	r3, r3, #18
 8005414:	f043 0210 	orr.w	r2, r3, #16
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e042      	b.n	80054ae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	f003 0308 	and.w	r3, r3, #8
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1dc      	bne.n	80053f0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f042 0204 	orr.w	r2, r2, #4
 8005444:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8005446:	f7ff fb7f 	bl	8004b48 <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800544c:	e01b      	b.n	8005486 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800544e:	f7ff fb7b 	bl	8004b48 <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b0a      	cmp	r3, #10
 800545a:	d914      	bls.n	8005486 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00d      	beq.n	8005486 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	f023 0312 	bic.w	r3, r3, #18
 8005472:	f043 0210 	orr.w	r2, r3, #16
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e013      	b.n	80054ae <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1dc      	bne.n	800544e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005498:	f023 0303 	bic.w	r3, r3, #3
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd90      	pop	{r4, r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000000 	.word	0x20000000

080054bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80054d8:	4013      	ands	r3, r2
 80054da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80054e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054ee:	4a04      	ldr	r2, [pc, #16]	@ (8005500 <__NVIC_SetPriorityGrouping+0x44>)
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60d3      	str	r3, [r2, #12]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005504:	b480      	push	{r7}
 8005506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005508:	4b04      	ldr	r3, [pc, #16]	@ (800551c <__NVIC_GetPriorityGrouping+0x18>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	f003 0307 	and.w	r3, r3, #7
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	2b00      	cmp	r3, #0
 8005530:	db0b      	blt.n	800554a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005532:	79fb      	ldrb	r3, [r7, #7]
 8005534:	f003 021f 	and.w	r2, r3, #31
 8005538:	4906      	ldr	r1, [pc, #24]	@ (8005554 <__NVIC_EnableIRQ+0x34>)
 800553a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800553e:	095b      	lsrs	r3, r3, #5
 8005540:	2001      	movs	r0, #1
 8005542:	fa00 f202 	lsl.w	r2, r0, r2
 8005546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr
 8005554:	e000e100 	.word	0xe000e100

08005558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	6039      	str	r1, [r7, #0]
 8005562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005568:	2b00      	cmp	r3, #0
 800556a:	db0a      	blt.n	8005582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	490c      	ldr	r1, [pc, #48]	@ (80055a4 <__NVIC_SetPriority+0x4c>)
 8005572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005576:	0112      	lsls	r2, r2, #4
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	440b      	add	r3, r1
 800557c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005580:	e00a      	b.n	8005598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4908      	ldr	r1, [pc, #32]	@ (80055a8 <__NVIC_SetPriority+0x50>)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	f003 030f 	and.w	r3, r3, #15
 800558e:	3b04      	subs	r3, #4
 8005590:	0112      	lsls	r2, r2, #4
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	440b      	add	r3, r1
 8005596:	761a      	strb	r2, [r3, #24]
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	e000e100 	.word	0xe000e100
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b089      	sub	sp, #36	@ 0x24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f1c3 0307 	rsb	r3, r3, #7
 80055c6:	2b04      	cmp	r3, #4
 80055c8:	bf28      	it	cs
 80055ca:	2304      	movcs	r3, #4
 80055cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	3304      	adds	r3, #4
 80055d2:	2b06      	cmp	r3, #6
 80055d4:	d902      	bls.n	80055dc <NVIC_EncodePriority+0x30>
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	3b03      	subs	r3, #3
 80055da:	e000      	b.n	80055de <NVIC_EncodePriority+0x32>
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e0:	f04f 32ff 	mov.w	r2, #4294967295
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43da      	mvns	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	401a      	ands	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055f4:	f04f 31ff 	mov.w	r1, #4294967295
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	43d9      	mvns	r1, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005604:	4313      	orrs	r3, r2
         );
}
 8005606:	4618      	mov	r0, r3
 8005608:	3724      	adds	r7, #36	@ 0x24
 800560a:	46bd      	mov	sp, r7
 800560c:	bc80      	pop	{r7}
 800560e:	4770      	bx	lr

08005610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3b01      	subs	r3, #1
 800561c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005620:	d301      	bcc.n	8005626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005622:	2301      	movs	r3, #1
 8005624:	e00f      	b.n	8005646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005626:	4a0a      	ldr	r2, [pc, #40]	@ (8005650 <SysTick_Config+0x40>)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	3b01      	subs	r3, #1
 800562c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800562e:	210f      	movs	r1, #15
 8005630:	f04f 30ff 	mov.w	r0, #4294967295
 8005634:	f7ff ff90 	bl	8005558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005638:	4b05      	ldr	r3, [pc, #20]	@ (8005650 <SysTick_Config+0x40>)
 800563a:	2200      	movs	r2, #0
 800563c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800563e:	4b04      	ldr	r3, [pc, #16]	@ (8005650 <SysTick_Config+0x40>)
 8005640:	2207      	movs	r2, #7
 8005642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	e000e010 	.word	0xe000e010

08005654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff2d 	bl	80054bc <__NVIC_SetPriorityGrouping>
}
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800566a:	b580      	push	{r7, lr}
 800566c:	b086      	sub	sp, #24
 800566e:	af00      	add	r7, sp, #0
 8005670:	4603      	mov	r3, r0
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800567c:	f7ff ff42 	bl	8005504 <__NVIC_GetPriorityGrouping>
 8005680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	6978      	ldr	r0, [r7, #20]
 8005688:	f7ff ff90 	bl	80055ac <NVIC_EncodePriority>
 800568c:	4602      	mov	r2, r0
 800568e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff ff5f 	bl	8005558 <__NVIC_SetPriority>
}
 800569a:	bf00      	nop
 800569c:	3718      	adds	r7, #24
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b082      	sub	sp, #8
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	4603      	mov	r3, r0
 80056aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff ff35 	bl	8005520 <__NVIC_EnableIRQ>
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b082      	sub	sp, #8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff ffa2 	bl	8005610 <SysTick_Config>
 80056cc:	4603      	mov	r3, r0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3708      	adds	r7, #8
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e059      	b.n	80057a2 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b2d      	ldr	r3, [pc, #180]	@ (80057ac <HAL_DMA_Init+0xd4>)
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d80f      	bhi.n	800571a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	4b2b      	ldr	r3, [pc, #172]	@ (80057b0 <HAL_DMA_Init+0xd8>)
 8005702:	4413      	add	r3, r2
 8005704:	4a2b      	ldr	r2, [pc, #172]	@ (80057b4 <HAL_DMA_Init+0xdc>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	091b      	lsrs	r3, r3, #4
 800570c:	009a      	lsls	r2, r3, #2
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a28      	ldr	r2, [pc, #160]	@ (80057b8 <HAL_DMA_Init+0xe0>)
 8005716:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005718:	e00e      	b.n	8005738 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	4b26      	ldr	r3, [pc, #152]	@ (80057bc <HAL_DMA_Init+0xe4>)
 8005722:	4413      	add	r3, r2
 8005724:	4a23      	ldr	r2, [pc, #140]	@ (80057b4 <HAL_DMA_Init+0xdc>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	091b      	lsrs	r3, r3, #4
 800572c:	009a      	lsls	r2, r3, #2
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a22      	ldr	r2, [pc, #136]	@ (80057c0 <HAL_DMA_Init+0xe8>)
 8005736:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800574e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005752:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800575c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005768:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005774:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4313      	orrs	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40020407 	.word	0x40020407
 80057b0:	bffdfff8 	.word	0xbffdfff8
 80057b4:	cccccccd 	.word	0xcccccccd
 80057b8:	40020000 	.word	0x40020000
 80057bc:	bffdfbf8 	.word	0xbffdfbf8
 80057c0:	40020400 	.word	0x40020400

080057c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_DMA_Start_IT+0x20>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e04b      	b.n	800587c <HAL_DMA_Start_IT+0xb8>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d13a      	bne.n	800586e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fbb1 	bl	8005f84 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 020e 	orr.w	r2, r2, #14
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e00f      	b.n	800585c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0204 	bic.w	r2, r2, #4
 800584a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 020a 	orr.w	r2, r2, #10
 800585a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
 800586c:	e005      	b.n	800587a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005884:	b480      	push	{r7}
 8005886:	b085      	sub	sp, #20
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d008      	beq.n	80058ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2204      	movs	r2, #4
 80058a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e020      	b.n	80058f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 020e 	bic.w	r2, r2, #14
 80058bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d6:	2101      	movs	r1, #1
 80058d8:	fa01 f202 	lsl.w	r2, r1, r2
 80058dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
	...

080058fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005904:	2300      	movs	r3, #0
 8005906:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b02      	cmp	r3, #2
 8005912:	d005      	beq.n	8005920 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2204      	movs	r2, #4
 8005918:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
 800591e:	e0d6      	b.n	8005ace <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 020e 	bic.w	r2, r2, #14
 800592e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 0201 	bic.w	r2, r2, #1
 800593e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	461a      	mov	r2, r3
 8005946:	4b64      	ldr	r3, [pc, #400]	@ (8005ad8 <HAL_DMA_Abort_IT+0x1dc>)
 8005948:	429a      	cmp	r2, r3
 800594a:	d958      	bls.n	80059fe <HAL_DMA_Abort_IT+0x102>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a62      	ldr	r2, [pc, #392]	@ (8005adc <HAL_DMA_Abort_IT+0x1e0>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d04f      	beq.n	80059f6 <HAL_DMA_Abort_IT+0xfa>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a61      	ldr	r2, [pc, #388]	@ (8005ae0 <HAL_DMA_Abort_IT+0x1e4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d048      	beq.n	80059f2 <HAL_DMA_Abort_IT+0xf6>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a5f      	ldr	r2, [pc, #380]	@ (8005ae4 <HAL_DMA_Abort_IT+0x1e8>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d040      	beq.n	80059ec <HAL_DMA_Abort_IT+0xf0>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ae8 <HAL_DMA_Abort_IT+0x1ec>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d038      	beq.n	80059e6 <HAL_DMA_Abort_IT+0xea>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5c      	ldr	r2, [pc, #368]	@ (8005aec <HAL_DMA_Abort_IT+0x1f0>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d030      	beq.n	80059e0 <HAL_DMA_Abort_IT+0xe4>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5b      	ldr	r2, [pc, #364]	@ (8005af0 <HAL_DMA_Abort_IT+0x1f4>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d028      	beq.n	80059da <HAL_DMA_Abort_IT+0xde>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a52      	ldr	r2, [pc, #328]	@ (8005ad8 <HAL_DMA_Abort_IT+0x1dc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d020      	beq.n	80059d4 <HAL_DMA_Abort_IT+0xd8>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a57      	ldr	r2, [pc, #348]	@ (8005af4 <HAL_DMA_Abort_IT+0x1f8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d019      	beq.n	80059d0 <HAL_DMA_Abort_IT+0xd4>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a55      	ldr	r2, [pc, #340]	@ (8005af8 <HAL_DMA_Abort_IT+0x1fc>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d012      	beq.n	80059cc <HAL_DMA_Abort_IT+0xd0>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a54      	ldr	r2, [pc, #336]	@ (8005afc <HAL_DMA_Abort_IT+0x200>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00a      	beq.n	80059c6 <HAL_DMA_Abort_IT+0xca>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a52      	ldr	r2, [pc, #328]	@ (8005b00 <HAL_DMA_Abort_IT+0x204>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d102      	bne.n	80059c0 <HAL_DMA_Abort_IT+0xc4>
 80059ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059be:	e01b      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059c4:	e018      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059ca:	e015      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059cc:	2310      	movs	r3, #16
 80059ce:	e013      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e011      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80059d8:	e00e      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059da:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80059de:	e00b      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80059e4:	e008      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80059ea:	e005      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80059f0:	e002      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059f2:	2310      	movs	r3, #16
 80059f4:	e000      	b.n	80059f8 <HAL_DMA_Abort_IT+0xfc>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4a42      	ldr	r2, [pc, #264]	@ (8005b04 <HAL_DMA_Abort_IT+0x208>)
 80059fa:	6053      	str	r3, [r2, #4]
 80059fc:	e057      	b.n	8005aae <HAL_DMA_Abort_IT+0x1b2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a36      	ldr	r2, [pc, #216]	@ (8005adc <HAL_DMA_Abort_IT+0x1e0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d04f      	beq.n	8005aa8 <HAL_DMA_Abort_IT+0x1ac>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a34      	ldr	r2, [pc, #208]	@ (8005ae0 <HAL_DMA_Abort_IT+0x1e4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d048      	beq.n	8005aa4 <HAL_DMA_Abort_IT+0x1a8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a33      	ldr	r2, [pc, #204]	@ (8005ae4 <HAL_DMA_Abort_IT+0x1e8>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d040      	beq.n	8005a9e <HAL_DMA_Abort_IT+0x1a2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a31      	ldr	r2, [pc, #196]	@ (8005ae8 <HAL_DMA_Abort_IT+0x1ec>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d038      	beq.n	8005a98 <HAL_DMA_Abort_IT+0x19c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a30      	ldr	r2, [pc, #192]	@ (8005aec <HAL_DMA_Abort_IT+0x1f0>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d030      	beq.n	8005a92 <HAL_DMA_Abort_IT+0x196>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a2e      	ldr	r2, [pc, #184]	@ (8005af0 <HAL_DMA_Abort_IT+0x1f4>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d028      	beq.n	8005a8c <HAL_DMA_Abort_IT+0x190>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a26      	ldr	r2, [pc, #152]	@ (8005ad8 <HAL_DMA_Abort_IT+0x1dc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d020      	beq.n	8005a86 <HAL_DMA_Abort_IT+0x18a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a2a      	ldr	r2, [pc, #168]	@ (8005af4 <HAL_DMA_Abort_IT+0x1f8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d019      	beq.n	8005a82 <HAL_DMA_Abort_IT+0x186>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a29      	ldr	r2, [pc, #164]	@ (8005af8 <HAL_DMA_Abort_IT+0x1fc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d012      	beq.n	8005a7e <HAL_DMA_Abort_IT+0x182>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a27      	ldr	r2, [pc, #156]	@ (8005afc <HAL_DMA_Abort_IT+0x200>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00a      	beq.n	8005a78 <HAL_DMA_Abort_IT+0x17c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a26      	ldr	r2, [pc, #152]	@ (8005b00 <HAL_DMA_Abort_IT+0x204>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d102      	bne.n	8005a72 <HAL_DMA_Abort_IT+0x176>
 8005a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a70:	e01b      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a76:	e018      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a7c:	e015      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a7e:	2310      	movs	r3, #16
 8005a80:	e013      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e011      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a8a:	e00e      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a8c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8005a90:	e00b      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a96:	e008      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a9c:	e005      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005aa2:	e002      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	e000      	b.n	8005aaa <HAL_DMA_Abort_IT+0x1ae>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	4a17      	ldr	r2, [pc, #92]	@ (8005b08 <HAL_DMA_Abort_IT+0x20c>)
 8005aac:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	4798      	blx	r3
    } 
  }
  return status;
 8005ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40020080 	.word	0x40020080
 8005adc:	40020008 	.word	0x40020008
 8005ae0:	4002001c 	.word	0x4002001c
 8005ae4:	40020030 	.word	0x40020030
 8005ae8:	40020044 	.word	0x40020044
 8005aec:	40020058 	.word	0x40020058
 8005af0:	4002006c 	.word	0x4002006c
 8005af4:	40020408 	.word	0x40020408
 8005af8:	4002041c 	.word	0x4002041c
 8005afc:	40020430 	.word	0x40020430
 8005b00:	40020444 	.word	0x40020444
 8005b04:	40020400 	.word	0x40020400
 8005b08:	40020000 	.word	0x40020000

08005b0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b28:	2204      	movs	r2, #4
 8005b2a:	409a      	lsls	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80f1 	beq.w	8005d18 <HAL_DMA_IRQHandler+0x20c>
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80eb 	beq.w	8005d18 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d107      	bne.n	8005b60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0204 	bic.w	r2, r2, #4
 8005b5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b5f      	ldr	r3, [pc, #380]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1d8>)
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d958      	bls.n	8005c1e <HAL_DMA_IRQHandler+0x112>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a5d      	ldr	r2, [pc, #372]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1dc>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d04f      	beq.n	8005c16 <HAL_DMA_IRQHandler+0x10a>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a5c      	ldr	r2, [pc, #368]	@ (8005cec <HAL_DMA_IRQHandler+0x1e0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d048      	beq.n	8005c12 <HAL_DMA_IRQHandler+0x106>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a5a      	ldr	r2, [pc, #360]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1e4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d040      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x100>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a59      	ldr	r2, [pc, #356]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1e8>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d038      	beq.n	8005c06 <HAL_DMA_IRQHandler+0xfa>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a57      	ldr	r2, [pc, #348]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1ec>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d030      	beq.n	8005c00 <HAL_DMA_IRQHandler+0xf4>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a56      	ldr	r2, [pc, #344]	@ (8005cfc <HAL_DMA_IRQHandler+0x1f0>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d028      	beq.n	8005bfa <HAL_DMA_IRQHandler+0xee>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a4d      	ldr	r2, [pc, #308]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1d8>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d020      	beq.n	8005bf4 <HAL_DMA_IRQHandler+0xe8>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a52      	ldr	r2, [pc, #328]	@ (8005d00 <HAL_DMA_IRQHandler+0x1f4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d019      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0xe4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a50      	ldr	r2, [pc, #320]	@ (8005d04 <HAL_DMA_IRQHandler+0x1f8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d012      	beq.n	8005bec <HAL_DMA_IRQHandler+0xe0>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4f      	ldr	r2, [pc, #316]	@ (8005d08 <HAL_DMA_IRQHandler+0x1fc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00a      	beq.n	8005be6 <HAL_DMA_IRQHandler+0xda>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4d      	ldr	r2, [pc, #308]	@ (8005d0c <HAL_DMA_IRQHandler+0x200>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d102      	bne.n	8005be0 <HAL_DMA_IRQHandler+0xd4>
 8005bda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005bde:	e01b      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005be0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005be4:	e018      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005be6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bea:	e015      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005bec:	2340      	movs	r3, #64	@ 0x40
 8005bee:	e013      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005bf0:	2304      	movs	r3, #4
 8005bf2:	e011      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005bf4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005bf8:	e00e      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005bfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005bfe:	e00b      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005c00:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005c04:	e008      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005c06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c0a:	e005      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c10:	e002      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005c12:	2340      	movs	r3, #64	@ 0x40
 8005c14:	e000      	b.n	8005c18 <HAL_DMA_IRQHandler+0x10c>
 8005c16:	2304      	movs	r3, #4
 8005c18:	4a3d      	ldr	r2, [pc, #244]	@ (8005d10 <HAL_DMA_IRQHandler+0x204>)
 8005c1a:	6053      	str	r3, [r2, #4]
 8005c1c:	e057      	b.n	8005cce <HAL_DMA_IRQHandler+0x1c2>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a31      	ldr	r2, [pc, #196]	@ (8005ce8 <HAL_DMA_IRQHandler+0x1dc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d04f      	beq.n	8005cc8 <HAL_DMA_IRQHandler+0x1bc>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8005cec <HAL_DMA_IRQHandler+0x1e0>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d048      	beq.n	8005cc4 <HAL_DMA_IRQHandler+0x1b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2e      	ldr	r2, [pc, #184]	@ (8005cf0 <HAL_DMA_IRQHandler+0x1e4>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d040      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x1b2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf4 <HAL_DMA_IRQHandler+0x1e8>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d038      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x1ac>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a2b      	ldr	r2, [pc, #172]	@ (8005cf8 <HAL_DMA_IRQHandler+0x1ec>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d030      	beq.n	8005cb2 <HAL_DMA_IRQHandler+0x1a6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a29      	ldr	r2, [pc, #164]	@ (8005cfc <HAL_DMA_IRQHandler+0x1f0>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d028      	beq.n	8005cac <HAL_DMA_IRQHandler+0x1a0>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a21      	ldr	r2, [pc, #132]	@ (8005ce4 <HAL_DMA_IRQHandler+0x1d8>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d020      	beq.n	8005ca6 <HAL_DMA_IRQHandler+0x19a>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a25      	ldr	r2, [pc, #148]	@ (8005d00 <HAL_DMA_IRQHandler+0x1f4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d019      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x196>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a24      	ldr	r2, [pc, #144]	@ (8005d04 <HAL_DMA_IRQHandler+0x1f8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d012      	beq.n	8005c9e <HAL_DMA_IRQHandler+0x192>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <HAL_DMA_IRQHandler+0x1fc>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00a      	beq.n	8005c98 <HAL_DMA_IRQHandler+0x18c>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a21      	ldr	r2, [pc, #132]	@ (8005d0c <HAL_DMA_IRQHandler+0x200>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d102      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x186>
 8005c8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005c90:	e01b      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005c92:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005c96:	e018      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c9c:	e015      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005c9e:	2340      	movs	r3, #64	@ 0x40
 8005ca0:	e013      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	e011      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005ca6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005caa:	e00e      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005cb0:	e00b      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cb2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005cb6:	e008      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005cbc:	e005      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005cc2:	e002      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cc4:	2340      	movs	r3, #64	@ 0x40
 8005cc6:	e000      	b.n	8005cca <HAL_DMA_IRQHandler+0x1be>
 8005cc8:	2304      	movs	r3, #4
 8005cca:	4a12      	ldr	r2, [pc, #72]	@ (8005d14 <HAL_DMA_IRQHandler+0x208>)
 8005ccc:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8136 	beq.w	8005f44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005ce0:	e130      	b.n	8005f44 <HAL_DMA_IRQHandler+0x438>
 8005ce2:	bf00      	nop
 8005ce4:	40020080 	.word	0x40020080
 8005ce8:	40020008 	.word	0x40020008
 8005cec:	4002001c 	.word	0x4002001c
 8005cf0:	40020030 	.word	0x40020030
 8005cf4:	40020044 	.word	0x40020044
 8005cf8:	40020058 	.word	0x40020058
 8005cfc:	4002006c 	.word	0x4002006c
 8005d00:	40020408 	.word	0x40020408
 8005d04:	4002041c 	.word	0x4002041c
 8005d08:	40020430 	.word	0x40020430
 8005d0c:	40020444 	.word	0x40020444
 8005d10:	40020400 	.word	0x40020400
 8005d14:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d1c:	2202      	movs	r2, #2
 8005d1e:	409a      	lsls	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f000 80dd 	beq.w	8005ee4 <HAL_DMA_IRQHandler+0x3d8>
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 80d7 	beq.w	8005ee4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0320 	and.w	r3, r3, #32
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10b      	bne.n	8005d5c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 020a 	bic.w	r2, r2, #10
 8005d52:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b7b      	ldr	r3, [pc, #492]	@ (8005f50 <HAL_DMA_IRQHandler+0x444>)
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d958      	bls.n	8005e1a <HAL_DMA_IRQHandler+0x30e>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a79      	ldr	r2, [pc, #484]	@ (8005f54 <HAL_DMA_IRQHandler+0x448>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d04f      	beq.n	8005e12 <HAL_DMA_IRQHandler+0x306>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a78      	ldr	r2, [pc, #480]	@ (8005f58 <HAL_DMA_IRQHandler+0x44c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d048      	beq.n	8005e0e <HAL_DMA_IRQHandler+0x302>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a76      	ldr	r2, [pc, #472]	@ (8005f5c <HAL_DMA_IRQHandler+0x450>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d040      	beq.n	8005e08 <HAL_DMA_IRQHandler+0x2fc>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a75      	ldr	r2, [pc, #468]	@ (8005f60 <HAL_DMA_IRQHandler+0x454>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d038      	beq.n	8005e02 <HAL_DMA_IRQHandler+0x2f6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a73      	ldr	r2, [pc, #460]	@ (8005f64 <HAL_DMA_IRQHandler+0x458>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d030      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x2f0>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a72      	ldr	r2, [pc, #456]	@ (8005f68 <HAL_DMA_IRQHandler+0x45c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d028      	beq.n	8005df6 <HAL_DMA_IRQHandler+0x2ea>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a69      	ldr	r2, [pc, #420]	@ (8005f50 <HAL_DMA_IRQHandler+0x444>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d020      	beq.n	8005df0 <HAL_DMA_IRQHandler+0x2e4>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6e      	ldr	r2, [pc, #440]	@ (8005f6c <HAL_DMA_IRQHandler+0x460>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d019      	beq.n	8005dec <HAL_DMA_IRQHandler+0x2e0>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a6c      	ldr	r2, [pc, #432]	@ (8005f70 <HAL_DMA_IRQHandler+0x464>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d012      	beq.n	8005de8 <HAL_DMA_IRQHandler+0x2dc>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6b      	ldr	r2, [pc, #428]	@ (8005f74 <HAL_DMA_IRQHandler+0x468>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d00a      	beq.n	8005de2 <HAL_DMA_IRQHandler+0x2d6>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a69      	ldr	r2, [pc, #420]	@ (8005f78 <HAL_DMA_IRQHandler+0x46c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d102      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x2d0>
 8005dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005dda:	e01b      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005de0:	e018      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005de6:	e015      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005de8:	2320      	movs	r3, #32
 8005dea:	e013      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e011      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005df4:	e00e      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005df6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005dfa:	e00b      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e00:	e008      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005e02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e06:	e005      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e0c:	e002      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005e0e:	2320      	movs	r3, #32
 8005e10:	e000      	b.n	8005e14 <HAL_DMA_IRQHandler+0x308>
 8005e12:	2302      	movs	r3, #2
 8005e14:	4a59      	ldr	r2, [pc, #356]	@ (8005f7c <HAL_DMA_IRQHandler+0x470>)
 8005e16:	6053      	str	r3, [r2, #4]
 8005e18:	e057      	b.n	8005eca <HAL_DMA_IRQHandler+0x3be>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a4d      	ldr	r2, [pc, #308]	@ (8005f54 <HAL_DMA_IRQHandler+0x448>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04f      	beq.n	8005ec4 <HAL_DMA_IRQHandler+0x3b8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4b      	ldr	r2, [pc, #300]	@ (8005f58 <HAL_DMA_IRQHandler+0x44c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d048      	beq.n	8005ec0 <HAL_DMA_IRQHandler+0x3b4>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a4a      	ldr	r2, [pc, #296]	@ (8005f5c <HAL_DMA_IRQHandler+0x450>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0x3ae>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a48      	ldr	r2, [pc, #288]	@ (8005f60 <HAL_DMA_IRQHandler+0x454>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d038      	beq.n	8005eb4 <HAL_DMA_IRQHandler+0x3a8>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a47      	ldr	r2, [pc, #284]	@ (8005f64 <HAL_DMA_IRQHandler+0x458>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d030      	beq.n	8005eae <HAL_DMA_IRQHandler+0x3a2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a45      	ldr	r2, [pc, #276]	@ (8005f68 <HAL_DMA_IRQHandler+0x45c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d028      	beq.n	8005ea8 <HAL_DMA_IRQHandler+0x39c>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8005f50 <HAL_DMA_IRQHandler+0x444>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d020      	beq.n	8005ea2 <HAL_DMA_IRQHandler+0x396>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a41      	ldr	r2, [pc, #260]	@ (8005f6c <HAL_DMA_IRQHandler+0x460>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d019      	beq.n	8005e9e <HAL_DMA_IRQHandler+0x392>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a40      	ldr	r2, [pc, #256]	@ (8005f70 <HAL_DMA_IRQHandler+0x464>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d012      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x38e>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a3e      	ldr	r2, [pc, #248]	@ (8005f74 <HAL_DMA_IRQHandler+0x468>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d00a      	beq.n	8005e94 <HAL_DMA_IRQHandler+0x388>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3d      	ldr	r2, [pc, #244]	@ (8005f78 <HAL_DMA_IRQHandler+0x46c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d102      	bne.n	8005e8e <HAL_DMA_IRQHandler+0x382>
 8005e88:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005e8c:	e01b      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005e8e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005e92:	e018      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005e94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e98:	e015      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	e013      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005e9e:	2302      	movs	r3, #2
 8005ea0:	e011      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005ea2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005ea6:	e00e      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005ea8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005eac:	e00b      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005eae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005eb2:	e008      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005eb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005eb8:	e005      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005eba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ebe:	e002      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005ec0:	2320      	movs	r3, #32
 8005ec2:	e000      	b.n	8005ec6 <HAL_DMA_IRQHandler+0x3ba>
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8005f80 <HAL_DMA_IRQHandler+0x474>)
 8005ec8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d034      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005ee2:	e02f      	b.n	8005f44 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee8:	2208      	movs	r2, #8
 8005eea:	409a      	lsls	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d028      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x43a>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d023      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 020e 	bic.w	r2, r2, #14
 8005f0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f16:	2101      	movs	r1, #1
 8005f18:	fa01 f202 	lsl.w	r2, r1, r2
 8005f1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d004      	beq.n	8005f46 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	4798      	blx	r3
    }
  }
  return;
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
}
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40020080 	.word	0x40020080
 8005f54:	40020008 	.word	0x40020008
 8005f58:	4002001c 	.word	0x4002001c
 8005f5c:	40020030 	.word	0x40020030
 8005f60:	40020044 	.word	0x40020044
 8005f64:	40020058 	.word	0x40020058
 8005f68:	4002006c 	.word	0x4002006c
 8005f6c:	40020408 	.word	0x40020408
 8005f70:	4002041c 	.word	0x4002041c
 8005f74:	40020430 	.word	0x40020430
 8005f78:	40020444 	.word	0x40020444
 8005f7c:	40020400 	.word	0x40020400
 8005f80:	40020000 	.word	0x40020000

08005f84 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b10      	cmp	r3, #16
 8005fb0:	d108      	bne.n	8005fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005fc2:	e007      	b.n	8005fd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
	...

08005fe0 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005ffa:	4b3d      	ldr	r3, [pc, #244]	@ (80060f0 <HAL_FLASH_Program+0x110>)
 8005ffc:	7e1b      	ldrb	r3, [r3, #24]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d101      	bne.n	8006006 <HAL_FLASH_Program+0x26>
 8006002:	2302      	movs	r3, #2
 8006004:	e070      	b.n	80060e8 <HAL_FLASH_Program+0x108>
 8006006:	4b3a      	ldr	r3, [pc, #232]	@ (80060f0 <HAL_FLASH_Program+0x110>)
 8006008:	2201      	movs	r2, #1
 800600a:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	4a39      	ldr	r2, [pc, #228]	@ (80060f4 <HAL_FLASH_Program+0x114>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d806      	bhi.n	8006022 <HAL_FLASH_Program+0x42>
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006014:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006018:	f000 f8e8 	bl	80061ec <FLASH_WaitForLastOperation>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
 8006020:	e005      	b.n	800602e <HAL_FLASH_Program+0x4e>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 8006022:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006026:	f000 f927 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 800602a:	4603      	mov	r3, r0
 800602c:	75fb      	strb	r3, [r7, #23]
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800602e:	7dfb      	ldrb	r3, [r7, #23]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d155      	bne.n	80060e0 <HAL_FLASH_Program+0x100>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d102      	bne.n	8006040 <HAL_FLASH_Program+0x60>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800603a:	2301      	movs	r3, #1
 800603c:	757b      	strb	r3, [r7, #21]
 800603e:	e007      	b.n	8006050 <HAL_FLASH_Program+0x70>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2b02      	cmp	r3, #2
 8006044:	d102      	bne.n	800604c <HAL_FLASH_Program+0x6c>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006046:	2302      	movs	r3, #2
 8006048:	757b      	strb	r3, [r7, #21]
 800604a:	e001      	b.n	8006050 <HAL_FLASH_Program+0x70>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800604c:	2304      	movs	r3, #4
 800604e:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006050:	2300      	movs	r3, #0
 8006052:	75bb      	strb	r3, [r7, #22]
 8006054:	e03e      	b.n	80060d4 <HAL_FLASH_Program+0xf4>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006056:	7dbb      	ldrb	r3, [r7, #22]
 8006058:	005a      	lsls	r2, r3, #1
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	eb02 0c03 	add.w	ip, r2, r3
 8006060:	7dbb      	ldrb	r3, [r7, #22]
 8006062:	0119      	lsls	r1, r3, #4
 8006064:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006068:	f1c1 0620 	rsb	r6, r1, #32
 800606c:	f1a1 0020 	sub.w	r0, r1, #32
 8006070:	fa22 f401 	lsr.w	r4, r2, r1
 8006074:	fa03 f606 	lsl.w	r6, r3, r6
 8006078:	4334      	orrs	r4, r6
 800607a:	fa23 f000 	lsr.w	r0, r3, r0
 800607e:	4304      	orrs	r4, r0
 8006080:	fa23 f501 	lsr.w	r5, r3, r1
 8006084:	b2a3      	uxth	r3, r4
 8006086:	4619      	mov	r1, r3
 8006088:	4660      	mov	r0, ip
 800608a:	f000 f887 	bl	800619c <FLASH_Program_HalfWord>

#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	4a18      	ldr	r2, [pc, #96]	@ (80060f4 <HAL_FLASH_Program+0x114>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d80c      	bhi.n	80060b0 <HAL_FLASH_Program+0xd0>
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006096:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800609a:	f000 f8a7 	bl	80061ec <FLASH_WaitForLastOperation>
 800609e:	4603      	mov	r3, r0
 80060a0:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80060a2:	4b15      	ldr	r3, [pc, #84]	@ (80060f8 <HAL_FLASH_Program+0x118>)
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	4a14      	ldr	r2, [pc, #80]	@ (80060f8 <HAL_FLASH_Program+0x118>)
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	6113      	str	r3, [r2, #16]
 80060ae:	e00b      	b.n	80060c8 <HAL_FLASH_Program+0xe8>
#if defined(FLASH_BANK2_END)
      }
      else
      {
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
 80060b0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80060b4:	f000 f8e0 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]
        
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
 80060bc:	4b0e      	ldr	r3, [pc, #56]	@ (80060f8 <HAL_FLASH_Program+0x118>)
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	4a0d      	ldr	r2, [pc, #52]	@ (80060f8 <HAL_FLASH_Program+0x118>)
 80060c2:	f023 0301 	bic.w	r3, r3, #1
 80060c6:	6513      	str	r3, [r2, #80]	@ 0x50
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80060c8:	7dfb      	ldrb	r3, [r7, #23]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d107      	bne.n	80060de <HAL_FLASH_Program+0xfe>
    for (index = 0U; index < nbiterations; index++)
 80060ce:	7dbb      	ldrb	r3, [r7, #22]
 80060d0:	3301      	adds	r3, #1
 80060d2:	75bb      	strb	r3, [r7, #22]
 80060d4:	7dba      	ldrb	r2, [r7, #22]
 80060d6:	7d7b      	ldrb	r3, [r7, #21]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d3bc      	bcc.n	8006056 <HAL_FLASH_Program+0x76>
 80060dc:	e000      	b.n	80060e0 <HAL_FLASH_Program+0x100>
      {
        break;
 80060de:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80060e0:	4b03      	ldr	r3, [pc, #12]	@ (80060f0 <HAL_FLASH_Program+0x110>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	761a      	strb	r2, [r3, #24]

  return status;
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060f0:	20000810 	.word	0x20000810
 80060f4:	0807ffff 	.word	0x0807ffff
 80060f8:	40022000 	.word	0x40022000

080060fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006106:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800610e:	2b00      	cmp	r3, #0
 8006110:	d00d      	beq.n	800612e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006112:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006114:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <HAL_FLASH_Unlock+0x6c>)
 8006116:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006118:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 800611a:	4a14      	ldr	r2, [pc, #80]	@ (800616c <HAL_FLASH_Unlock+0x70>)
 800611c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800611e:	4b11      	ldr	r3, [pc, #68]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	71fb      	strb	r3, [r7, #7]
    }
  }
#if defined(FLASH_BANK2_END)
  if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 800612e:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00d      	beq.n	8006156 <HAL_FLASH_Unlock+0x5a>
  {
    /* Authorize the FLASH BANK2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800613a:	4b0a      	ldr	r3, [pc, #40]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 800613c:	4a0a      	ldr	r2, [pc, #40]	@ (8006168 <HAL_FLASH_Unlock+0x6c>)
 800613e:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 8006140:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006142:	4a0a      	ldr	r2, [pc, #40]	@ (800616c <HAL_FLASH_Unlock+0x70>)
 8006144:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Verify Flash BANK2 is unlocked */
    if(READ_BIT(FLASH->CR2, FLASH_CR2_LOCK) != RESET)
 8006146:	4b07      	ldr	r3, [pc, #28]	@ (8006164 <HAL_FLASH_Unlock+0x68>)
 8006148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <HAL_FLASH_Unlock+0x5a>
    {
      status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8006156:	79fb      	ldrb	r3, [r7, #7]
}
 8006158:	4618      	mov	r0, r3
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	bc80      	pop	{r7}
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40022000 	.word	0x40022000
 8006168:	45670123 	.word	0x45670123
 800616c:	cdef89ab 	.word	0xcdef89ab

08006170 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006174:	4b08      	ldr	r3, [pc, #32]	@ (8006198 <HAL_FLASH_Lock+0x28>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	4a07      	ldr	r2, [pc, #28]	@ (8006198 <HAL_FLASH_Lock+0x28>)
 800617a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800617e:	6113      	str	r3, [r2, #16]
  
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);
 8006180:	4b05      	ldr	r3, [pc, #20]	@ (8006198 <HAL_FLASH_Lock+0x28>)
 8006182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006184:	4a04      	ldr	r2, [pc, #16]	@ (8006198 <HAL_FLASH_Lock+0x28>)
 8006186:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800618a:	6513      	str	r3, [r2, #80]	@ 0x50

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	40022000 	.word	0x40022000

0800619c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80061a8:	4b0d      	ldr	r3, [pc, #52]	@ (80061e0 <FLASH_Program_HalfWord+0x44>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	61da      	str	r2, [r3, #28]
  
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <FLASH_Program_HalfWord+0x48>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d806      	bhi.n	80061c4 <FLASH_Program_HalfWord+0x28>
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80061b6:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <FLASH_Program_HalfWord+0x4c>)
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	4a0b      	ldr	r2, [pc, #44]	@ (80061e8 <FLASH_Program_HalfWord+0x4c>)
 80061bc:	f043 0301 	orr.w	r3, r3, #1
 80061c0:	6113      	str	r3, [r2, #16]
 80061c2:	e005      	b.n	80061d0 <FLASH_Program_HalfWord+0x34>
#if defined(FLASH_BANK2_END)
  }
  else
  {
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
 80061c4:	4b08      	ldr	r3, [pc, #32]	@ (80061e8 <FLASH_Program_HalfWord+0x4c>)
 80061c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c8:	4a07      	ldr	r2, [pc, #28]	@ (80061e8 <FLASH_Program_HalfWord+0x4c>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	887a      	ldrh	r2, [r7, #2]
 80061d4:	801a      	strh	r2, [r3, #0]
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	bc80      	pop	{r7}
 80061de:	4770      	bx	lr
 80061e0:	20000810 	.word	0x20000810
 80061e4:	0807ffff 	.word	0x0807ffff
 80061e8:	40022000 	.word	0x40022000

080061ec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80061f4:	f7fe fca8 	bl	8004b48 <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80061fa:	e010      	b.n	800621e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006202:	d00c      	beq.n	800621e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <FLASH_WaitForLastOperation+0x2e>
 800620a:	f7fe fc9d 	bl	8004b48 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	429a      	cmp	r2, r3
 8006218:	d201      	bcs.n	800621e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e025      	b.n	800626a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800621e:	4b15      	ldr	r3, [pc, #84]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e8      	bne.n	80061fc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800622a:	4b12      	ldr	r3, [pc, #72]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f003 0320 	and.w	r3, r3, #32
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006236:	4b0f      	ldr	r3, [pc, #60]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 8006238:	2220      	movs	r2, #32
 800623a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800623c:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006248:	4b0a      	ldr	r3, [pc, #40]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 800624a:	69db      	ldr	r3, [r3, #28]
 800624c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006250:	2b00      	cmp	r3, #0
 8006252:	d105      	bne.n	8006260 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006254:	4b07      	ldr	r3, [pc, #28]	@ (8006274 <FLASH_WaitForLastOperation+0x88>)
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006260:	f000 f84a 	bl	80062f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e000      	b.n	800626a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40022000 	.word	0x40022000

08006278 <FLASH_WaitForLastOperationBank2>:
  * @brief  Wait for a FLASH BANK2 operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperationBank2(uint32_t Timeout)
{ 
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH BANK2 operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH BANK2 operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006280:	f7fe fc62 	bl	8004b48 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 8006286:	e010      	b.n	80062aa <FLASH_WaitForLastOperationBank2+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d00c      	beq.n	80062aa <FLASH_WaitForLastOperationBank2+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d007      	beq.n	80062a6 <FLASH_WaitForLastOperationBank2+0x2e>
 8006296:	f7fe fc57 	bl	8004b48 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d201      	bcs.n	80062aa <FLASH_WaitForLastOperationBank2+0x32>
      {
        return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e01f      	b.n	80062ea <FLASH_WaitForLastOperationBank2+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY_BANK2)) 
 80062aa:	4b12      	ldr	r3, [pc, #72]	@ (80062f4 <FLASH_WaitForLastOperationBank2+0x7c>)
 80062ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e8      	bne.n	8006288 <FLASH_WaitForLastOperationBank2+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK2))
 80062b6:	4b0f      	ldr	r3, [pc, #60]	@ (80062f4 <FLASH_WaitForLastOperationBank2+0x7c>)
 80062b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ba:	f003 0320 	and.w	r3, r3, #32
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <FLASH_WaitForLastOperationBank2+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK2);
 80062c2:	4b0c      	ldr	r3, [pc, #48]	@ (80062f4 <FLASH_WaitForLastOperationBank2+0x7c>)
 80062c4:	2220      	movs	r2, #32
 80062c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 80062c8:	4b0a      	ldr	r3, [pc, #40]	@ (80062f4 <FLASH_WaitForLastOperationBank2+0x7c>)
 80062ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <FLASH_WaitForLastOperationBank2+0x68>
 80062d4:	4b07      	ldr	r3, [pc, #28]	@ (80062f4 <FLASH_WaitForLastOperationBank2+0x7c>)
 80062d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <FLASH_WaitForLastOperationBank2+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80062e0:	f000 f80a 	bl	80062f8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e000      	b.n	80062ea <FLASH_WaitForLastOperationBank2+0x72>
  }

  /* If there is an error flag set */
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
  
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40022000 	.word	0x40022000

080062f8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
 8006302:	4b30      	ldr	r3, [pc, #192]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f003 0310 	and.w	r3, r3, #16
 800630a:	2b00      	cmp	r3, #0
 800630c:	d105      	bne.n	800631a <FLASH_SetErrorCode+0x22>
 800630e:	4b2d      	ldr	r3, [pc, #180]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 8006310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006312:	f003 0310 	and.w	r3, r3, #16
 8006316:	2b00      	cmp	r3, #0
 8006318:	d009      	beq.n	800632e <FLASH_SetErrorCode+0x36>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800631a:	4b2b      	ldr	r3, [pc, #172]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	f043 0302 	orr.w	r3, r3, #2
 8006322:	4a29      	ldr	r2, [pc, #164]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 8006324:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f043 1310 	orr.w	r3, r3, #1048592	@ 0x100010
 800632c:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_WRPERR;
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
 800632e:	4b25      	ldr	r3, [pc, #148]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	f003 0304 	and.w	r3, r3, #4
 8006336:	2b00      	cmp	r3, #0
 8006338:	d105      	bne.n	8006346 <FLASH_SetErrorCode+0x4e>
 800633a:	4b22      	ldr	r3, [pc, #136]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 800633c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800633e:	f003 0304 	and.w	r3, r3, #4
 8006342:	2b00      	cmp	r3, #0
 8006344:	d009      	beq.n	800635a <FLASH_SetErrorCode+0x62>
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8006346:	4b20      	ldr	r3, [pc, #128]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	f043 0301 	orr.w	r3, r3, #1
 800634e:	4a1e      	ldr	r2, [pc, #120]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 8006350:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f043 1304 	orr.w	r3, r3, #262148	@ 0x40004
 8006358:	607b      	str	r3, [r7, #4]
#else
    flags |= FLASH_FLAG_PGERR;
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800635a:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <FLASH_SetErrorCode+0x86>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8006366:	4b18      	ldr	r3, [pc, #96]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	f043 0304 	orr.w	r3, r3, #4
 800636e:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <FLASH_SetErrorCode+0xd0>)
 8006370:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8006372:	4b14      	ldr	r3, [pc, #80]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	4a13      	ldr	r2, [pc, #76]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 8006378:	f023 0301 	bic.w	r3, r3, #1
 800637c:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f240 1201 	movw	r2, #257	@ 0x101
 8006384:	4293      	cmp	r3, r2
 8006386:	d106      	bne.n	8006396 <FLASH_SetErrorCode+0x9e>
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 800638a:	69db      	ldr	r3, [r3, #28]
 800638c:	4a0d      	ldr	r2, [pc, #52]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	61d3      	str	r3, [r2, #28]
}  
 8006394:	e011      	b.n	80063ba <FLASH_SetErrorCode+0xc2>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <FLASH_SetErrorCode+0xb2>
 80063a0:	4a08      	ldr	r2, [pc, #32]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f003 0335 	and.w	r3, r3, #53	@ 0x35
 80063a8:	60d3      	str	r3, [r2, #12]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	0c1b      	lsrs	r3, r3, #16
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <FLASH_SetErrorCode+0xc2>
 80063b2:	4a04      	ldr	r2, [pc, #16]	@ (80063c4 <FLASH_SetErrorCode+0xcc>)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
}  
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	40022000 	.word	0x40022000
 80063c8:	20000810 	.word	0x20000810

080063cc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063de:	4b73      	ldr	r3, [pc, #460]	@ (80065ac <HAL_FLASHEx_Erase+0x1e0>)
 80063e0:	7e1b      	ldrb	r3, [r3, #24]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_FLASHEx_Erase+0x1e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e0db      	b.n	80065a2 <HAL_FLASHEx_Erase+0x1d6>
 80063ea:	4b70      	ldr	r3, [pc, #448]	@ (80065ac <HAL_FLASHEx_Erase+0x1e0>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d166      	bne.n	80064c6 <HAL_FLASHEx_Erase+0xfa>
  {
#if defined(FLASH_BANK2_END)
    if (pEraseInit->Banks == FLASH_BANK_BOTH)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d12f      	bne.n	8006460 <HAL_FLASHEx_Erase+0x94>
    {
      /* Mass Erase requested for Bank1 and Bank2 */
      /* Wait for last operation to be completed */
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8006400:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006404:	f7ff fef2 	bl	80061ec <FLASH_WaitForLastOperation>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	f040 80c5 	bne.w	800659a <HAL_FLASHEx_Erase+0x1ce>
          (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 8006410:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006414:	f7ff ff30 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 8006418:	4603      	mov	r3, r0
      if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 800641a:	2b00      	cmp	r3, #0
 800641c:	f040 80bd 	bne.w	800659a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_BOTH);
 8006420:	2003      	movs	r0, #3
 8006422:	f000 f8c9 	bl	80065b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 8006426:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800642a:	f7ff fedf 	bl	80061ec <FLASH_WaitForLastOperation>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d108      	bne.n	8006446 <HAL_FLASHEx_Erase+0x7a>
            (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK))
 8006434:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006438:	f7ff ff1e 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 800643c:	4603      	mov	r3, r0
        if ((FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK) && \
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_FLASHEx_Erase+0x7a>
        {
          status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
        }
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006446:	4b5a      	ldr	r3, [pc, #360]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	4a59      	ldr	r2, [pc, #356]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 800644c:	f023 0304 	bic.w	r3, r3, #4
 8006450:	6113      	str	r3, [r2, #16]
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 8006452:	4b57      	ldr	r3, [pc, #348]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006454:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006456:	4a56      	ldr	r2, [pc, #344]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006458:	f023 0304 	bic.w	r3, r3, #4
 800645c:	6513      	str	r3, [r2, #80]	@ 0x50
 800645e:	e09c      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
      }
    }
    else if (pEraseInit->Banks == FLASH_BANK_2)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	2b02      	cmp	r3, #2
 8006466:	d117      	bne.n	8006498 <HAL_FLASHEx_Erase+0xcc>
    {
      /* Mass Erase requested for Bank2 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006468:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800646c:	f7ff ff04 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	f040 8091 	bne.w	800659a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_2);
 8006478:	2002      	movs	r0, #2
 800647a:	f000 f89d 	bl	80065b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 800647e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8006482:	f7ff fef9 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_MER);
 800648a:	4b49      	ldr	r3, [pc, #292]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 800648c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648e:	4a48      	ldr	r2, [pc, #288]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	6513      	str	r3, [r2, #80]	@ 0x50
 8006496:	e080      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006498:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800649c:	f7ff fea6 	bl	80061ec <FLASH_WaitForLastOperation>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d179      	bne.n	800659a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80064a6:	2001      	movs	r0, #1
 80064a8:	f000 f886 	bl	80065b8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80064ac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80064b0:	f7ff fe9c 	bl	80061ec <FLASH_WaitForLastOperation>
 80064b4:	4603      	mov	r3, r0
 80064b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80064b8:	4b3d      	ldr	r3, [pc, #244]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	4a3c      	ldr	r2, [pc, #240]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 80064be:	f023 0304 	bic.w	r3, r3, #4
 80064c2:	6113      	str	r3, [r2, #16]
 80064c4:	e069      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
#if defined(FLASH_BANK2_END)
    /* Page Erase requested on address located on bank2 */
    if(pEraseInit->PageAddress > FLASH_BANK1_END)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	4a3a      	ldr	r2, [pc, #232]	@ (80065b4 <HAL_FLASHEx_Erase+0x1e8>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d932      	bls.n	8006536 <HAL_FLASHEx_Erase+0x16a>
    {   
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80064d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80064d4:	f7ff fed0 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d15d      	bne.n	800659a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	601a      	str	r2, [r3, #0]
        
        /* Erase by page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	60bb      	str	r3, [r7, #8]
 80064ec:	e019      	b.n	8006522 <HAL_FLASHEx_Erase+0x156>
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80064ee:	68b8      	ldr	r0, [r7, #8]
 80064f0:	f000 f8aa 	bl	8006648 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperationBank2((uint32_t)FLASH_TIMEOUT_VALUE);
 80064f4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80064f8:	f7ff febe 	bl	8006278 <FLASH_WaitForLastOperationBank2>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR2, FLASH_CR2_PER);
 8006500:	4b2b      	ldr	r3, [pc, #172]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006504:	4a2a      	ldr	r2, [pc, #168]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006506:	f023 0302 	bic.w	r3, r3, #2
 800650a:	6513      	str	r3, [r2, #80]	@ 0x50
          
          if (status != HAL_OK)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_FLASHEx_Erase+0x14e>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	601a      	str	r2, [r3, #0]
            break;
 8006518:	e03f      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006520:	60bb      	str	r3, [r7, #8]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689a      	ldr	r2, [r3, #8]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	02db      	lsls	r3, r3, #11
 800652c:	4413      	add	r3, r2
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	429a      	cmp	r2, r3
 8006532:	d3dc      	bcc.n	80064ee <HAL_FLASHEx_Erase+0x122>
 8006534:	e031      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006536:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800653a:	f7ff fe57 	bl	80061ec <FLASH_WaitForLastOperation>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d12a      	bne.n	800659a <HAL_FLASHEx_Erase+0x1ce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	f04f 32ff 	mov.w	r2, #4294967295
 800654a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	e019      	b.n	8006588 <HAL_FLASHEx_Erase+0x1bc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8006554:	68b8      	ldr	r0, [r7, #8]
 8006556:	f000 f877 	bl	8006648 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800655a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800655e:	f7ff fe45 	bl	80061ec <FLASH_WaitForLastOperation>
 8006562:	4603      	mov	r3, r0
 8006564:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006566:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	4a11      	ldr	r2, [pc, #68]	@ (80065b0 <HAL_FLASHEx_Erase+0x1e4>)
 800656c:	f023 0302 	bic.w	r3, r3, #2
 8006570:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8006572:	7bfb      	ldrb	r3, [r7, #15]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d003      	beq.n	8006580 <HAL_FLASHEx_Erase+0x1b4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	601a      	str	r2, [r3, #0]
            break;
 800657e:	e00c      	b.n	800659a <HAL_FLASHEx_Erase+0x1ce>
            address += FLASH_PAGE_SIZE)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006586:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	02da      	lsls	r2, r3, #11
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4413      	add	r3, r2
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	429a      	cmp	r2, r3
 8006598:	d3dc      	bcc.n	8006554 <HAL_FLASHEx_Erase+0x188>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800659a:	4b04      	ldr	r3, [pc, #16]	@ (80065ac <HAL_FLASHEx_Erase+0x1e0>)
 800659c:	2200      	movs	r2, #0
 800659e:	761a      	strb	r2, [r3, #24]

  return status;
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	20000810 	.word	0x20000810
 80065b0:	40022000 	.word	0x40022000
 80065b4:	0807ffff 	.word	0x0807ffff

080065b8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80065c0:	4b1f      	ldr	r3, [pc, #124]	@ (8006640 <FLASH_MassErase+0x88>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(Banks == FLASH_BANK_BOTH)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b03      	cmp	r3, #3
 80065ca:	d118      	bne.n	80065fe <FLASH_MassErase+0x46>
  {
    /* bank1 & bank2 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80065cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065d2:	f043 0304 	orr.w	r3, r3, #4
 80065d6:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 80065d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065dc:	4a19      	ldr	r2, [pc, #100]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065de:	f043 0304 	orr.w	r3, r3, #4
 80065e2:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80065e4:	4b17      	ldr	r3, [pc, #92]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ee:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 80065f0:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f4:	4a13      	ldr	r2, [pc, #76]	@ (8006644 <FLASH_MassErase+0x8c>)
 80065f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065fa:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR, FLASH_CR_MER);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80065fc:	e01b      	b.n	8006636 <FLASH_MassErase+0x7e>
  else if(Banks == FLASH_BANK_2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d10c      	bne.n	800661e <FLASH_MassErase+0x66>
    SET_BIT(FLASH->CR2, FLASH_CR2_MER);
 8006604:	4b0f      	ldr	r3, [pc, #60]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006608:	4a0e      	ldr	r2, [pc, #56]	@ (8006644 <FLASH_MassErase+0x8c>)
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	6513      	str	r3, [r2, #80]	@ 0x50
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8006610:	4b0c      	ldr	r3, [pc, #48]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006614:	4a0b      	ldr	r2, [pc, #44]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006616:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800661a:	6513      	str	r3, [r2, #80]	@ 0x50
}
 800661c:	e00b      	b.n	8006636 <FLASH_MassErase+0x7e>
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800661e:	4b09      	ldr	r3, [pc, #36]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	4a08      	ldr	r2, [pc, #32]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006624:	f043 0304 	orr.w	r3, r3, #4
 8006628:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800662a:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <FLASH_MassErase+0x8c>)
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	4a05      	ldr	r2, [pc, #20]	@ (8006644 <FLASH_MassErase+0x8c>)
 8006630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006634:	6113      	str	r3, [r2, #16]
}
 8006636:	bf00      	nop
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	bc80      	pop	{r7}
 800663e:	4770      	bx	lr
 8006640:	20000810 	.word	0x20000810
 8006644:	40022000 	.word	0x40022000

08006648 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006650:	4b15      	ldr	r3, [pc, #84]	@ (80066a8 <FLASH_PageErase+0x60>)
 8006652:	2200      	movs	r2, #0
 8006654:	61da      	str	r2, [r3, #28]

#if defined(FLASH_BANK2_END)
  if(PageAddress > FLASH_BANK1_END)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a14      	ldr	r2, [pc, #80]	@ (80066ac <FLASH_PageErase+0x64>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d90f      	bls.n	800667e <FLASH_PageErase+0x36>
  { 
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR2, FLASH_CR2_PER);
 800665e:	4b14      	ldr	r3, [pc, #80]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006662:	4a13      	ldr	r2, [pc, #76]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006664:	f043 0302 	orr.w	r3, r3, #2
 8006668:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR2, PageAddress);
 800666a:	4a11      	ldr	r2, [pc, #68]	@ (80066b0 <FLASH_PageErase+0x68>)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6553      	str	r3, [r2, #84]	@ 0x54
    SET_BIT(FLASH->CR2, FLASH_CR2_STRT);
 8006670:	4b0f      	ldr	r3, [pc, #60]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006674:	4a0e      	ldr	r2, [pc, #56]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667a:	6513      	str	r3, [r2, #80]	@ 0x50
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800667c:	e00e      	b.n	800669c <FLASH_PageErase+0x54>
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800667e:	4b0c      	ldr	r3, [pc, #48]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	4a0b      	ldr	r2, [pc, #44]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800668a:	4a09      	ldr	r2, [pc, #36]	@ (80066b0 <FLASH_PageErase+0x68>)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006690:	4b07      	ldr	r3, [pc, #28]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	4a06      	ldr	r2, [pc, #24]	@ (80066b0 <FLASH_PageErase+0x68>)
 8006696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800669a:	6113      	str	r3, [r2, #16]
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bc80      	pop	{r7}
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	20000810 	.word	0x20000810
 80066ac:	0807ffff 	.word	0x0807ffff
 80066b0:	40022000 	.word	0x40022000

080066b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b08b      	sub	sp, #44	@ 0x2c
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80066be:	2300      	movs	r3, #0
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80066c2:	2300      	movs	r3, #0
 80066c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066c6:	e179      	b.n	80069bc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80066c8:	2201      	movs	r2, #1
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	fa02 f303 	lsl.w	r3, r2, r3
 80066d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	f040 8168 	bne.w	80069b6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	4a96      	ldr	r2, [pc, #600]	@ (8006944 <HAL_GPIO_Init+0x290>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d05e      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
 80066f0:	4a94      	ldr	r2, [pc, #592]	@ (8006944 <HAL_GPIO_Init+0x290>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d875      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 80066f6:	4a94      	ldr	r2, [pc, #592]	@ (8006948 <HAL_GPIO_Init+0x294>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d058      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
 80066fc:	4a92      	ldr	r2, [pc, #584]	@ (8006948 <HAL_GPIO_Init+0x294>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d86f      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 8006702:	4a92      	ldr	r2, [pc, #584]	@ (800694c <HAL_GPIO_Init+0x298>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d052      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
 8006708:	4a90      	ldr	r2, [pc, #576]	@ (800694c <HAL_GPIO_Init+0x298>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d869      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 800670e:	4a90      	ldr	r2, [pc, #576]	@ (8006950 <HAL_GPIO_Init+0x29c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04c      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
 8006714:	4a8e      	ldr	r2, [pc, #568]	@ (8006950 <HAL_GPIO_Init+0x29c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d863      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 800671a:	4a8e      	ldr	r2, [pc, #568]	@ (8006954 <HAL_GPIO_Init+0x2a0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d046      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
 8006720:	4a8c      	ldr	r2, [pc, #560]	@ (8006954 <HAL_GPIO_Init+0x2a0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d85d      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 8006726:	2b12      	cmp	r3, #18
 8006728:	d82a      	bhi.n	8006780 <HAL_GPIO_Init+0xcc>
 800672a:	2b12      	cmp	r3, #18
 800672c:	d859      	bhi.n	80067e2 <HAL_GPIO_Init+0x12e>
 800672e:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <HAL_GPIO_Init+0x80>)
 8006730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006734:	080067af 	.word	0x080067af
 8006738:	08006789 	.word	0x08006789
 800673c:	0800679b 	.word	0x0800679b
 8006740:	080067dd 	.word	0x080067dd
 8006744:	080067e3 	.word	0x080067e3
 8006748:	080067e3 	.word	0x080067e3
 800674c:	080067e3 	.word	0x080067e3
 8006750:	080067e3 	.word	0x080067e3
 8006754:	080067e3 	.word	0x080067e3
 8006758:	080067e3 	.word	0x080067e3
 800675c:	080067e3 	.word	0x080067e3
 8006760:	080067e3 	.word	0x080067e3
 8006764:	080067e3 	.word	0x080067e3
 8006768:	080067e3 	.word	0x080067e3
 800676c:	080067e3 	.word	0x080067e3
 8006770:	080067e3 	.word	0x080067e3
 8006774:	080067e3 	.word	0x080067e3
 8006778:	08006791 	.word	0x08006791
 800677c:	080067a5 	.word	0x080067a5
 8006780:	4a75      	ldr	r2, [pc, #468]	@ (8006958 <HAL_GPIO_Init+0x2a4>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d013      	beq.n	80067ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006786:	e02c      	b.n	80067e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	623b      	str	r3, [r7, #32]
          break;
 800678e:	e029      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	3304      	adds	r3, #4
 8006796:	623b      	str	r3, [r7, #32]
          break;
 8006798:	e024      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	3308      	adds	r3, #8
 80067a0:	623b      	str	r3, [r7, #32]
          break;
 80067a2:	e01f      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	330c      	adds	r3, #12
 80067aa:	623b      	str	r3, [r7, #32]
          break;
 80067ac:	e01a      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80067b6:	2304      	movs	r3, #4
 80067b8:	623b      	str	r3, [r7, #32]
          break;
 80067ba:	e013      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d105      	bne.n	80067d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80067c4:	2308      	movs	r3, #8
 80067c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	69fa      	ldr	r2, [r7, #28]
 80067cc:	611a      	str	r2, [r3, #16]
          break;
 80067ce:	e009      	b.n	80067e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80067d0:	2308      	movs	r3, #8
 80067d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69fa      	ldr	r2, [r7, #28]
 80067d8:	615a      	str	r2, [r3, #20]
          break;
 80067da:	e003      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80067dc:	2300      	movs	r3, #0
 80067de:	623b      	str	r3, [r7, #32]
          break;
 80067e0:	e000      	b.n	80067e4 <HAL_GPIO_Init+0x130>
          break;
 80067e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2bff      	cmp	r3, #255	@ 0xff
 80067e8:	d801      	bhi.n	80067ee <HAL_GPIO_Init+0x13a>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	e001      	b.n	80067f2 <HAL_GPIO_Init+0x13e>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3304      	adds	r3, #4
 80067f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	2bff      	cmp	r3, #255	@ 0xff
 80067f8:	d802      	bhi.n	8006800 <HAL_GPIO_Init+0x14c>
 80067fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	e002      	b.n	8006806 <HAL_GPIO_Init+0x152>
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	3b08      	subs	r3, #8
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	210f      	movs	r1, #15
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	fa01 f303 	lsl.w	r3, r1, r3
 8006814:	43db      	mvns	r3, r3
 8006816:	401a      	ands	r2, r3
 8006818:	6a39      	ldr	r1, [r7, #32]
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	f000 80c1 	beq.w	80069b6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006834:	4b49      	ldr	r3, [pc, #292]	@ (800695c <HAL_GPIO_Init+0x2a8>)
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	4a48      	ldr	r2, [pc, #288]	@ (800695c <HAL_GPIO_Init+0x2a8>)
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	6193      	str	r3, [r2, #24]
 8006840:	4b46      	ldr	r3, [pc, #280]	@ (800695c <HAL_GPIO_Init+0x2a8>)
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	60bb      	str	r3, [r7, #8]
 800684a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800684c:	4a44      	ldr	r2, [pc, #272]	@ (8006960 <HAL_GPIO_Init+0x2ac>)
 800684e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006850:	089b      	lsrs	r3, r3, #2
 8006852:	3302      	adds	r3, #2
 8006854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006858:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	f003 0303 	and.w	r3, r3, #3
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	220f      	movs	r2, #15
 8006864:	fa02 f303 	lsl.w	r3, r2, r3
 8006868:	43db      	mvns	r3, r3
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	4013      	ands	r3, r2
 800686e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a3c      	ldr	r2, [pc, #240]	@ (8006964 <HAL_GPIO_Init+0x2b0>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01f      	beq.n	80068b8 <HAL_GPIO_Init+0x204>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3b      	ldr	r2, [pc, #236]	@ (8006968 <HAL_GPIO_Init+0x2b4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d019      	beq.n	80068b4 <HAL_GPIO_Init+0x200>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3a      	ldr	r2, [pc, #232]	@ (800696c <HAL_GPIO_Init+0x2b8>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_GPIO_Init+0x1fc>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a39      	ldr	r2, [pc, #228]	@ (8006970 <HAL_GPIO_Init+0x2bc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00d      	beq.n	80068ac <HAL_GPIO_Init+0x1f8>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a38      	ldr	r2, [pc, #224]	@ (8006974 <HAL_GPIO_Init+0x2c0>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d007      	beq.n	80068a8 <HAL_GPIO_Init+0x1f4>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a37      	ldr	r2, [pc, #220]	@ (8006978 <HAL_GPIO_Init+0x2c4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d101      	bne.n	80068a4 <HAL_GPIO_Init+0x1f0>
 80068a0:	2305      	movs	r3, #5
 80068a2:	e00a      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068a4:	2306      	movs	r3, #6
 80068a6:	e008      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068a8:	2304      	movs	r3, #4
 80068aa:	e006      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068ac:	2303      	movs	r3, #3
 80068ae:	e004      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068b0:	2302      	movs	r3, #2
 80068b2:	e002      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068b4:	2301      	movs	r3, #1
 80068b6:	e000      	b.n	80068ba <HAL_GPIO_Init+0x206>
 80068b8:	2300      	movs	r3, #0
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	f002 0203 	and.w	r2, r2, #3
 80068c0:	0092      	lsls	r2, r2, #2
 80068c2:	4093      	lsls	r3, r2
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80068ca:	4925      	ldr	r1, [pc, #148]	@ (8006960 <HAL_GPIO_Init+0x2ac>)
 80068cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ce:	089b      	lsrs	r3, r3, #2
 80068d0:	3302      	adds	r3, #2
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d006      	beq.n	80068f2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80068e4:	4b25      	ldr	r3, [pc, #148]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	4924      	ldr	r1, [pc, #144]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	608b      	str	r3, [r1, #8]
 80068f0:	e006      	b.n	8006900 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80068f2:	4b22      	ldr	r3, [pc, #136]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 80068f4:	689a      	ldr	r2, [r3, #8]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	43db      	mvns	r3, r3
 80068fa:	4920      	ldr	r1, [pc, #128]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 80068fc:	4013      	ands	r3, r2
 80068fe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d006      	beq.n	800691a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800690c:	4b1b      	ldr	r3, [pc, #108]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	491a      	ldr	r1, [pc, #104]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	4313      	orrs	r3, r2
 8006916:	60cb      	str	r3, [r1, #12]
 8006918:	e006      	b.n	8006928 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800691a:	4b18      	ldr	r3, [pc, #96]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	43db      	mvns	r3, r3
 8006922:	4916      	ldr	r1, [pc, #88]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 8006924:	4013      	ands	r3, r2
 8006926:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d025      	beq.n	8006980 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006934:	4b11      	ldr	r3, [pc, #68]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	4910      	ldr	r1, [pc, #64]	@ (800697c <HAL_GPIO_Init+0x2c8>)
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	4313      	orrs	r3, r2
 800693e:	604b      	str	r3, [r1, #4]
 8006940:	e025      	b.n	800698e <HAL_GPIO_Init+0x2da>
 8006942:	bf00      	nop
 8006944:	10320000 	.word	0x10320000
 8006948:	10310000 	.word	0x10310000
 800694c:	10220000 	.word	0x10220000
 8006950:	10210000 	.word	0x10210000
 8006954:	10120000 	.word	0x10120000
 8006958:	10110000 	.word	0x10110000
 800695c:	40021000 	.word	0x40021000
 8006960:	40010000 	.word	0x40010000
 8006964:	40010800 	.word	0x40010800
 8006968:	40010c00 	.word	0x40010c00
 800696c:	40011000 	.word	0x40011000
 8006970:	40011400 	.word	0x40011400
 8006974:	40011800 	.word	0x40011800
 8006978:	40011c00 	.word	0x40011c00
 800697c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006980:	4b15      	ldr	r3, [pc, #84]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	43db      	mvns	r3, r3
 8006988:	4913      	ldr	r1, [pc, #76]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 800698a:	4013      	ands	r3, r2
 800698c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006996:	2b00      	cmp	r3, #0
 8006998:	d006      	beq.n	80069a8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800699a:	4b0f      	ldr	r3, [pc, #60]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	490e      	ldr	r1, [pc, #56]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]
 80069a6:	e006      	b.n	80069b6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80069a8:	4b0b      	ldr	r3, [pc, #44]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	43db      	mvns	r3, r3
 80069b0:	4909      	ldr	r1, [pc, #36]	@ (80069d8 <HAL_GPIO_Init+0x324>)
 80069b2:	4013      	ands	r3, r2
 80069b4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b8:	3301      	adds	r3, #1
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	fa22 f303 	lsr.w	r3, r2, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f47f ae7e 	bne.w	80066c8 <HAL_GPIO_Init+0x14>
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	372c      	adds	r7, #44	@ 0x2c
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bc80      	pop	{r7}
 80069d6:	4770      	bx	lr
 80069d8:	40010400 	.word	0x40010400

080069dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
 80069e4:	460b      	mov	r3, r1
 80069e6:	807b      	strh	r3, [r7, #2]
 80069e8:	4613      	mov	r3, r2
 80069ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80069ec:	787b      	ldrb	r3, [r7, #1]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80069f2:	887a      	ldrh	r2, [r7, #2]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80069f8:	e003      	b.n	8006a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80069fa:	887b      	ldrh	r3, [r7, #2]
 80069fc:	041a      	lsls	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	611a      	str	r2, [r3, #16]
}
 8006a02:	bf00      	nop
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bc80      	pop	{r7}
 8006a0a:	4770      	bx	lr

08006a0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e272      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8087 	beq.w	8006b3a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a2c:	4b92      	ldr	r3, [pc, #584]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f003 030c 	and.w	r3, r3, #12
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d00c      	beq.n	8006a52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006a38:	4b8f      	ldr	r3, [pc, #572]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 030c 	and.w	r3, r3, #12
 8006a40:	2b08      	cmp	r3, #8
 8006a42:	d112      	bne.n	8006a6a <HAL_RCC_OscConfig+0x5e>
 8006a44:	4b8c      	ldr	r3, [pc, #560]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a50:	d10b      	bne.n	8006a6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a52:	4b89      	ldr	r3, [pc, #548]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d06c      	beq.n	8006b38 <HAL_RCC_OscConfig+0x12c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d168      	bne.n	8006b38 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e24c      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a72:	d106      	bne.n	8006a82 <HAL_RCC_OscConfig+0x76>
 8006a74:	4b80      	ldr	r3, [pc, #512]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a7f      	ldr	r2, [pc, #508]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	e02e      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd4>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10c      	bne.n	8006aa4 <HAL_RCC_OscConfig+0x98>
 8006a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7a      	ldr	r2, [pc, #488]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a94:	6013      	str	r3, [r2, #0]
 8006a96:	4b78      	ldr	r3, [pc, #480]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a77      	ldr	r2, [pc, #476]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006a9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e01d      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd4>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006aac:	d10c      	bne.n	8006ac8 <HAL_RCC_OscConfig+0xbc>
 8006aae:	4b72      	ldr	r3, [pc, #456]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a71      	ldr	r2, [pc, #452]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4b6f      	ldr	r3, [pc, #444]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a6e      	ldr	r2, [pc, #440]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e00b      	b.n	8006ae0 <HAL_RCC_OscConfig+0xd4>
 8006ac8:	4b6b      	ldr	r3, [pc, #428]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6a      	ldr	r2, [pc, #424]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b68      	ldr	r3, [pc, #416]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a67      	ldr	r2, [pc, #412]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006ada:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006ade:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d013      	beq.n	8006b10 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae8:	f7fe f82e 	bl	8004b48 <HAL_GetTick>
 8006aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006af0:	f7fe f82a 	bl	8004b48 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b64      	cmp	r3, #100	@ 0x64
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e200      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b02:	4b5d      	ldr	r3, [pc, #372]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0xe4>
 8006b0e:	e014      	b.n	8006b3a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b10:	f7fe f81a 	bl	8004b48 <HAL_GetTick>
 8006b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b18:	f7fe f816 	bl	8004b48 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b64      	cmp	r3, #100	@ 0x64
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e1ec      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b2a:	4b53      	ldr	r3, [pc, #332]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x10c>
 8006b36:	e000      	b.n	8006b3a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0302 	and.w	r3, r3, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d063      	beq.n	8006c0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b46:	4b4c      	ldr	r3, [pc, #304]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00b      	beq.n	8006b6a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006b52:	4b49      	ldr	r3, [pc, #292]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d11c      	bne.n	8006b98 <HAL_RCC_OscConfig+0x18c>
 8006b5e:	4b46      	ldr	r3, [pc, #280]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d116      	bne.n	8006b98 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b6a:	4b43      	ldr	r3, [pc, #268]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d005      	beq.n	8006b82 <HAL_RCC_OscConfig+0x176>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d001      	beq.n	8006b82 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e1c0      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b82:	4b3d      	ldr	r3, [pc, #244]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	00db      	lsls	r3, r3, #3
 8006b90:	4939      	ldr	r1, [pc, #228]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b96:	e03a      	b.n	8006c0e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d020      	beq.n	8006be2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ba0:	4b36      	ldr	r3, [pc, #216]	@ (8006c7c <HAL_RCC_OscConfig+0x270>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba6:	f7fd ffcf 	bl	8004b48 <HAL_GetTick>
 8006baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bac:	e008      	b.n	8006bc0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bae:	f7fd ffcb 	bl	8004b48 <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e1a1      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0f0      	beq.n	8006bae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	00db      	lsls	r3, r3, #3
 8006bda:	4927      	ldr	r1, [pc, #156]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	600b      	str	r3, [r1, #0]
 8006be0:	e015      	b.n	8006c0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006be2:	4b26      	ldr	r3, [pc, #152]	@ (8006c7c <HAL_RCC_OscConfig+0x270>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be8:	f7fd ffae 	bl	8004b48 <HAL_GetTick>
 8006bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bf0:	f7fd ffaa 	bl	8004b48 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e180      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c02:	4b1d      	ldr	r3, [pc, #116]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d03a      	beq.n	8006c90 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d019      	beq.n	8006c56 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c22:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <HAL_RCC_OscConfig+0x274>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c28:	f7fd ff8e 	bl	8004b48 <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c30:	f7fd ff8a 	bl	8004b48 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e160      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c42:	4b0d      	ldr	r3, [pc, #52]	@ (8006c78 <HAL_RCC_OscConfig+0x26c>)
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0f0      	beq.n	8006c30 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006c4e:	2001      	movs	r0, #1
 8006c50:	f000 face 	bl	80071f0 <RCC_Delay>
 8006c54:	e01c      	b.n	8006c90 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c56:	4b0a      	ldr	r3, [pc, #40]	@ (8006c80 <HAL_RCC_OscConfig+0x274>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c5c:	f7fd ff74 	bl	8004b48 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c62:	e00f      	b.n	8006c84 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c64:	f7fd ff70 	bl	8004b48 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d908      	bls.n	8006c84 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e146      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
 8006c76:	bf00      	nop
 8006c78:	40021000 	.word	0x40021000
 8006c7c:	42420000 	.word	0x42420000
 8006c80:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c84:	4b92      	ldr	r3, [pc, #584]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e9      	bne.n	8006c64 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 80a6 	beq.w	8006dea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ca2:	4b8b      	ldr	r3, [pc, #556]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10d      	bne.n	8006cca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cae:	4b88      	ldr	r3, [pc, #544]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4a87      	ldr	r2, [pc, #540]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cb8:	61d3      	str	r3, [r2, #28]
 8006cba:	4b85      	ldr	r3, [pc, #532]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cca:	4b82      	ldr	r3, [pc, #520]	@ (8006ed4 <HAL_RCC_OscConfig+0x4c8>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d118      	bne.n	8006d08 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ed4 <HAL_RCC_OscConfig+0x4c8>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a7e      	ldr	r2, [pc, #504]	@ (8006ed4 <HAL_RCC_OscConfig+0x4c8>)
 8006cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ce2:	f7fd ff31 	bl	8004b48 <HAL_GetTick>
 8006ce6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ce8:	e008      	b.n	8006cfc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cea:	f7fd ff2d 	bl	8004b48 <HAL_GetTick>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	2b64      	cmp	r3, #100	@ 0x64
 8006cf6:	d901      	bls.n	8006cfc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e103      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cfc:	4b75      	ldr	r3, [pc, #468]	@ (8006ed4 <HAL_RCC_OscConfig+0x4c8>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d0f0      	beq.n	8006cea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d106      	bne.n	8006d1e <HAL_RCC_OscConfig+0x312>
 8006d10:	4b6f      	ldr	r3, [pc, #444]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d16:	f043 0301 	orr.w	r3, r3, #1
 8006d1a:	6213      	str	r3, [r2, #32]
 8006d1c:	e02d      	b.n	8006d7a <HAL_RCC_OscConfig+0x36e>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10c      	bne.n	8006d40 <HAL_RCC_OscConfig+0x334>
 8006d26:	4b6a      	ldr	r3, [pc, #424]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	4a69      	ldr	r2, [pc, #420]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d2c:	f023 0301 	bic.w	r3, r3, #1
 8006d30:	6213      	str	r3, [r2, #32]
 8006d32:	4b67      	ldr	r3, [pc, #412]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	4a66      	ldr	r2, [pc, #408]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d38:	f023 0304 	bic.w	r3, r3, #4
 8006d3c:	6213      	str	r3, [r2, #32]
 8006d3e:	e01c      	b.n	8006d7a <HAL_RCC_OscConfig+0x36e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2b05      	cmp	r3, #5
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCC_OscConfig+0x356>
 8006d48:	4b61      	ldr	r3, [pc, #388]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	4a60      	ldr	r2, [pc, #384]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d4e:	f043 0304 	orr.w	r3, r3, #4
 8006d52:	6213      	str	r3, [r2, #32]
 8006d54:	4b5e      	ldr	r3, [pc, #376]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	4a5d      	ldr	r2, [pc, #372]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d5a:	f043 0301 	orr.w	r3, r3, #1
 8006d5e:	6213      	str	r3, [r2, #32]
 8006d60:	e00b      	b.n	8006d7a <HAL_RCC_OscConfig+0x36e>
 8006d62:	4b5b      	ldr	r3, [pc, #364]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	4a5a      	ldr	r2, [pc, #360]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d68:	f023 0301 	bic.w	r3, r3, #1
 8006d6c:	6213      	str	r3, [r2, #32]
 8006d6e:	4b58      	ldr	r3, [pc, #352]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	4a57      	ldr	r2, [pc, #348]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006d74:	f023 0304 	bic.w	r3, r3, #4
 8006d78:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d015      	beq.n	8006dae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d82:	f7fd fee1 	bl	8004b48 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d88:	e00a      	b.n	8006da0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d8a:	f7fd fedd 	bl	8004b48 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d901      	bls.n	8006da0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e0b1      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006da0:	4b4b      	ldr	r3, [pc, #300]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d0ee      	beq.n	8006d8a <HAL_RCC_OscConfig+0x37e>
 8006dac:	e014      	b.n	8006dd8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dae:	f7fd fecb 	bl	8004b48 <HAL_GetTick>
 8006db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db4:	e00a      	b.n	8006dcc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db6:	f7fd fec7 	bl	8004b48 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e09b      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dcc:	4b40      	ldr	r3, [pc, #256]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006dce:	6a1b      	ldr	r3, [r3, #32]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1ee      	bne.n	8006db6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d105      	bne.n	8006dea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dde:	4b3c      	ldr	r3, [pc, #240]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006de8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 8087 	beq.w	8006f02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006df4:	4b36      	ldr	r3, [pc, #216]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f003 030c 	and.w	r3, r3, #12
 8006dfc:	2b08      	cmp	r3, #8
 8006dfe:	d061      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d146      	bne.n	8006e96 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e08:	4b33      	ldr	r3, [pc, #204]	@ (8006ed8 <HAL_RCC_OscConfig+0x4cc>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0e:	f7fd fe9b 	bl	8004b48 <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e14:	e008      	b.n	8006e28 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e16:	f7fd fe97 	bl	8004b48 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e06d      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e28:	4b29      	ldr	r3, [pc, #164]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a1b      	ldr	r3, [r3, #32]
 8006e38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3c:	d108      	bne.n	8006e50 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006e3e:	4b24      	ldr	r3, [pc, #144]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	4921      	ldr	r1, [pc, #132]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e50:	4b1f      	ldr	r3, [pc, #124]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a19      	ldr	r1, [r3, #32]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	430b      	orrs	r3, r1
 8006e62:	491b      	ldr	r1, [pc, #108]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e68:	4b1b      	ldr	r3, [pc, #108]	@ (8006ed8 <HAL_RCC_OscConfig+0x4cc>)
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e6e:	f7fd fe6b 	bl	8004b48 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e76:	f7fd fe67 	bl	8004b48 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e03d      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d0f0      	beq.n	8006e76 <HAL_RCC_OscConfig+0x46a>
 8006e94:	e035      	b.n	8006f02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e96:	4b10      	ldr	r3, [pc, #64]	@ (8006ed8 <HAL_RCC_OscConfig+0x4cc>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e9c:	f7fd fe54 	bl	8004b48 <HAL_GetTick>
 8006ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ea2:	e008      	b.n	8006eb6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea4:	f7fd fe50 	bl	8004b48 <HAL_GetTick>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	1ad3      	subs	r3, r2, r3
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d901      	bls.n	8006eb6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e026      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006eb6:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <HAL_RCC_OscConfig+0x4c4>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1f0      	bne.n	8006ea4 <HAL_RCC_OscConfig+0x498>
 8006ec2:	e01e      	b.n	8006f02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d107      	bne.n	8006edc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006ecc:	2301      	movs	r3, #1
 8006ece:	e019      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	40007000 	.word	0x40007000
 8006ed8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006edc:	4b0b      	ldr	r3, [pc, #44]	@ (8006f0c <HAL_RCC_OscConfig+0x500>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6a1b      	ldr	r3, [r3, #32]
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d106      	bne.n	8006efe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d001      	beq.n	8006f02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40021000 	.word	0x40021000

08006f10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0d0      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f24:	4b6a      	ldr	r3, [pc, #424]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0307 	and.w	r3, r3, #7
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d910      	bls.n	8006f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f32:	4b67      	ldr	r3, [pc, #412]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f023 0207 	bic.w	r2, r3, #7
 8006f3a:	4965      	ldr	r1, [pc, #404]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f42:	4b63      	ldr	r3, [pc, #396]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d001      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0b8      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d020      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 0304 	and.w	r3, r3, #4
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f6c:	4b59      	ldr	r3, [pc, #356]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	4a58      	ldr	r2, [pc, #352]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f72:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d005      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f84:	4b53      	ldr	r3, [pc, #332]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	4a52      	ldr	r2, [pc, #328]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f8a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006f8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f90:	4b50      	ldr	r3, [pc, #320]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	494d      	ldr	r1, [pc, #308]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d040      	beq.n	8007030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d107      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fb6:	4b47      	ldr	r3, [pc, #284]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d115      	bne.n	8006fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	e07f      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d107      	bne.n	8006fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fce:	4b41      	ldr	r3, [pc, #260]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e073      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006fde:	4b3d      	ldr	r3, [pc, #244]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f003 0302 	and.w	r3, r3, #2
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e06b      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fee:	4b39      	ldr	r3, [pc, #228]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f023 0203 	bic.w	r2, r3, #3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	4936      	ldr	r1, [pc, #216]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007000:	f7fd fda2 	bl	8004b48 <HAL_GetTick>
 8007004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007006:	e00a      	b.n	800701e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007008:	f7fd fd9e 	bl	8004b48 <HAL_GetTick>
 800700c:	4602      	mov	r2, r0
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007016:	4293      	cmp	r3, r2
 8007018:	d901      	bls.n	800701e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e053      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800701e:	4b2d      	ldr	r3, [pc, #180]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f003 020c 	and.w	r2, r3, #12
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	429a      	cmp	r2, r3
 800702e:	d1eb      	bne.n	8007008 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007030:	4b27      	ldr	r3, [pc, #156]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	429a      	cmp	r2, r3
 800703c:	d210      	bcs.n	8007060 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703e:	4b24      	ldr	r3, [pc, #144]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 0207 	bic.w	r2, r3, #7
 8007046:	4922      	ldr	r1, [pc, #136]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	4313      	orrs	r3, r2
 800704c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800704e:	4b20      	ldr	r3, [pc, #128]	@ (80070d0 <HAL_RCC_ClockConfig+0x1c0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	429a      	cmp	r2, r3
 800705a:	d001      	beq.n	8007060 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e032      	b.n	80070c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0304 	and.w	r3, r3, #4
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800706c:	4b19      	ldr	r3, [pc, #100]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	4916      	ldr	r1, [pc, #88]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 800707a:	4313      	orrs	r3, r2
 800707c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800708a:	4b12      	ldr	r3, [pc, #72]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	490e      	ldr	r1, [pc, #56]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 800709a:	4313      	orrs	r3, r2
 800709c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800709e:	f000 f821 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <HAL_RCC_ClockConfig+0x1c4>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	091b      	lsrs	r3, r3, #4
 80070aa:	f003 030f 	and.w	r3, r3, #15
 80070ae:	490a      	ldr	r1, [pc, #40]	@ (80070d8 <HAL_RCC_ClockConfig+0x1c8>)
 80070b0:	5ccb      	ldrb	r3, [r1, r3]
 80070b2:	fa22 f303 	lsr.w	r3, r2, r3
 80070b6:	4a09      	ldr	r2, [pc, #36]	@ (80070dc <HAL_RCC_ClockConfig+0x1cc>)
 80070b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80070ba:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <HAL_RCC_ClockConfig+0x1d0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fd fd00 	bl	8004ac4 <HAL_InitTick>

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40022000 	.word	0x40022000
 80070d4:	40021000 	.word	0x40021000
 80070d8:	08009968 	.word	0x08009968
 80070dc:	20000000 	.word	0x20000000
 80070e0:	20000190 	.word	0x20000190

080070e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	2300      	movs	r3, #0
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x94>)
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f003 030c 	and.w	r3, r3, #12
 800710a:	2b04      	cmp	r3, #4
 800710c:	d002      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0x30>
 800710e:	2b08      	cmp	r3, #8
 8007110:	d003      	beq.n	800711a <HAL_RCC_GetSysClockFreq+0x36>
 8007112:	e027      	b.n	8007164 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007114:	4b19      	ldr	r3, [pc, #100]	@ (800717c <HAL_RCC_GetSysClockFreq+0x98>)
 8007116:	613b      	str	r3, [r7, #16]
      break;
 8007118:	e027      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	0c9b      	lsrs	r3, r3, #18
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	4a17      	ldr	r2, [pc, #92]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007124:	5cd3      	ldrb	r3, [r2, r3]
 8007126:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d010      	beq.n	8007154 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007132:	4b11      	ldr	r3, [pc, #68]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x94>)
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	0c5b      	lsrs	r3, r3, #17
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	4a11      	ldr	r2, [pc, #68]	@ (8007184 <HAL_RCC_GetSysClockFreq+0xa0>)
 800713e:	5cd3      	ldrb	r3, [r2, r3]
 8007140:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a0d      	ldr	r2, [pc, #52]	@ (800717c <HAL_RCC_GetSysClockFreq+0x98>)
 8007146:	fb03 f202 	mul.w	r2, r3, r2
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	617b      	str	r3, [r7, #20]
 8007152:	e004      	b.n	800715e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a0c      	ldr	r2, [pc, #48]	@ (8007188 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	613b      	str	r3, [r7, #16]
      break;
 8007162:	e002      	b.n	800716a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007164:	4b05      	ldr	r3, [pc, #20]	@ (800717c <HAL_RCC_GetSysClockFreq+0x98>)
 8007166:	613b      	str	r3, [r7, #16]
      break;
 8007168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800716a:	693b      	ldr	r3, [r7, #16]
}
 800716c:	4618      	mov	r0, r3
 800716e:	371c      	adds	r7, #28
 8007170:	46bd      	mov	sp, r7
 8007172:	bc80      	pop	{r7}
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	40021000 	.word	0x40021000
 800717c:	007a1200 	.word	0x007a1200
 8007180:	08009ef0 	.word	0x08009ef0
 8007184:	08009f00 	.word	0x08009f00
 8007188:	003d0900 	.word	0x003d0900

0800718c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007190:	4b02      	ldr	r3, [pc, #8]	@ (800719c <HAL_RCC_GetHCLKFreq+0x10>)
 8007192:	681b      	ldr	r3, [r3, #0]
}
 8007194:	4618      	mov	r0, r3
 8007196:	46bd      	mov	sp, r7
 8007198:	bc80      	pop	{r7}
 800719a:	4770      	bx	lr
 800719c:	20000000 	.word	0x20000000

080071a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80071a4:	f7ff fff2 	bl	800718c <HAL_RCC_GetHCLKFreq>
 80071a8:	4602      	mov	r2, r0
 80071aa:	4b05      	ldr	r3, [pc, #20]	@ (80071c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	0a1b      	lsrs	r3, r3, #8
 80071b0:	f003 0307 	and.w	r3, r3, #7
 80071b4:	4903      	ldr	r1, [pc, #12]	@ (80071c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071b6:	5ccb      	ldrb	r3, [r1, r3]
 80071b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071bc:	4618      	mov	r0, r3
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	40021000 	.word	0x40021000
 80071c4:	08009978 	.word	0x08009978

080071c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80071cc:	f7ff ffde 	bl	800718c <HAL_RCC_GetHCLKFreq>
 80071d0:	4602      	mov	r2, r0
 80071d2:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	0adb      	lsrs	r3, r3, #11
 80071d8:	f003 0307 	and.w	r3, r3, #7
 80071dc:	4903      	ldr	r1, [pc, #12]	@ (80071ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80071de:	5ccb      	ldrb	r3, [r1, r3]
 80071e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	40021000 	.word	0x40021000
 80071ec:	08009978 	.word	0x08009978

080071f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80071f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007224 <RCC_Delay+0x34>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007228 <RCC_Delay+0x38>)
 80071fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007202:	0a5b      	lsrs	r3, r3, #9
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	fb02 f303 	mul.w	r3, r2, r3
 800720a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800720c:	bf00      	nop
  }
  while (Delay --);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	1e5a      	subs	r2, r3, #1
 8007212:	60fa      	str	r2, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f9      	bne.n	800720c <RCC_Delay+0x1c>
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	3714      	adds	r7, #20
 800721e:	46bd      	mov	sp, r7
 8007220:	bc80      	pop	{r7}
 8007222:	4770      	bx	lr
 8007224:	20000000 	.word	0x20000000
 8007228:	10624dd3 	.word	0x10624dd3

0800722c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	2300      	movs	r3, #0
 800723a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d07d      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007248:	2300      	movs	r3, #0
 800724a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800724c:	4b4f      	ldr	r3, [pc, #316]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d10d      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007258:	4b4c      	ldr	r3, [pc, #304]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	4a4b      	ldr	r2, [pc, #300]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800725e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007262:	61d3      	str	r3, [r2, #28]
 8007264:	4b49      	ldr	r3, [pc, #292]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007270:	2301      	movs	r3, #1
 8007272:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007274:	4b46      	ldr	r3, [pc, #280]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727c:	2b00      	cmp	r3, #0
 800727e:	d118      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007280:	4b43      	ldr	r3, [pc, #268]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a42      	ldr	r2, [pc, #264]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800728a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800728c:	f7fd fc5c 	bl	8004b48 <HAL_GetTick>
 8007290:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007292:	e008      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007294:	f7fd fc58 	bl	8004b48 <HAL_GetTick>
 8007298:	4602      	mov	r2, r0
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	1ad3      	subs	r3, r2, r3
 800729e:	2b64      	cmp	r3, #100	@ 0x64
 80072a0:	d901      	bls.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e06d      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a6:	4b3a      	ldr	r3, [pc, #232]	@ (8007390 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80072b2:	4b36      	ldr	r3, [pc, #216]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d02e      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d027      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072d0:	4b2e      	ldr	r3, [pc, #184]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80072da:	4b2e      	ldr	r3, [pc, #184]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072dc:	2201      	movs	r2, #1
 80072de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80072e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007394 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80072e6:	4a29      	ldr	r2, [pc, #164]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d014      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072f6:	f7fd fc27 	bl	8004b48 <HAL_GetTick>
 80072fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072fc:	e00a      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072fe:	f7fd fc23 	bl	8004b48 <HAL_GetTick>
 8007302:	4602      	mov	r2, r0
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	1ad3      	subs	r3, r2, r3
 8007308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800730c:	4293      	cmp	r3, r2
 800730e:	d901      	bls.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e036      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0ee      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007320:	4b1a      	ldr	r3, [pc, #104]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007322:	6a1b      	ldr	r3, [r3, #32]
 8007324:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	4917      	ldr	r1, [pc, #92]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800732e:	4313      	orrs	r3, r2
 8007330:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007332:	7dfb      	ldrb	r3, [r7, #23]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d105      	bne.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007338:	4b14      	ldr	r3, [pc, #80]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	4a13      	ldr	r2, [pc, #76]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800733e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007342:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007350:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	490b      	ldr	r1, [pc, #44]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800735e:	4313      	orrs	r3, r2
 8007360:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 0310 	and.w	r3, r3, #16
 800736a:	2b00      	cmp	r3, #0
 800736c:	d008      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800736e:	4b07      	ldr	r3, [pc, #28]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	4904      	ldr	r1, [pc, #16]	@ (800738c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800737c:	4313      	orrs	r3, r2
 800737e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3718      	adds	r7, #24
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	40021000 	.word	0x40021000
 8007390:	40007000 	.word	0x40007000
 8007394:	42420440 	.word	0x42420440

08007398 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b088      	sub	sp, #32
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	2300      	movs	r3, #0
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	f200 80af 	bhi.w	800751c <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 80073be:	a201      	add	r2, pc, #4	@ (adr r2, 80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80073c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c4:	0800749b 	.word	0x0800749b
 80073c8:	08007501 	.word	0x08007501
 80073cc:	0800751d 	.word	0x0800751d
 80073d0:	0800748b 	.word	0x0800748b
 80073d4:	0800751d 	.word	0x0800751d
 80073d8:	0800751d 	.word	0x0800751d
 80073dc:	0800751d 	.word	0x0800751d
 80073e0:	08007493 	.word	0x08007493
 80073e4:	0800751d 	.word	0x0800751d
 80073e8:	0800751d 	.word	0x0800751d
 80073ec:	0800751d 	.word	0x0800751d
 80073f0:	0800751d 	.word	0x0800751d
 80073f4:	0800751d 	.word	0x0800751d
 80073f8:	0800751d 	.word	0x0800751d
 80073fc:	0800751d 	.word	0x0800751d
 8007400:	08007405 	.word	0x08007405
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007404:	4b4a      	ldr	r3, [pc, #296]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800740a:	4b49      	ldr	r3, [pc, #292]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007412:	2b00      	cmp	r3, #0
 8007414:	f000 8084 	beq.w	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0c9b      	lsrs	r3, r3, #18
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	4a44      	ldr	r2, [pc, #272]	@ (8007534 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007422:	5cd3      	ldrb	r3, [r2, r3]
 8007424:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d015      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007430:	4b3f      	ldr	r3, [pc, #252]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c5b      	lsrs	r3, r3, #17
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	4a3f      	ldr	r2, [pc, #252]	@ (8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 800743c:	5cd3      	ldrb	r3, [r2, r3]
 800743e:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00d      	beq.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800744a:	4a3c      	ldr	r2, [pc, #240]	@ (800753c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	fb02 f303 	mul.w	r3, r2, r3
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	e004      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4a38      	ldr	r2, [pc, #224]	@ (8007540 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007460:	fb02 f303 	mul.w	r3, r2, r3
 8007464:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007466:	4b32      	ldr	r3, [pc, #200]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800746e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007472:	d102      	bne.n	800747a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007478:	e052      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	4a31      	ldr	r2, [pc, #196]	@ (8007544 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	085b      	lsrs	r3, r3, #1
 8007486:	61bb      	str	r3, [r7, #24]
      break;
 8007488:	e04a      	b.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800748a:	f7ff fe2b 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 800748e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007490:	e049      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007492:	f7ff fe27 	bl	80070e4 <HAL_RCC_GetSysClockFreq>
 8007496:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007498:	e045      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800749a:	4b25      	ldr	r3, [pc, #148]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074aa:	d108      	bne.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f003 0302 	and.w	r3, r3, #2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 80074b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ba:	61bb      	str	r3, [r7, #24]
 80074bc:	e01f      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074c8:	d109      	bne.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80074ca:	4b19      	ldr	r3, [pc, #100]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80074cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d003      	beq.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 80074d6:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	e00f      	b.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80074e8:	d11c      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80074ea:	4b11      	ldr	r3, [pc, #68]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d016      	beq.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 80074f6:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80074fa:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80074fc:	e012      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 80074fe:	e011      	b.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007500:	f7ff fe62 	bl	80071c8 <HAL_RCC_GetPCLK2Freq>
 8007504:	4602      	mov	r2, r0
 8007506:	4b0a      	ldr	r3, [pc, #40]	@ (8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	0b9b      	lsrs	r3, r3, #14
 800750c:	f003 0303 	and.w	r3, r3, #3
 8007510:	3301      	adds	r3, #1
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	fbb2 f3f3 	udiv	r3, r2, r3
 8007518:	61bb      	str	r3, [r7, #24]
      break;
 800751a:	e004      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 800751c:	bf00      	nop
 800751e:	e002      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007520:	bf00      	nop
 8007522:	e000      	b.n	8007526 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007524:	bf00      	nop
    }
  }
  return (frequency);
 8007526:	69bb      	ldr	r3, [r7, #24]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3720      	adds	r7, #32
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40021000 	.word	0x40021000
 8007534:	08009f04 	.word	0x08009f04
 8007538:	08009f14 	.word	0x08009f14
 800753c:	007a1200 	.word	0x007a1200
 8007540:	003d0900 	.word	0x003d0900
 8007544:	aaaaaaab 	.word	0xaaaaaaab

08007548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e041      	b.n	80075de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007560:	b2db      	uxtb	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d106      	bne.n	8007574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2200      	movs	r2, #0
 800756a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f7fa fd7c 	bl	800206c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2202      	movs	r2, #2
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f000 fd56 	bl	8008038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d001      	beq.n	8007600 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e046      	b.n	800768e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a22      	ldr	r2, [pc, #136]	@ (8007698 <HAL_TIM_Base_Start+0xb0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d022      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a21      	ldr	r2, [pc, #132]	@ (800769c <HAL_TIM_Base_Start+0xb4>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d01d      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007624:	d018      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1d      	ldr	r2, [pc, #116]	@ (80076a0 <HAL_TIM_Base_Start+0xb8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d013      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a1b      	ldr	r2, [pc, #108]	@ (80076a4 <HAL_TIM_Base_Start+0xbc>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00e      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a1a      	ldr	r2, [pc, #104]	@ (80076a8 <HAL_TIM_Base_Start+0xc0>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d009      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_TIM_Base_Start+0xc4>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d004      	beq.n	8007658 <HAL_TIM_Base_Start+0x70>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a17      	ldr	r2, [pc, #92]	@ (80076b0 <HAL_TIM_Base_Start+0xc8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d111      	bne.n	800767c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 0307 	and.w	r3, r3, #7
 8007662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2b06      	cmp	r3, #6
 8007668:	d010      	beq.n	800768c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f042 0201 	orr.w	r2, r2, #1
 8007678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800767a:	e007      	b.n	800768c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr
 8007698:	40012c00 	.word	0x40012c00
 800769c:	40013400 	.word	0x40013400
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40014c00 	.word	0x40014c00
 80076b0:	40001800 	.word	0x40001800

080076b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6a1a      	ldr	r2, [r3, #32]
 80076c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80076c6:	4013      	ands	r3, r2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10f      	bne.n	80076ec <HAL_TIM_Base_Stop+0x38>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	f240 4344 	movw	r3, #1092	@ 0x444
 80076d6:	4013      	ands	r3, r2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d107      	bne.n	80076ec <HAL_TIM_Base_Stop+0x38>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800770e:	b2db      	uxtb	r3, r3
 8007710:	2b01      	cmp	r3, #1
 8007712:	d001      	beq.n	8007718 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e04e      	b.n	80077b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68da      	ldr	r2, [r3, #12]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f042 0201 	orr.w	r2, r2, #1
 800772e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a22      	ldr	r2, [pc, #136]	@ (80077c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a21      	ldr	r2, [pc, #132]	@ (80077c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800774c:	d018      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1d      	ldr	r2, [pc, #116]	@ (80077c8 <HAL_TIM_Base_Start_IT+0xc8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1b      	ldr	r2, [pc, #108]	@ (80077cc <HAL_TIM_Base_Start_IT+0xcc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1a      	ldr	r2, [pc, #104]	@ (80077d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_TIM_Base_Start_IT+0x80>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a17      	ldr	r2, [pc, #92]	@ (80077d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b06      	cmp	r3, #6
 8007790:	d010      	beq.n	80077b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	e007      	b.n	80077b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40014c00 	.word	0x40014c00
 80077d8:	40001800 	.word	0x40001800

080077dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d101      	bne.n	80077ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e041      	b.n	8007872 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d106      	bne.n	8007808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f839 	bl	800787a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3304      	adds	r3, #4
 8007818:	4619      	mov	r1, r3
 800781a:	4610      	mov	r0, r2
 800781c:	f000 fc0c 	bl	8008038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr

0800788c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d109      	bne.n	80078b0 <HAL_TIM_PWM_Start+0x24>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e022      	b.n	80078f6 <HAL_TIM_PWM_Start+0x6a>
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	d109      	bne.n	80078ca <HAL_TIM_PWM_Start+0x3e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b01      	cmp	r3, #1
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	e015      	b.n	80078f6 <HAL_TIM_PWM_Start+0x6a>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b08      	cmp	r3, #8
 80078ce:	d109      	bne.n	80078e4 <HAL_TIM_PWM_Start+0x58>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b01      	cmp	r3, #1
 80078da:	bf14      	ite	ne
 80078dc:	2301      	movne	r3, #1
 80078de:	2300      	moveq	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e008      	b.n	80078f6 <HAL_TIM_PWM_Start+0x6a>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	bf14      	ite	ne
 80078f0:	2301      	movne	r3, #1
 80078f2:	2300      	moveq	r3, #0
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
 80078fc:	e07c      	b.n	80079f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <HAL_TIM_PWM_Start+0x82>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800790c:	e013      	b.n	8007936 <HAL_TIM_PWM_Start+0xaa>
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	2b04      	cmp	r3, #4
 8007912:	d104      	bne.n	800791e <HAL_TIM_PWM_Start+0x92>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800791c:	e00b      	b.n	8007936 <HAL_TIM_PWM_Start+0xaa>
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b08      	cmp	r3, #8
 8007922:	d104      	bne.n	800792e <HAL_TIM_PWM_Start+0xa2>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800792c:	e003      	b.n	8007936 <HAL_TIM_PWM_Start+0xaa>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2201      	movs	r2, #1
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fe66 	bl	8008610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a2d      	ldr	r2, [pc, #180]	@ (8007a00 <HAL_TIM_PWM_Start+0x174>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIM_PWM_Start+0xcc>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a2c      	ldr	r2, [pc, #176]	@ (8007a04 <HAL_TIM_PWM_Start+0x178>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d101      	bne.n	800795c <HAL_TIM_PWM_Start+0xd0>
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <HAL_TIM_PWM_Start+0xd2>
 800795c:	2300      	movs	r3, #0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007970:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a22      	ldr	r2, [pc, #136]	@ (8007a00 <HAL_TIM_PWM_Start+0x174>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d022      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a20      	ldr	r2, [pc, #128]	@ (8007a04 <HAL_TIM_PWM_Start+0x178>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d01d      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800798e:	d018      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1c      	ldr	r2, [pc, #112]	@ (8007a08 <HAL_TIM_PWM_Start+0x17c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d013      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1b      	ldr	r2, [pc, #108]	@ (8007a0c <HAL_TIM_PWM_Start+0x180>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00e      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a19      	ldr	r2, [pc, #100]	@ (8007a10 <HAL_TIM_PWM_Start+0x184>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d009      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a18      	ldr	r2, [pc, #96]	@ (8007a14 <HAL_TIM_PWM_Start+0x188>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d004      	beq.n	80079c2 <HAL_TIM_PWM_Start+0x136>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a16      	ldr	r2, [pc, #88]	@ (8007a18 <HAL_TIM_PWM_Start+0x18c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d111      	bne.n	80079e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b06      	cmp	r3, #6
 80079d2:	d010      	beq.n	80079f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0201 	orr.w	r2, r2, #1
 80079e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079e4:	e007      	b.n	80079f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0201 	orr.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	40000400 	.word	0x40000400
 8007a0c:	40000800 	.word	0x40000800
 8007a10:	40000c00 	.word	0x40000c00
 8007a14:	40014c00 	.word	0x40014c00
 8007a18:	40001800 	.word	0x40001800

08007a1c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fdee 	bl	8008610 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a2e      	ldr	r2, [pc, #184]	@ (8007af4 <HAL_TIM_PWM_Stop+0xd8>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d004      	beq.n	8007a48 <HAL_TIM_PWM_Stop+0x2c>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a2d      	ldr	r2, [pc, #180]	@ (8007af8 <HAL_TIM_PWM_Stop+0xdc>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d101      	bne.n	8007a4c <HAL_TIM_PWM_Stop+0x30>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e000      	b.n	8007a4e <HAL_TIM_PWM_Stop+0x32>
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d017      	beq.n	8007a82 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6a1a      	ldr	r2, [r3, #32]
 8007a58:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10f      	bne.n	8007a82 <HAL_TIM_PWM_Stop+0x66>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6a1a      	ldr	r2, [r3, #32]
 8007a68:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a6c:	4013      	ands	r3, r2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d107      	bne.n	8007a82 <HAL_TIM_PWM_Stop+0x66>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	6a1a      	ldr	r2, [r3, #32]
 8007a88:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007a8c:	4013      	ands	r3, r2
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10f      	bne.n	8007ab2 <HAL_TIM_PWM_Stop+0x96>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	f240 4344 	movw	r3, #1092	@ 0x444
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d107      	bne.n	8007ab2 <HAL_TIM_PWM_Stop+0x96>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d104      	bne.n	8007ac2 <HAL_TIM_PWM_Stop+0xa6>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ac0:	e013      	b.n	8007aea <HAL_TIM_PWM_Stop+0xce>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d104      	bne.n	8007ad2 <HAL_TIM_PWM_Stop+0xb6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ad0:	e00b      	b.n	8007aea <HAL_TIM_PWM_Stop+0xce>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d104      	bne.n	8007ae2 <HAL_TIM_PWM_Stop+0xc6>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ae0:	e003      	b.n	8007aea <HAL_TIM_PWM_Stop+0xce>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	40012c00 	.word	0x40012c00
 8007af8:	40013400 	.word	0x40013400

08007afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d020      	beq.n	8007b60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f003 0302 	and.w	r3, r3, #2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d01b      	beq.n	8007b60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0202 	mvn.w	r2, #2
 8007b30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fa5a 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007b4c:	e005      	b.n	8007b5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fa4d 	bl	8007fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fa5c 	bl	8008012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f003 0304 	and.w	r3, r3, #4
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d020      	beq.n	8007bac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f003 0304 	and.w	r3, r3, #4
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01b      	beq.n	8007bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f06f 0204 	mvn.w	r2, #4
 8007b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2202      	movs	r2, #2
 8007b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fa34 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007b98:	e005      	b.n	8007ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 fa27 	bl	8007fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fa36 	bl	8008012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d020      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 0308 	and.w	r3, r3, #8
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d01b      	beq.n	8007bf8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f06f 0208 	mvn.w	r2, #8
 8007bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fa0e 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007be4:	e005      	b.n	8007bf2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fa01 	bl	8007fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fa10 	bl	8008012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d020      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d01b      	beq.n	8007c44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0210 	mvn.w	r2, #16
 8007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2208      	movs	r2, #8
 8007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f9e8 	bl	8008000 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f9db 	bl	8007fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f9ea 	bl	8008012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00c      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0301 	and.w	r3, r3, #1
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0201 	mvn.w	r2, #1
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7f9 fc9c 	bl	80015a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00c      	beq.n	8007c8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d007      	beq.n	8007c8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fdba 	bl	8008800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d00c      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f9ba 	bl	8008024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00c      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f003 0320 	and.w	r3, r3, #32
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d007      	beq.n	8007cd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0220 	mvn.w	r2, #32
 8007ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fd8d 	bl	80087ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b086      	sub	sp, #24
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d101      	bne.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cf6:	2302      	movs	r3, #2
 8007cf8:	e0ae      	b.n	8007e58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b0c      	cmp	r3, #12
 8007d06:	f200 809f 	bhi.w	8007e48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d10:	08007d45 	.word	0x08007d45
 8007d14:	08007e49 	.word	0x08007e49
 8007d18:	08007e49 	.word	0x08007e49
 8007d1c:	08007e49 	.word	0x08007e49
 8007d20:	08007d85 	.word	0x08007d85
 8007d24:	08007e49 	.word	0x08007e49
 8007d28:	08007e49 	.word	0x08007e49
 8007d2c:	08007e49 	.word	0x08007e49
 8007d30:	08007dc7 	.word	0x08007dc7
 8007d34:	08007e49 	.word	0x08007e49
 8007d38:	08007e49 	.word	0x08007e49
 8007d3c:	08007e49 	.word	0x08007e49
 8007d40:	08007e07 	.word	0x08007e07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f000 fa1e 	bl	800818c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0208 	orr.w	r2, r2, #8
 8007d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	699a      	ldr	r2, [r3, #24]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 0204 	bic.w	r2, r2, #4
 8007d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6999      	ldr	r1, [r3, #24]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	619a      	str	r2, [r3, #24]
      break;
 8007d82:	e064      	b.n	8007e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68b9      	ldr	r1, [r7, #8]
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fa6e 	bl	800826c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	699a      	ldr	r2, [r3, #24]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6999      	ldr	r1, [r3, #24]
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	691b      	ldr	r3, [r3, #16]
 8007dba:	021a      	lsls	r2, r3, #8
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	430a      	orrs	r2, r1
 8007dc2:	619a      	str	r2, [r3, #24]
      break;
 8007dc4:	e043      	b.n	8007e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f000 fac1 	bl	8008354 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	69da      	ldr	r2, [r3, #28]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f042 0208 	orr.w	r2, r2, #8
 8007de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69da      	ldr	r2, [r3, #28]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0204 	bic.w	r2, r2, #4
 8007df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	69d9      	ldr	r1, [r3, #28]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	691a      	ldr	r2, [r3, #16]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	61da      	str	r2, [r3, #28]
      break;
 8007e04:	e023      	b.n	8007e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68b9      	ldr	r1, [r7, #8]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 fb15 	bl	800843c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	69da      	ldr	r2, [r3, #28]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	69da      	ldr	r2, [r3, #28]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69d9      	ldr	r1, [r3, #28]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	021a      	lsls	r2, r3, #8
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	61da      	str	r2, [r3, #28]
      break;
 8007e46:	e002      	b.n	8007e4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3718      	adds	r7, #24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d101      	bne.n	8007e7c <HAL_TIM_ConfigClockSource+0x1c>
 8007e78:	2302      	movs	r3, #2
 8007e7a:	e0b4      	b.n	8007fe6 <HAL_TIM_ConfigClockSource+0x186>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68ba      	ldr	r2, [r7, #8]
 8007eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eb4:	d03e      	beq.n	8007f34 <HAL_TIM_ConfigClockSource+0xd4>
 8007eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007eba:	f200 8087 	bhi.w	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ec2:	f000 8086 	beq.w	8007fd2 <HAL_TIM_ConfigClockSource+0x172>
 8007ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eca:	d87f      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007ecc:	2b70      	cmp	r3, #112	@ 0x70
 8007ece:	d01a      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0xa6>
 8007ed0:	2b70      	cmp	r3, #112	@ 0x70
 8007ed2:	d87b      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007ed4:	2b60      	cmp	r3, #96	@ 0x60
 8007ed6:	d050      	beq.n	8007f7a <HAL_TIM_ConfigClockSource+0x11a>
 8007ed8:	2b60      	cmp	r3, #96	@ 0x60
 8007eda:	d877      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007edc:	2b50      	cmp	r3, #80	@ 0x50
 8007ede:	d03c      	beq.n	8007f5a <HAL_TIM_ConfigClockSource+0xfa>
 8007ee0:	2b50      	cmp	r3, #80	@ 0x50
 8007ee2:	d873      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007ee4:	2b40      	cmp	r3, #64	@ 0x40
 8007ee6:	d058      	beq.n	8007f9a <HAL_TIM_ConfigClockSource+0x13a>
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d86f      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	2b30      	cmp	r3, #48	@ 0x30
 8007eee:	d064      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x15a>
 8007ef0:	2b30      	cmp	r3, #48	@ 0x30
 8007ef2:	d86b      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d060      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x15a>
 8007ef8:	2b20      	cmp	r3, #32
 8007efa:	d867      	bhi.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d05c      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x15a>
 8007f00:	2b10      	cmp	r3, #16
 8007f02:	d05a      	beq.n	8007fba <HAL_TIM_ConfigClockSource+0x15a>
 8007f04:	e062      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f16:	f000 fb5c 	bl	80085d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	609a      	str	r2, [r3, #8]
      break;
 8007f32:	e04f      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f44:	f000 fb45 	bl	80085d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f56:	609a      	str	r2, [r3, #8]
      break;
 8007f58:	e03c      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	461a      	mov	r2, r3
 8007f68:	f000 fabc 	bl	80084e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2150      	movs	r1, #80	@ 0x50
 8007f72:	4618      	mov	r0, r3
 8007f74:	f000 fb13 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007f78:	e02c      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f86:	461a      	mov	r2, r3
 8007f88:	f000 fada 	bl	8008540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2160      	movs	r1, #96	@ 0x60
 8007f92:	4618      	mov	r0, r3
 8007f94:	f000 fb03 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007f98:	e01c      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	f000 fa9c 	bl	80084e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2140      	movs	r1, #64	@ 0x40
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 faf3 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007fb8:	e00c      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	f000 faea 	bl	800859e <TIM_ITRx_SetConfig>
      break;
 8007fca:	e003      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd0:	e000      	b.n	8007fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr
	...

08008038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a45      	ldr	r2, [pc, #276]	@ (8008160 <TIM_Base_SetConfig+0x128>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a44      	ldr	r2, [pc, #272]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00f      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800805e:	d00b      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a41      	ldr	r2, [pc, #260]	@ (8008168 <TIM_Base_SetConfig+0x130>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d007      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a40      	ldr	r2, [pc, #256]	@ (800816c <TIM_Base_SetConfig+0x134>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d003      	beq.n	8008078 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a3f      	ldr	r2, [pc, #252]	@ (8008170 <TIM_Base_SetConfig+0x138>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d108      	bne.n	800808a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	4313      	orrs	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a34      	ldr	r2, [pc, #208]	@ (8008160 <TIM_Base_SetConfig+0x128>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d02b      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a33      	ldr	r2, [pc, #204]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d027      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a0:	d023      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a30      	ldr	r2, [pc, #192]	@ (8008168 <TIM_Base_SetConfig+0x130>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01f      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a2f      	ldr	r2, [pc, #188]	@ (800816c <TIM_Base_SetConfig+0x134>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d01b      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2e      	ldr	r2, [pc, #184]	@ (8008170 <TIM_Base_SetConfig+0x138>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d017      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2d      	ldr	r2, [pc, #180]	@ (8008174 <TIM_Base_SetConfig+0x13c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d013      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2c      	ldr	r2, [pc, #176]	@ (8008178 <TIM_Base_SetConfig+0x140>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d00f      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a2b      	ldr	r2, [pc, #172]	@ (800817c <TIM_Base_SetConfig+0x144>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00b      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a2a      	ldr	r2, [pc, #168]	@ (8008180 <TIM_Base_SetConfig+0x148>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d007      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a29      	ldr	r2, [pc, #164]	@ (8008184 <TIM_Base_SetConfig+0x14c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d003      	beq.n	80080ea <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a28      	ldr	r2, [pc, #160]	@ (8008188 <TIM_Base_SetConfig+0x150>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d108      	bne.n	80080fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	689a      	ldr	r2, [r3, #8]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a0f      	ldr	r2, [pc, #60]	@ (8008160 <TIM_Base_SetConfig+0x128>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d003      	beq.n	8008130 <TIM_Base_SetConfig+0xf8>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a0e      	ldr	r2, [pc, #56]	@ (8008164 <TIM_Base_SetConfig+0x12c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d103      	bne.n	8008138 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	691a      	ldr	r2, [r3, #16]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2201      	movs	r2, #1
 800813c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	691b      	ldr	r3, [r3, #16]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f023 0201 	bic.w	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	611a      	str	r2, [r3, #16]
  }
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40013400 	.word	0x40013400
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40014c00 	.word	0x40014c00
 8008178:	40015000 	.word	0x40015000
 800817c:	40015400 	.word	0x40015400
 8008180:	40001800 	.word	0x40001800
 8008184:	40001c00 	.word	0x40001c00
 8008188:	40002000 	.word	0x40002000

0800818c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a1b      	ldr	r3, [r3, #32]
 80081a0:	f023 0201 	bic.w	r2, r3, #1
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f023 0303 	bic.w	r3, r3, #3
 80081c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 0302 	bic.w	r3, r3, #2
 80081d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4313      	orrs	r3, r2
 80081de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a20      	ldr	r2, [pc, #128]	@ (8008264 <TIM_OC1_SetConfig+0xd8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d003      	beq.n	80081f0 <TIM_OC1_SetConfig+0x64>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008268 <TIM_OC1_SetConfig+0xdc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10c      	bne.n	800820a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0308 	bic.w	r3, r3, #8
 80081f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	697a      	ldr	r2, [r7, #20]
 80081fe:	4313      	orrs	r3, r2
 8008200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f023 0304 	bic.w	r3, r3, #4
 8008208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a15      	ldr	r2, [pc, #84]	@ (8008264 <TIM_OC1_SetConfig+0xd8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d003      	beq.n	800821a <TIM_OC1_SetConfig+0x8e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a14      	ldr	r2, [pc, #80]	@ (8008268 <TIM_OC1_SetConfig+0xdc>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d111      	bne.n	800823e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008220:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008228:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685a      	ldr	r2, [r3, #4]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	697a      	ldr	r2, [r7, #20]
 8008256:	621a      	str	r2, [r3, #32]
}
 8008258:	bf00      	nop
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	bc80      	pop	{r7}
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40012c00 	.word	0x40012c00
 8008268:	40013400 	.word	0x40013400

0800826c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800826c:	b480      	push	{r7}
 800826e:	b087      	sub	sp, #28
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	f023 0210 	bic.w	r2, r3, #16
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	699b      	ldr	r3, [r3, #24]
 8008292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800829a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	021b      	lsls	r3, r3, #8
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4313      	orrs	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0320 	bic.w	r3, r3, #32
 80082b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	689b      	ldr	r3, [r3, #8]
 80082bc:	011b      	lsls	r3, r3, #4
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	4313      	orrs	r3, r2
 80082c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a21      	ldr	r2, [pc, #132]	@ (800834c <TIM_OC2_SetConfig+0xe0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d003      	beq.n	80082d4 <TIM_OC2_SetConfig+0x68>
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a20      	ldr	r2, [pc, #128]	@ (8008350 <TIM_OC2_SetConfig+0xe4>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10d      	bne.n	80082f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	011b      	lsls	r3, r3, #4
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a16      	ldr	r2, [pc, #88]	@ (800834c <TIM_OC2_SetConfig+0xe0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d003      	beq.n	8008300 <TIM_OC2_SetConfig+0x94>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a15      	ldr	r2, [pc, #84]	@ (8008350 <TIM_OC2_SetConfig+0xe4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d113      	bne.n	8008328 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	695b      	ldr	r3, [r3, #20]
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	693a      	ldr	r2, [r7, #16]
 8008318:	4313      	orrs	r3, r2
 800831a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	4313      	orrs	r3, r2
 8008326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	bc80      	pop	{r7}
 800834a:	4770      	bx	lr
 800834c:	40012c00 	.word	0x40012c00
 8008350:	40013400 	.word	0x40013400

08008354 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4313      	orrs	r3, r2
 8008394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800839c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a21      	ldr	r2, [pc, #132]	@ (8008434 <TIM_OC3_SetConfig+0xe0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d003      	beq.n	80083ba <TIM_OC3_SetConfig+0x66>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a20      	ldr	r2, [pc, #128]	@ (8008438 <TIM_OC3_SetConfig+0xe4>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10d      	bne.n	80083d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a16      	ldr	r2, [pc, #88]	@ (8008434 <TIM_OC3_SetConfig+0xe0>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d003      	beq.n	80083e6 <TIM_OC3_SetConfig+0x92>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a15      	ldr	r2, [pc, #84]	@ (8008438 <TIM_OC3_SetConfig+0xe4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d113      	bne.n	800840e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	011b      	lsls	r3, r3, #4
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	4313      	orrs	r3, r2
 8008400:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	621a      	str	r2, [r3, #32]
}
 8008428:	bf00      	nop
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	bc80      	pop	{r7}
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	40012c00 	.word	0x40012c00
 8008438:	40013400 	.word	0x40013400

0800843c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800843c:	b480      	push	{r7}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a1b      	ldr	r3, [r3, #32]
 8008450:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800846a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4313      	orrs	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	031b      	lsls	r3, r3, #12
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	4313      	orrs	r3, r2
 8008492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a11      	ldr	r2, [pc, #68]	@ (80084dc <TIM_OC4_SetConfig+0xa0>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d003      	beq.n	80084a4 <TIM_OC4_SetConfig+0x68>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a10      	ldr	r2, [pc, #64]	@ (80084e0 <TIM_OC4_SetConfig+0xa4>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d109      	bne.n	80084b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	019b      	lsls	r3, r3, #6
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	621a      	str	r2, [r3, #32]
}
 80084d2:	bf00      	nop
 80084d4:	371c      	adds	r7, #28
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr
 80084dc:	40012c00 	.word	0x40012c00
 80084e0:	40013400 	.word	0x40013400

080084e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a1b      	ldr	r3, [r3, #32]
 80084f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f023 0201 	bic.w	r2, r3, #1
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800850e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	011b      	lsls	r3, r3, #4
 8008514:	693a      	ldr	r2, [r7, #16]
 8008516:	4313      	orrs	r3, r2
 8008518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f023 030a 	bic.w	r3, r3, #10
 8008520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4313      	orrs	r3, r2
 8008528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	693a      	ldr	r2, [r7, #16]
 800852e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008540:	b480      	push	{r7}
 8008542:	b087      	sub	sp, #28
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	f023 0210 	bic.w	r2, r3, #16
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800856a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	031b      	lsls	r3, r3, #12
 8008570:	693a      	ldr	r2, [r7, #16]
 8008572:	4313      	orrs	r3, r2
 8008574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800857c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	011b      	lsls	r3, r3, #4
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	621a      	str	r2, [r3, #32]
}
 8008594:	bf00      	nop
 8008596:	371c      	adds	r7, #28
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr

0800859e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800859e:	b480      	push	{r7}
 80085a0:	b085      	sub	sp, #20
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f043 0307 	orr.w	r3, r3, #7
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	609a      	str	r2, [r3, #8]
}
 80085c8:	bf00      	nop
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bc80      	pop	{r7}
 80085d0:	4770      	bx	lr

080085d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b087      	sub	sp, #28
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	60f8      	str	r0, [r7, #12]
 80085da:	60b9      	str	r1, [r7, #8]
 80085dc:	607a      	str	r2, [r7, #4]
 80085de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	021a      	lsls	r2, r3, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	609a      	str	r2, [r3, #8]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	f003 031f 	and.w	r3, r3, #31
 8008622:	2201      	movs	r2, #1
 8008624:	fa02 f303 	lsl.w	r3, r2, r3
 8008628:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6a1a      	ldr	r2, [r3, #32]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	43db      	mvns	r3, r3
 8008632:	401a      	ands	r2, r3
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1a      	ldr	r2, [r3, #32]
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	6879      	ldr	r1, [r7, #4]
 8008644:	fa01 f303 	lsl.w	r3, r1, r3
 8008648:	431a      	orrs	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	bc80      	pop	{r7}
 8008656:	4770      	bx	lr

08008658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800866c:	2302      	movs	r3, #2
 800866e:	e05a      	b.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a20      	ldr	r2, [pc, #128]	@ (8008730 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d022      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008734 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d01d      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086c6:	d018      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008738 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d013      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a19      	ldr	r2, [pc, #100]	@ (800873c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d00e      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a17      	ldr	r2, [pc, #92]	@ (8008740 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d009      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a16      	ldr	r2, [pc, #88]	@ (8008744 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d004      	beq.n	80086fa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a14      	ldr	r2, [pc, #80]	@ (8008748 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d10c      	bne.n	8008714 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	4313      	orrs	r3, r2
 800870a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68ba      	ldr	r2, [r7, #8]
 8008712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	bc80      	pop	{r7}
 800872e:	4770      	bx	lr
 8008730:	40012c00 	.word	0x40012c00
 8008734:	40013400 	.word	0x40013400
 8008738:	40000400 	.word	0x40000400
 800873c:	40000800 	.word	0x40000800
 8008740:	40000c00 	.word	0x40000c00
 8008744:	40014c00 	.word	0x40014c00
 8008748:	40001800 	.word	0x40001800

0800874c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008760:	2b01      	cmp	r3, #1
 8008762:	d101      	bne.n	8008768 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008764:	2302      	movs	r3, #2
 8008766:	e03d      	b.n	80087e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	4313      	orrs	r3, r2
 800877c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4313      	orrs	r3, r2
 800878a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	695b      	ldr	r3, [r3, #20]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087e2:	2300      	movs	r3, #0
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr

080087ee <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f6:	bf00      	nop
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e042      	b.n	80088aa <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	d106      	bne.n	800883e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f7f9 fec5 	bl	80025c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2224      	movs	r2, #36	@ 0x24
 8008842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68da      	ldr	r2, [r3, #12]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008854:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 ffc0 	bl	80097dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691a      	ldr	r2, [r3, #16]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800886a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695a      	ldr	r2, [r3, #20]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800887a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800888a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2220      	movs	r2, #32
 8008896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
	...

080088b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08c      	sub	sp, #48	@ 0x30
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	4613      	mov	r3, r2
 80088c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d156      	bne.n	800897c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_UART_Transmit_DMA+0x26>
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e04f      	b.n	800897e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	88fa      	ldrh	r2, [r7, #6]
 80088e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	88fa      	ldrh	r2, [r7, #6]
 80088ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2221      	movs	r2, #33	@ 0x21
 80088fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008902:	4a21      	ldr	r2, [pc, #132]	@ (8008988 <HAL_UART_Transmit_DMA+0xd4>)
 8008904:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800890a:	4a20      	ldr	r2, [pc, #128]	@ (800898c <HAL_UART_Transmit_DMA+0xd8>)
 800890c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008912:	4a1f      	ldr	r2, [pc, #124]	@ (8008990 <HAL_UART_Transmit_DMA+0xdc>)
 8008914:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	2200      	movs	r2, #0
 800891c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800891e:	f107 0308 	add.w	r3, r7, #8
 8008922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3304      	adds	r3, #4
 8008932:	461a      	mov	r2, r3
 8008934:	88fb      	ldrh	r3, [r7, #6]
 8008936:	f7fc ff45 	bl	80057c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008942:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3314      	adds	r3, #20
 800894a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	e853 3f00 	ldrex	r3, [r3]
 8008952:	617b      	str	r3, [r7, #20]
   return(result);
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800895a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3314      	adds	r3, #20
 8008962:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008964:	627a      	str	r2, [r7, #36]	@ 0x24
 8008966:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008968:	6a39      	ldr	r1, [r7, #32]
 800896a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800896c:	e841 2300 	strex	r3, r2, [r1]
 8008970:	61fb      	str	r3, [r7, #28]
   return(result);
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d1e5      	bne.n	8008944 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	e000      	b.n	800897e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800897c:	2302      	movs	r3, #2
  }
}
 800897e:	4618      	mov	r0, r3
 8008980:	3730      	adds	r7, #48	@ 0x30
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	08009071 	.word	0x08009071
 800898c:	0800910b 	.word	0x0800910b
 8008990:	0800928f 	.word	0x0800928f

08008994 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d112      	bne.n	80089d4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d002      	beq.n	80089ba <HAL_UART_Receive_DMA+0x26>
 80089b4:	88fb      	ldrh	r3, [r7, #6]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e00b      	b.n	80089d6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	461a      	mov	r2, r3
 80089c8:	68b9      	ldr	r1, [r7, #8]
 80089ca:	68f8      	ldr	r0, [r7, #12]
 80089cc:	f000 fcaa 	bl	8009324 <UART_Start_Receive_DMA>
 80089d0:	4603      	mov	r3, r0
 80089d2:	e000      	b.n	80089d6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80089d4:	2302      	movs	r3, #2
  }
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b090      	sub	sp, #64	@ 0x40
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695b      	ldr	r3, [r3, #20]
 80089f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf14      	ite	ne
 80089f8:	2301      	movne	r3, #1
 80089fa:	2300      	moveq	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a06:	b2db      	uxtb	r3, r3
 8008a08:	2b21      	cmp	r3, #33	@ 0x21
 8008a0a:	d128      	bne.n	8008a5e <HAL_UART_DMAStop+0x80>
 8008a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d025      	beq.n	8008a5e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3314      	adds	r3, #20
 8008a18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	623b      	str	r3, [r7, #32]
   return(result);
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3314      	adds	r3, #20
 8008a30:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a32:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e5      	bne.n	8008a12 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d004      	beq.n	8008a58 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fc ff16 	bl	8005884 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fcfd 	bl	8009458 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	2b22      	cmp	r3, #34	@ 0x22
 8008a7e:	d128      	bne.n	8008ad2 <HAL_UART_DMAStop+0xf4>
 8008a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d025      	beq.n	8008ad2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008aa6:	61fa      	str	r2, [r7, #28]
 8008aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	69b9      	ldr	r1, [r7, #24]
 8008aac:	69fa      	ldr	r2, [r7, #28]
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d004      	beq.n	8008acc <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fc fedc 	bl	8005884 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f000 fcea 	bl	80094a6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3740      	adds	r7, #64	@ 0x40
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b0ba      	sub	sp, #232	@ 0xe8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b12:	f003 030f 	and.w	r3, r3, #15
 8008b16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10f      	bne.n	8008b42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b26:	f003 0320 	and.w	r3, r3, #32
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_UART_IRQHandler+0x66>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fd90 	bl	8009660 <UART_Receive_IT>
      return;
 8008b40:	e25b      	b.n	8008ffa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008b42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 80de 	beq.w	8008d08 <HAL_UART_IRQHandler+0x22c>
 8008b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d106      	bne.n	8008b66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 80d1 	beq.w	8008d08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00b      	beq.n	8008b8a <HAL_UART_IRQHandler+0xae>
 8008b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d005      	beq.n	8008b8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b82:	f043 0201 	orr.w	r2, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00b      	beq.n	8008bae <HAL_UART_IRQHandler+0xd2>
 8008b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b9a:	f003 0301 	and.w	r3, r3, #1
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	f043 0202 	orr.w	r2, r3, #2
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <HAL_UART_IRQHandler+0xf6>
 8008bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d005      	beq.n	8008bd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bca:	f043 0204 	orr.w	r2, r3, #4
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd6:	f003 0308 	and.w	r3, r3, #8
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d011      	beq.n	8008c02 <HAL_UART_IRQHandler+0x126>
 8008bde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d105      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bee:	f003 0301 	and.w	r3, r3, #1
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bfa:	f043 0208 	orr.w	r2, r3, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 81f2 	beq.w	8008ff0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d008      	beq.n	8008c2a <HAL_UART_IRQHandler+0x14e>
 8008c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fd1b 	bl	8009660 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c46:	f003 0308 	and.w	r3, r3, #8
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d103      	bne.n	8008c56 <HAL_UART_IRQHandler+0x17a>
 8008c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d04f      	beq.n	8008cf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 fc25 	bl	80094a6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d041      	beq.n	8008cee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	3314      	adds	r3, #20
 8008c92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008ca2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008cae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1d9      	bne.n	8008c6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d013      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc2:	4a7e      	ldr	r2, [pc, #504]	@ (8008ebc <HAL_UART_IRQHandler+0x3e0>)
 8008cc4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fc fe16 	bl	80058fc <HAL_DMA_Abort_IT>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d016      	beq.n	8008d04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce4:	e00e      	b.n	8008d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 f9ae 	bl	8009048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cec:	e00a      	b.n	8008d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f9aa 	bl	8009048 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cf4:	e006      	b.n	8008d04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f9a6 	bl	8009048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008d02:	e175      	b.n	8008ff0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d04:	bf00      	nop
    return;
 8008d06:	e173      	b.n	8008ff0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0c:	2b01      	cmp	r3, #1
 8008d0e:	f040 814f 	bne.w	8008fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d16:	f003 0310 	and.w	r3, r3, #16
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f000 8148 	beq.w	8008fb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d24:	f003 0310 	and.w	r3, r3, #16
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 8141 	beq.w	8008fb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60bb      	str	r3, [r7, #8]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	695b      	ldr	r3, [r3, #20]
 8008d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 80b6 	beq.w	8008ec0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 8145 	beq.w	8008ff4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d72:	429a      	cmp	r2, r3
 8008d74:	f080 813e 	bcs.w	8008ff4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	2b20      	cmp	r3, #32
 8008d88:	f000 8088 	beq.w	8008e9c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	330c      	adds	r3, #12
 8008d92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d96:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008da6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008daa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	330c      	adds	r3, #12
 8008db4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008db8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008dc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008dd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1d9      	bne.n	8008d8c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3314      	adds	r3, #20
 8008dde:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008de2:	e853 3f00 	ldrex	r3, [r3]
 8008de6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008de8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008dea:	f023 0301 	bic.w	r3, r3, #1
 8008dee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	3314      	adds	r3, #20
 8008df8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008dfc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e02:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e04:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e08:	e841 2300 	strex	r3, r2, [r1]
 8008e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d1e1      	bne.n	8008dd8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	3314      	adds	r3, #20
 8008e1a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e1e:	e853 3f00 	ldrex	r3, [r3]
 8008e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3314      	adds	r3, #20
 8008e34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008e38:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008e3e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e3      	bne.n	8008e14 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	330c      	adds	r3, #12
 8008e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e6c:	f023 0310 	bic.w	r3, r3, #16
 8008e70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e86:	e841 2300 	strex	r3, r2, [r1]
 8008e8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1e3      	bne.n	8008e5a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7fc fcf4 	bl	8005884 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2202      	movs	r2, #2
 8008ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f8d1 	bl	800905a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008eb8:	e09c      	b.n	8008ff4 <HAL_UART_IRQHandler+0x518>
 8008eba:	bf00      	nop
 8008ebc:	0800956b 	.word	0x0800956b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 808e 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	f000 8089 	beq.w	8008ff8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008efc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	330c      	adds	r3, #12
 8008f06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f12:	e841 2300 	strex	r3, r2, [r1]
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d1e3      	bne.n	8008ee6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3314      	adds	r3, #20
 8008f24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	e853 3f00 	ldrex	r3, [r3]
 8008f2c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	f023 0301 	bic.w	r3, r3, #1
 8008f34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3314      	adds	r3, #20
 8008f3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008f42:	633a      	str	r2, [r7, #48]	@ 0x30
 8008f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f4a:	e841 2300 	strex	r3, r2, [r1]
 8008f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1e3      	bne.n	8008f1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2220      	movs	r2, #32
 8008f5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2200      	movs	r2, #0
 8008f62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f023 0310 	bic.w	r3, r3, #16
 8008f7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	330c      	adds	r3, #12
 8008f84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f88:	61fa      	str	r2, [r7, #28]
 8008f8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	617b      	str	r3, [r7, #20]
   return(result);
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e3      	bne.n	8008f64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fa2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f856 	bl	800905a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008fae:	e023      	b.n	8008ff8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d009      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x4f4>
 8008fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d003      	beq.n	8008fd0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fae2 	bl	8009592 <UART_Transmit_IT>
    return;
 8008fce:	e014      	b.n	8008ffa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00e      	beq.n	8008ffa <HAL_UART_IRQHandler+0x51e>
 8008fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d008      	beq.n	8008ffa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb21 	bl	8009630 <UART_EndTransmit_IT>
    return;
 8008fee:	e004      	b.n	8008ffa <HAL_UART_IRQHandler+0x51e>
    return;
 8008ff0:	bf00      	nop
 8008ff2:	e002      	b.n	8008ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8008ff4:	bf00      	nop
 8008ff6:	e000      	b.n	8008ffa <HAL_UART_IRQHandler+0x51e>
      return;
 8008ff8:	bf00      	nop
  }
}
 8008ffa:	37e8      	adds	r7, #232	@ 0xe8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr

08009012 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009012:	b480      	push	{r7}
 8009014:	b083      	sub	sp, #12
 8009016:	af00      	add	r7, sp, #0
 8009018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	bc80      	pop	{r7}
 8009022:	4770      	bx	lr

08009024 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b083      	sub	sp, #12
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	bc80      	pop	{r7}
 8009034:	4770      	bx	lr

08009036 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800903e:	bf00      	nop
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr

0800905a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	bc80      	pop	{r7}
 800906e:	4770      	bx	lr

08009070 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b090      	sub	sp, #64	@ 0x40
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800907c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d137      	bne.n	80090fc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800908c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800908e:	2200      	movs	r2, #0
 8009090:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3314      	adds	r3, #20
 8009098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	623b      	str	r3, [r7, #32]
   return(result);
 80090a2:	6a3b      	ldr	r3, [r7, #32]
 80090a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	3314      	adds	r3, #20
 80090b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80090b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e5      	bne.n	8009092 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	330c      	adds	r3, #12
 80090cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80090de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	330c      	adds	r3, #12
 80090e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80090e6:	61fa      	str	r2, [r7, #28]
 80090e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	69b9      	ldr	r1, [r7, #24]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	617b      	str	r3, [r7, #20]
   return(result);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e5      	bne.n	80090c6 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090fa:	e002      	b.n	8009102 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090fc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80090fe:	f7ff ff7f 	bl	8009000 <HAL_UART_TxCpltCallback>
}
 8009102:	bf00      	nop
 8009104:	3740      	adds	r7, #64	@ 0x40
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009116:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff ff7a 	bl	8009012 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911e:	bf00      	nop
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b09c      	sub	sp, #112	@ 0x70
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009132:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0320 	and.w	r3, r3, #32
 800913e:	2b00      	cmp	r3, #0
 8009140:	d172      	bne.n	8009228 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009144:	2200      	movs	r2, #0
 8009146:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	330c      	adds	r3, #12
 800914e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009158:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800915a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800915e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
 8009166:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009168:	65ba      	str	r2, [r7, #88]	@ 0x58
 800916a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800916c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800916e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009170:	e841 2300 	strex	r3, r2, [r1]
 8009174:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009176:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009178:	2b00      	cmp	r3, #0
 800917a:	d1e5      	bne.n	8009148 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	3314      	adds	r3, #20
 8009182:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800918c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	667b      	str	r3, [r7, #100]	@ 0x64
 8009194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3314      	adds	r3, #20
 800919a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800919c:	647a      	str	r2, [r7, #68]	@ 0x44
 800919e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e5      	bne.n	800917c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	3314      	adds	r3, #20
 80091b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ba:	e853 3f00 	ldrex	r3, [r3]
 80091be:	623b      	str	r3, [r7, #32]
   return(result);
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80091c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3314      	adds	r3, #20
 80091ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80091d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80091d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d8:	e841 2300 	strex	r3, r2, [r1]
 80091dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1e5      	bne.n	80091b0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e6:	2220      	movs	r2, #32
 80091e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d119      	bne.n	8009228 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	330c      	adds	r3, #12
 80091fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	e853 3f00 	ldrex	r3, [r3]
 8009202:	60fb      	str	r3, [r7, #12]
   return(result);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f023 0310 	bic.w	r3, r3, #16
 800920a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800920c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	330c      	adds	r3, #12
 8009212:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009214:	61fa      	str	r2, [r7, #28]
 8009216:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	69b9      	ldr	r1, [r7, #24]
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	617b      	str	r3, [r7, #20]
   return(result);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e5      	bne.n	80091f4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800922a:	2200      	movs	r2, #0
 800922c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800922e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009232:	2b01      	cmp	r3, #1
 8009234:	d106      	bne.n	8009244 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800923a:	4619      	mov	r1, r3
 800923c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800923e:	f7ff ff0c 	bl	800905a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009242:	e002      	b.n	800924a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009244:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009246:	f7ff feed 	bl	8009024 <HAL_UART_RxCpltCallback>
}
 800924a:	bf00      	nop
 800924c:	3770      	adds	r7, #112	@ 0x70
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b084      	sub	sp, #16
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800926a:	2b01      	cmp	r3, #1
 800926c:	d108      	bne.n	8009280 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	b29b      	uxth	r3, r3
 8009276:	4619      	mov	r1, r3
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff feee 	bl	800905a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800927e:	e002      	b.n	8009286 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009280:	68f8      	ldr	r0, [r7, #12]
 8009282:	f7ff fed8 	bl	8009036 <HAL_UART_RxHalfCpltCallback>
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	695b      	ldr	r3, [r3, #20]
 80092a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	bf14      	ite	ne
 80092ae:	2301      	movne	r3, #1
 80092b0:	2300      	moveq	r3, #0
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b21      	cmp	r3, #33	@ 0x21
 80092c0:	d108      	bne.n	80092d4 <UART_DMAError+0x46>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2200      	movs	r2, #0
 80092cc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80092ce:	68b8      	ldr	r0, [r7, #8]
 80092d0:	f000 f8c2 	bl	8009458 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bf14      	ite	ne
 80092e2:	2301      	movne	r3, #1
 80092e4:	2300      	moveq	r3, #0
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b22      	cmp	r3, #34	@ 0x22
 80092f4:	d108      	bne.n	8009308 <UART_DMAError+0x7a>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d005      	beq.n	8009308 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	2200      	movs	r2, #0
 8009300:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009302:	68b8      	ldr	r0, [r7, #8]
 8009304:	f000 f8cf 	bl	80094a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930c:	f043 0210 	orr.w	r2, r3, #16
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009314:	68b8      	ldr	r0, [r7, #8]
 8009316:	f7ff fe97 	bl	8009048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931a:	bf00      	nop
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
	...

08009324 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b098      	sub	sp, #96	@ 0x60
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	4613      	mov	r3, r2
 8009330:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	88fa      	ldrh	r2, [r7, #6]
 800933c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2222      	movs	r2, #34	@ 0x22
 8009348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009350:	4a3e      	ldr	r2, [pc, #248]	@ (800944c <UART_Start_Receive_DMA+0x128>)
 8009352:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009358:	4a3d      	ldr	r2, [pc, #244]	@ (8009450 <UART_Start_Receive_DMA+0x12c>)
 800935a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009360:	4a3c      	ldr	r2, [pc, #240]	@ (8009454 <UART_Start_Receive_DMA+0x130>)
 8009362:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009368:	2200      	movs	r2, #0
 800936a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800936c:	f107 0308 	add.w	r3, r7, #8
 8009370:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	3304      	adds	r3, #4
 800937c:	4619      	mov	r1, r3
 800937e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	88fb      	ldrh	r3, [r7, #6]
 8009384:	f7fc fa1e 	bl	80057c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009388:	2300      	movs	r3, #0
 800938a:	613b      	str	r3, [r7, #16]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	613b      	str	r3, [r7, #16]
 800939c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d019      	beq.n	80093da <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	330c      	adds	r3, #12
 80093ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80093c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ca:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80093cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80093ce:	e841 2300 	strex	r3, r2, [r1]
 80093d2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80093d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1e5      	bne.n	80093a6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	3314      	adds	r3, #20
 80093e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e4:	e853 3f00 	ldrex	r3, [r3]
 80093e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80093ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ec:	f043 0301 	orr.w	r3, r3, #1
 80093f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	3314      	adds	r3, #20
 80093f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80093fa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80093fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009400:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009402:	e841 2300 	strex	r3, r2, [r1]
 8009406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940a:	2b00      	cmp	r3, #0
 800940c:	d1e5      	bne.n	80093da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	3314      	adds	r3, #20
 8009414:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	e853 3f00 	ldrex	r3, [r3]
 800941c:	617b      	str	r3, [r7, #20]
   return(result);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009424:	653b      	str	r3, [r7, #80]	@ 0x50
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3314      	adds	r3, #20
 800942c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800942e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009432:	6a39      	ldr	r1, [r7, #32]
 8009434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009436:	e841 2300 	strex	r3, r2, [r1]
 800943a:	61fb      	str	r3, [r7, #28]
   return(result);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d1e5      	bne.n	800940e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8009442:	2300      	movs	r3, #0
}
 8009444:	4618      	mov	r0, r3
 8009446:	3760      	adds	r7, #96	@ 0x60
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	08009127 	.word	0x08009127
 8009450:	08009253 	.word	0x08009253
 8009454:	0800928f 	.word	0x0800928f

08009458 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009458:	b480      	push	{r7}
 800945a:	b089      	sub	sp, #36	@ 0x24
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	330c      	adds	r3, #12
 8009466:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	e853 3f00 	ldrex	r3, [r3]
 800946e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009476:	61fb      	str	r3, [r7, #28]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	330c      	adds	r3, #12
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	61ba      	str	r2, [r7, #24]
 8009482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009484:	6979      	ldr	r1, [r7, #20]
 8009486:	69ba      	ldr	r2, [r7, #24]
 8009488:	e841 2300 	strex	r3, r2, [r1]
 800948c:	613b      	str	r3, [r7, #16]
   return(result);
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1e5      	bne.n	8009460 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2220      	movs	r2, #32
 8009498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800949c:	bf00      	nop
 800949e:	3724      	adds	r7, #36	@ 0x24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bc80      	pop	{r7}
 80094a4:	4770      	bx	lr

080094a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094a6:	b480      	push	{r7}
 80094a8:	b095      	sub	sp, #84	@ 0x54
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b8:	e853 3f00 	ldrex	r3, [r3]
 80094bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80094be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	330c      	adds	r3, #12
 80094cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094ce:	643a      	str	r2, [r7, #64]	@ 0x40
 80094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80094d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e5      	bne.n	80094ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3314      	adds	r3, #20
 80094e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80094f2:	69fb      	ldr	r3, [r7, #28]
 80094f4:	f023 0301 	bic.w	r3, r3, #1
 80094f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3314      	adds	r3, #20
 8009500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009502:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009504:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009508:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e5      	bne.n	80094e2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800951a:	2b01      	cmp	r3, #1
 800951c:	d119      	bne.n	8009552 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	330c      	adds	r3, #12
 8009524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	60bb      	str	r3, [r7, #8]
   return(result);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	f023 0310 	bic.w	r3, r3, #16
 8009534:	647b      	str	r3, [r7, #68]	@ 0x44
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	330c      	adds	r3, #12
 800953c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800953e:	61ba      	str	r2, [r7, #24]
 8009540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009542:	6979      	ldr	r1, [r7, #20]
 8009544:	69ba      	ldr	r2, [r7, #24]
 8009546:	e841 2300 	strex	r3, r2, [r1]
 800954a:	613b      	str	r3, [r7, #16]
   return(result);
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1e5      	bne.n	800951e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009560:	bf00      	nop
 8009562:	3754      	adds	r7, #84	@ 0x54
 8009564:	46bd      	mov	sp, r7
 8009566:	bc80      	pop	{r7}
 8009568:	4770      	bx	lr

0800956a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b084      	sub	sp, #16
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009576:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff fd5f 	bl	8009048 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800958a:	bf00      	nop
 800958c:	3710      	adds	r7, #16
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}

08009592 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009592:	b480      	push	{r7}
 8009594:	b085      	sub	sp, #20
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	2b21      	cmp	r3, #33	@ 0x21
 80095a4:	d13e      	bne.n	8009624 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095ae:	d114      	bne.n	80095da <UART_Transmit_IT+0x48>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d110      	bne.n	80095da <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a1b      	ldr	r3, [r3, #32]
 80095bc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	881b      	ldrh	r3, [r3, #0]
 80095c2:	461a      	mov	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095cc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	1c9a      	adds	r2, r3, #2
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	621a      	str	r2, [r3, #32]
 80095d8:	e008      	b.n	80095ec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	1c59      	adds	r1, r3, #1
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	6211      	str	r1, [r2, #32]
 80095e4:	781a      	ldrb	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	4619      	mov	r1, r3
 80095fa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10f      	bne.n	8009620 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68da      	ldr	r2, [r3, #12]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800960e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68da      	ldr	r2, [r3, #12]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800961e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009620:	2300      	movs	r3, #0
 8009622:	e000      	b.n	8009626 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009624:	2302      	movs	r3, #2
  }
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr

08009630 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b082      	sub	sp, #8
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009646:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2220      	movs	r2, #32
 800964c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fcd5 	bl	8009000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b08c      	sub	sp, #48	@ 0x30
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800966e:	b2db      	uxtb	r3, r3
 8009670:	2b22      	cmp	r3, #34	@ 0x22
 8009672:	f040 80ae 	bne.w	80097d2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800967e:	d117      	bne.n	80096b0 <UART_Receive_IT+0x50>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d113      	bne.n	80096b0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009688:	2300      	movs	r3, #0
 800968a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009690:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	b29b      	uxth	r3, r3
 800969a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800969e:	b29a      	uxth	r2, r3
 80096a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096a2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a8:	1c9a      	adds	r2, r3, #2
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80096ae:	e026      	b.n	80096fe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80096b6:	2300      	movs	r3, #0
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c2:	d007      	beq.n	80096d4 <UART_Receive_IT+0x74>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <UART_Receive_IT+0x82>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096de:	701a      	strb	r2, [r3, #0]
 80096e0:	e008      	b.n	80096f4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	b2db      	uxtb	r3, r3
 80096ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096ee:	b2da      	uxtb	r2, r3
 80096f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096f2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009702:	b29b      	uxth	r3, r3
 8009704:	3b01      	subs	r3, #1
 8009706:	b29b      	uxth	r3, r3
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	4619      	mov	r1, r3
 800970c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800970e:	2b00      	cmp	r3, #0
 8009710:	d15d      	bne.n	80097ce <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f022 0220 	bic.w	r2, r2, #32
 8009720:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009730:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	695a      	ldr	r2, [r3, #20]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009754:	2b01      	cmp	r3, #1
 8009756:	d135      	bne.n	80097c4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	330c      	adds	r3, #12
 8009764:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	613b      	str	r3, [r7, #16]
   return(result);
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	f023 0310 	bic.w	r3, r3, #16
 8009774:	627b      	str	r3, [r7, #36]	@ 0x24
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	330c      	adds	r3, #12
 800977c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800977e:	623a      	str	r2, [r7, #32]
 8009780:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009782:	69f9      	ldr	r1, [r7, #28]
 8009784:	6a3a      	ldr	r2, [r7, #32]
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	61bb      	str	r3, [r7, #24]
   return(result);
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d1e5      	bne.n	800975e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b10      	cmp	r3, #16
 800979e:	d10a      	bne.n	80097b6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097a0:	2300      	movs	r3, #0
 80097a2:	60fb      	str	r3, [r7, #12]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff fc4c 	bl	800905a <HAL_UARTEx_RxEventCallback>
 80097c2:	e002      	b.n	80097ca <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7ff fc2d 	bl	8009024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097ca:	2300      	movs	r3, #0
 80097cc:	e002      	b.n	80097d4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80097ce:	2300      	movs	r3, #0
 80097d0:	e000      	b.n	80097d4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80097d2:	2302      	movs	r3, #2
  }
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3730      	adds	r7, #48	@ 0x30
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689a      	ldr	r2, [r3, #8]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	431a      	orrs	r2, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	4313      	orrs	r3, r2
 800980a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8009816:	f023 030c 	bic.w	r3, r3, #12
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	68b9      	ldr	r1, [r7, #8]
 8009820:	430b      	orrs	r3, r1
 8009822:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a2c      	ldr	r2, [pc, #176]	@ (80098f0 <UART_SetConfig+0x114>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d103      	bne.n	800984c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009844:	f7fd fcc0 	bl	80071c8 <HAL_RCC_GetPCLK2Freq>
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	e002      	b.n	8009852 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800984c:	f7fd fca8 	bl	80071a0 <HAL_RCC_GetPCLK1Freq>
 8009850:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009a      	lsls	r2, r3, #2
 800985c:	441a      	add	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	685b      	ldr	r3, [r3, #4]
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	fbb2 f3f3 	udiv	r3, r2, r3
 8009868:	4a22      	ldr	r2, [pc, #136]	@ (80098f4 <UART_SetConfig+0x118>)
 800986a:	fba2 2303 	umull	r2, r3, r2, r3
 800986e:	095b      	lsrs	r3, r3, #5
 8009870:	0119      	lsls	r1, r3, #4
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	4613      	mov	r3, r2
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	4413      	add	r3, r2
 800987a:	009a      	lsls	r2, r3, #2
 800987c:	441a      	add	r2, r3
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	fbb2 f2f3 	udiv	r2, r2, r3
 8009888:	4b1a      	ldr	r3, [pc, #104]	@ (80098f4 <UART_SetConfig+0x118>)
 800988a:	fba3 0302 	umull	r0, r3, r3, r2
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	2064      	movs	r0, #100	@ 0x64
 8009892:	fb00 f303 	mul.w	r3, r0, r3
 8009896:	1ad3      	subs	r3, r2, r3
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	3332      	adds	r3, #50	@ 0x32
 800989c:	4a15      	ldr	r2, [pc, #84]	@ (80098f4 <UART_SetConfig+0x118>)
 800989e:	fba2 2303 	umull	r2, r3, r2, r3
 80098a2:	095b      	lsrs	r3, r3, #5
 80098a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098a8:	4419      	add	r1, r3
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009a      	lsls	r2, r3, #2
 80098b4:	441a      	add	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80098c0:	4b0c      	ldr	r3, [pc, #48]	@ (80098f4 <UART_SetConfig+0x118>)
 80098c2:	fba3 0302 	umull	r0, r3, r3, r2
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	2064      	movs	r0, #100	@ 0x64
 80098ca:	fb00 f303 	mul.w	r3, r0, r3
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	011b      	lsls	r3, r3, #4
 80098d2:	3332      	adds	r3, #50	@ 0x32
 80098d4:	4a07      	ldr	r2, [pc, #28]	@ (80098f4 <UART_SetConfig+0x118>)
 80098d6:	fba2 2303 	umull	r2, r3, r2, r3
 80098da:	095b      	lsrs	r3, r3, #5
 80098dc:	f003 020f 	and.w	r2, r3, #15
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	440a      	add	r2, r1
 80098e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40013800 	.word	0x40013800
 80098f4:	51eb851f 	.word	0x51eb851f

080098f8 <memset>:
 80098f8:	4603      	mov	r3, r0
 80098fa:	4402      	add	r2, r0
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d100      	bne.n	8009902 <memset+0xa>
 8009900:	4770      	bx	lr
 8009902:	f803 1b01 	strb.w	r1, [r3], #1
 8009906:	e7f9      	b.n	80098fc <memset+0x4>

08009908 <__libc_init_array>:
 8009908:	b570      	push	{r4, r5, r6, lr}
 800990a:	2600      	movs	r6, #0
 800990c:	4d0c      	ldr	r5, [pc, #48]	@ (8009940 <__libc_init_array+0x38>)
 800990e:	4c0d      	ldr	r4, [pc, #52]	@ (8009944 <__libc_init_array+0x3c>)
 8009910:	1b64      	subs	r4, r4, r5
 8009912:	10a4      	asrs	r4, r4, #2
 8009914:	42a6      	cmp	r6, r4
 8009916:	d109      	bne.n	800992c <__libc_init_array+0x24>
 8009918:	f000 f81a 	bl	8009950 <_init>
 800991c:	2600      	movs	r6, #0
 800991e:	4d0a      	ldr	r5, [pc, #40]	@ (8009948 <__libc_init_array+0x40>)
 8009920:	4c0a      	ldr	r4, [pc, #40]	@ (800994c <__libc_init_array+0x44>)
 8009922:	1b64      	subs	r4, r4, r5
 8009924:	10a4      	asrs	r4, r4, #2
 8009926:	42a6      	cmp	r6, r4
 8009928:	d105      	bne.n	8009936 <__libc_init_array+0x2e>
 800992a:	bd70      	pop	{r4, r5, r6, pc}
 800992c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009930:	4798      	blx	r3
 8009932:	3601      	adds	r6, #1
 8009934:	e7ee      	b.n	8009914 <__libc_init_array+0xc>
 8009936:	f855 3b04 	ldr.w	r3, [r5], #4
 800993a:	4798      	blx	r3
 800993c:	3601      	adds	r6, #1
 800993e:	e7f2      	b.n	8009926 <__libc_init_array+0x1e>
 8009940:	08009f18 	.word	0x08009f18
 8009944:	08009f18 	.word	0x08009f18
 8009948:	08009f18 	.word	0x08009f18
 800994c:	08009f1c 	.word	0x08009f1c

08009950 <_init>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr

0800995c <_fini>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr
